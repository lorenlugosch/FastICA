//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Nov 28 14:28:18 2015
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 12
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @product_1 = internal unnamed_addr global [50 x float] zeroinitializer, align 32
`define TAG_g_product_1 `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_product_1_a {`TAG_g_product_1, 23'd0}
// @product_2.0 = internal unnamed_addr global float 0.000000e+00
`define TAG_g_product_20 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_product_20_a {`TAG_g_product_20, 23'd0}
// @product_2.1 = internal unnamed_addr global float 0.000000e+00
`define TAG_g_product_21 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_product_21_a {`TAG_g_product_21, 23'd0}
// @product_3.0 = internal unnamed_addr global float 0.000000e+00
`define TAG_g_product_30 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_product_30_a {`TAG_g_product_30, 23'd0}
// @product_3.1 = internal unnamed_addr global float 0.000000e+00
`define TAG_g_product_31 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_product_31_a {`TAG_g_product_31, 23'd0}
// @sum_1 = internal unnamed_addr global float 0.000000e+00
`define TAG_g_sum_1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_sum_1_a {`TAG_g_sum_1, 23'd0}
// @w.0 = internal unnamed_addr global float 0xBFA35A8580000000
`define TAG_g_w0 `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_w0_a {`TAG_g_w0, 23'd0}
// @w.1 = internal unnamed_addr global float 0x3FD9D7DC00000000
`define TAG_g_w1 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_w1_a {`TAG_g_w1, 23'd0}
// @w_next.0 = internal unnamed_addr global float 0xBFF9DB8BA0000000
`define TAG_g_w_next0 `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_w_next0_a {`TAG_g_w_next0, 23'd0}
// @w_next.1 = internal unnamed_addr global float 0x3F8E1B08A0000000
`define TAG_g_w_next1 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_w_next1_a {`TAG_g_w_next1, 23'd0}
// @whitened_signals = internal unnamed_addr constant [2 x [50 x float]] [[50 x float] [float 0x3FA69AD5A0000000, float 0x3FF24CCCE0000000, float 0x3FF3895E80000000, float 0x3FC87F6D80000000, float 0xBFF...
`define TAG_g_whitened_signals `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_whitened_signals_a {`TAG_g_whitened_signals, 23'd0}
//   %.omp_data_o.13.i.i = alloca %struct..omp_data_s.12, align 8
`define TAG_main_entry_omp_data_o13ii `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_main_entry_omp_data_o13ii_a {`TAG_main_entry_omp_data_o13ii, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] whitened_signals_address_a;
reg [6:0] whitened_signals_address_b;
reg whitened_signals_write_enable_a;
reg whitened_signals_write_enable_b;
reg [31:0] whitened_signals_in_a;
reg [31:0] whitened_signals_in_b;
wire [31:0] whitened_signals_out_a;
wire [31:0] whitened_signals_out_b;

// @whitened_signals = internal unnamed_addr constant [2 x [50 x float]] [[50 x float] [float 0x3FA69AD5A0000000, float 0x3FF24CCCE0000000, float 0x3FF3895E80000000, float 0x3FC87F6D80000000, float 0xBFF...
rom_dual_port whitened_signals (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( whitened_signals_address_a ),
	.address_b( whitened_signals_address_b ),
	.q_a( whitened_signals_out_a ),
	.q_b( whitened_signals_out_b)
);
defparam whitened_signals.width_a = 32;
defparam whitened_signals.width_b = 32;
defparam whitened_signals.widthad_a = 7;
defparam whitened_signals.widthad_b = 7;
defparam whitened_signals.numwords_a = 100;
defparam whitened_signals.numwords_b = 100;
defparam whitened_signals.latency = ram_latency;
defparam whitened_signals.init_file = "whitened_signals.mif";

reg [0:0] sum_1_address_a;
reg [0:0] sum_1_address_b;
reg sum_1_write_enable_a;
reg sum_1_write_enable_b;
reg [31:0] sum_1_in_a;
reg [31:0] sum_1_in_b;
wire [31:0] sum_1_out_a;
wire [31:0] sum_1_out_b;

// @sum_1 = internal unnamed_addr global float 0.000000e+00
ram_dual_port sum_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sum_1_address_a ),
	.address_b( sum_1_address_b ),
	.wren_a( sum_1_write_enable_a ),
	.wren_b( sum_1_write_enable_b ),
	.data_a( sum_1_in_a ),
	.data_b( sum_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sum_1_out_a ),
	.q_b( sum_1_out_b)
);
defparam sum_1.width_a = 32;
defparam sum_1.width_b = 32;
defparam sum_1.widthad_a = 1;
defparam sum_1.widthad_b = 1;
defparam sum_1.width_be_a = 1;
defparam sum_1.width_be_b = 1;
defparam sum_1.numwords_a = 1;
defparam sum_1.numwords_b = 1;
defparam sum_1.latency = ram_latency;
defparam sum_1.init_file = "sum_1.mif";

reg [0:0] product_30_address_a;
reg [0:0] product_30_address_b;
reg product_30_write_enable_a;
reg product_30_write_enable_b;
reg [31:0] product_30_in_a;
reg [31:0] product_30_in_b;
wire [31:0] product_30_out_a;
wire [31:0] product_30_out_b;

// @product_3.0 = internal unnamed_addr global float 0.000000e+00
ram_dual_port product_30 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_30_address_a ),
	.address_b( product_30_address_b ),
	.wren_a( product_30_write_enable_a ),
	.wren_b( product_30_write_enable_b ),
	.data_a( product_30_in_a ),
	.data_b( product_30_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_30_out_a ),
	.q_b( product_30_out_b)
);
defparam product_30.width_a = 32;
defparam product_30.width_b = 32;
defparam product_30.widthad_a = 1;
defparam product_30.widthad_b = 1;
defparam product_30.width_be_a = 1;
defparam product_30.width_be_b = 1;
defparam product_30.numwords_a = 1;
defparam product_30.numwords_b = 1;
defparam product_30.latency = ram_latency;
defparam product_30.init_file = "product_30.mif";

reg [0:0] product_31_address_a;
reg [0:0] product_31_address_b;
reg product_31_write_enable_a;
reg product_31_write_enable_b;
reg [31:0] product_31_in_a;
reg [31:0] product_31_in_b;
wire [31:0] product_31_out_a;
wire [31:0] product_31_out_b;

// @product_3.1 = internal unnamed_addr global float 0.000000e+00
ram_dual_port product_31 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_31_address_a ),
	.address_b( product_31_address_b ),
	.wren_a( product_31_write_enable_a ),
	.wren_b( product_31_write_enable_b ),
	.data_a( product_31_in_a ),
	.data_b( product_31_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_31_out_a ),
	.q_b( product_31_out_b)
);
defparam product_31.width_a = 32;
defparam product_31.width_b = 32;
defparam product_31.widthad_a = 1;
defparam product_31.widthad_b = 1;
defparam product_31.width_be_a = 1;
defparam product_31.width_be_b = 1;
defparam product_31.numwords_a = 1;
defparam product_31.numwords_b = 1;
defparam product_31.latency = ram_latency;
defparam product_31.init_file = "product_31.mif";

reg [0:0] product_20_address_a;
reg [0:0] product_20_address_b;
reg product_20_write_enable_a;
reg product_20_write_enable_b;
reg [31:0] product_20_in_a;
reg [31:0] product_20_in_b;
wire [31:0] product_20_out_a;
wire [31:0] product_20_out_b;

// @product_2.0 = internal unnamed_addr global float 0.000000e+00
ram_dual_port product_20 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_20_address_a ),
	.address_b( product_20_address_b ),
	.wren_a( product_20_write_enable_a ),
	.wren_b( product_20_write_enable_b ),
	.data_a( product_20_in_a ),
	.data_b( product_20_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_20_out_a ),
	.q_b( product_20_out_b)
);
defparam product_20.width_a = 32;
defparam product_20.width_b = 32;
defparam product_20.widthad_a = 1;
defparam product_20.widthad_b = 1;
defparam product_20.width_be_a = 1;
defparam product_20.width_be_b = 1;
defparam product_20.numwords_a = 1;
defparam product_20.numwords_b = 1;
defparam product_20.latency = ram_latency;
defparam product_20.init_file = "product_20.mif";

reg [0:0] product_21_address_a;
reg [0:0] product_21_address_b;
reg product_21_write_enable_a;
reg product_21_write_enable_b;
reg [31:0] product_21_in_a;
reg [31:0] product_21_in_b;
wire [31:0] product_21_out_a;
wire [31:0] product_21_out_b;

// @product_2.1 = internal unnamed_addr global float 0.000000e+00
ram_dual_port product_21 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_21_address_a ),
	.address_b( product_21_address_b ),
	.wren_a( product_21_write_enable_a ),
	.wren_b( product_21_write_enable_b ),
	.data_a( product_21_in_a ),
	.data_b( product_21_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_21_out_a ),
	.q_b( product_21_out_b)
);
defparam product_21.width_a = 32;
defparam product_21.width_b = 32;
defparam product_21.widthad_a = 1;
defparam product_21.widthad_b = 1;
defparam product_21.width_be_a = 1;
defparam product_21.width_be_b = 1;
defparam product_21.numwords_a = 1;
defparam product_21.numwords_b = 1;
defparam product_21.latency = ram_latency;
defparam product_21.init_file = "product_21.mif";

reg [5:0] product_1_address_a;
reg [5:0] product_1_address_b;
reg product_1_write_enable_a;
reg product_1_write_enable_b;
reg [31:0] product_1_in_a;
reg [31:0] product_1_in_b;
wire [31:0] product_1_out_a;
wire [31:0] product_1_out_b;

// @product_1 = internal unnamed_addr global [50 x float] zeroinitializer, align 32
ram_dual_port product_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_1_address_a ),
	.address_b( product_1_address_b ),
	.wren_a( product_1_write_enable_a ),
	.wren_b( product_1_write_enable_b ),
	.data_a( product_1_in_a ),
	.data_b( product_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_1_out_a ),
	.q_b( product_1_out_b)
);
defparam product_1.width_a = 32;
defparam product_1.width_b = 32;
defparam product_1.widthad_a = 6;
defparam product_1.widthad_b = 6;
defparam product_1.width_be_a = 1;
defparam product_1.width_be_b = 1;
defparam product_1.numwords_a = 50;
defparam product_1.numwords_b = 50;
defparam product_1.latency = ram_latency;
defparam product_1.init_file = "product_1.mif";

reg [0:0] w0_address_a;
reg [0:0] w0_address_b;
reg w0_write_enable_a;
reg w0_write_enable_b;
reg [31:0] w0_in_a;
reg [31:0] w0_in_b;
wire [31:0] w0_out_a;
wire [31:0] w0_out_b;

// @w.0 = internal unnamed_addr global float 0xBFA35A8580000000
ram_dual_port w0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( w0_address_a ),
	.address_b( w0_address_b ),
	.wren_a( w0_write_enable_a ),
	.wren_b( w0_write_enable_b ),
	.data_a( w0_in_a ),
	.data_b( w0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( w0_out_a ),
	.q_b( w0_out_b)
);
defparam w0.width_a = 32;
defparam w0.width_b = 32;
defparam w0.widthad_a = 1;
defparam w0.widthad_b = 1;
defparam w0.width_be_a = 1;
defparam w0.width_be_b = 1;
defparam w0.numwords_a = 1;
defparam w0.numwords_b = 1;
defparam w0.latency = ram_latency;
defparam w0.init_file = "w0.mif";

reg [0:0] w1_address_a;
reg [0:0] w1_address_b;
reg w1_write_enable_a;
reg w1_write_enable_b;
reg [31:0] w1_in_a;
reg [31:0] w1_in_b;
wire [31:0] w1_out_a;
wire [31:0] w1_out_b;

// @w.1 = internal unnamed_addr global float 0x3FD9D7DC00000000
ram_dual_port w1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( w1_address_a ),
	.address_b( w1_address_b ),
	.wren_a( w1_write_enable_a ),
	.wren_b( w1_write_enable_b ),
	.data_a( w1_in_a ),
	.data_b( w1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( w1_out_a ),
	.q_b( w1_out_b)
);
defparam w1.width_a = 32;
defparam w1.width_b = 32;
defparam w1.widthad_a = 1;
defparam w1.widthad_b = 1;
defparam w1.width_be_a = 1;
defparam w1.width_be_b = 1;
defparam w1.numwords_a = 1;
defparam w1.numwords_b = 1;
defparam w1.latency = ram_latency;
defparam w1.init_file = "w1.mif";

reg [0:0] w_next0_address_a;
reg [0:0] w_next0_address_b;
reg w_next0_write_enable_a;
reg w_next0_write_enable_b;
reg [31:0] w_next0_in_a;
reg [31:0] w_next0_in_b;
wire [31:0] w_next0_out_a;
wire [31:0] w_next0_out_b;

// @w_next.0 = internal unnamed_addr global float 0xBFF9DB8BA0000000
ram_dual_port w_next0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( w_next0_address_a ),
	.address_b( w_next0_address_b ),
	.wren_a( w_next0_write_enable_a ),
	.wren_b( w_next0_write_enable_b ),
	.data_a( w_next0_in_a ),
	.data_b( w_next0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( w_next0_out_a ),
	.q_b( w_next0_out_b)
);
defparam w_next0.width_a = 32;
defparam w_next0.width_b = 32;
defparam w_next0.widthad_a = 1;
defparam w_next0.widthad_b = 1;
defparam w_next0.width_be_a = 1;
defparam w_next0.width_be_b = 1;
defparam w_next0.numwords_a = 1;
defparam w_next0.numwords_b = 1;
defparam w_next0.latency = ram_latency;
defparam w_next0.init_file = "w_next0.mif";

reg [0:0] w_next1_address_a;
reg [0:0] w_next1_address_b;
reg w_next1_write_enable_a;
reg w_next1_write_enable_b;
reg [31:0] w_next1_in_a;
reg [31:0] w_next1_in_b;
wire [31:0] w_next1_out_a;
wire [31:0] w_next1_out_b;

// @w_next.1 = internal unnamed_addr global float 0x3F8E1B08A0000000
ram_dual_port w_next1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( w_next1_address_a ),
	.address_b( w_next1_address_b ),
	.wren_a( w_next1_write_enable_a ),
	.wren_b( w_next1_write_enable_b ),
	.data_a( w_next1_in_a ),
	.data_b( w_next1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( w_next1_out_a ),
	.q_b( w_next1_out_b)
);
defparam w_next1.width_a = 32;
defparam w_next1.width_b = 32;
defparam w_next1.widthad_a = 1;
defparam w_next1.widthad_b = 1;
defparam w_next1.width_be_a = 1;
defparam w_next1.width_be_b = 1;
defparam w_next1.numwords_a = 1;
defparam w_next1.numwords_b = 1;
defparam w_next1.latency = ram_latency;
defparam w_next1.init_file = "w_next1.mif";

reg [0:0] main_entry_omp_data_o13ii_address_a;
reg [0:0] main_entry_omp_data_o13ii_address_b;
reg main_entry_omp_data_o13ii_write_enable_a;
reg main_entry_omp_data_o13ii_write_enable_b;
reg [63:0] main_entry_omp_data_o13ii_in_a;
reg [63:0] main_entry_omp_data_o13ii_in_b;
wire [63:0] main_entry_omp_data_o13ii_out_a;
wire [63:0] main_entry_omp_data_o13ii_out_b;
reg [8-1:0] main_entry_omp_data_o13ii_byteena_a;
reg [8-1:0] main_entry_omp_data_o13ii_byteena_b;

//   %.omp_data_o.13.i.i = alloca %struct..omp_data_s.12, align 8
ram_dual_port main_entry_omp_data_o13ii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_entry_omp_data_o13ii_address_a ),
	.address_b( main_entry_omp_data_o13ii_address_b ),
	.wren_a( main_entry_omp_data_o13ii_write_enable_a ),
	.wren_b( main_entry_omp_data_o13ii_write_enable_b ),
	.data_a( main_entry_omp_data_o13ii_in_a ),
	.data_b( main_entry_omp_data_o13ii_in_b ),
	.byteena_a( main_entry_omp_data_o13ii_byteena_a ),
	.byteena_b( main_entry_omp_data_o13ii_byteena_b ),
	.q_a( main_entry_omp_data_o13ii_out_a ),
	.q_b( main_entry_omp_data_o13ii_out_b)
);
defparam main_entry_omp_data_o13ii.width_a = 64;
defparam main_entry_omp_data_o13ii.width_b = 64;
defparam main_entry_omp_data_o13ii.widthad_a = 1;
defparam main_entry_omp_data_o13ii.widthad_b = 1;
defparam main_entry_omp_data_o13ii.width_be_a = 8;
defparam main_entry_omp_data_o13ii.width_be_b = 8;
defparam main_entry_omp_data_o13ii.numwords_a = 1;
defparam main_entry_omp_data_o13ii.numwords_b = 1;
defparam main_entry_omp_data_o13ii.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_whitened_signals_a;
assign select_whitened_signals_a = (tag_a == `TAG_g_whitened_signals);
reg [ram_latency:0] select_whitened_signals_reg_a;
wire [31:0] memory_controller_whitened_signals_out_a;
assign memory_controller_whitened_signals_out_a = {32{ select_whitened_signals_reg_a[ram_latency]}} & whitened_signals_out_a;

wire select_sum_1_a;
assign select_sum_1_a = (tag_a == `TAG_g_sum_1);
reg [ram_latency:0] select_sum_1_reg_a;
wire [31:0] memory_controller_sum_1_out_a;
assign memory_controller_sum_1_out_a = {32{ select_sum_1_reg_a[ram_latency]}} & sum_1_out_a;

wire select_product_30_a;
assign select_product_30_a = (tag_a == `TAG_g_product_30);
reg [ram_latency:0] select_product_30_reg_a;
wire [31:0] memory_controller_product_30_out_a;
assign memory_controller_product_30_out_a = {32{ select_product_30_reg_a[ram_latency]}} & product_30_out_a;

wire select_product_31_a;
assign select_product_31_a = (tag_a == `TAG_g_product_31);
reg [ram_latency:0] select_product_31_reg_a;
wire [31:0] memory_controller_product_31_out_a;
assign memory_controller_product_31_out_a = {32{ select_product_31_reg_a[ram_latency]}} & product_31_out_a;

wire select_product_20_a;
assign select_product_20_a = (tag_a == `TAG_g_product_20);
reg [ram_latency:0] select_product_20_reg_a;
wire [31:0] memory_controller_product_20_out_a;
assign memory_controller_product_20_out_a = {32{ select_product_20_reg_a[ram_latency]}} & product_20_out_a;

wire select_product_21_a;
assign select_product_21_a = (tag_a == `TAG_g_product_21);
reg [ram_latency:0] select_product_21_reg_a;
wire [31:0] memory_controller_product_21_out_a;
assign memory_controller_product_21_out_a = {32{ select_product_21_reg_a[ram_latency]}} & product_21_out_a;

wire select_product_1_a;
assign select_product_1_a = (tag_a == `TAG_g_product_1);
reg [ram_latency:0] select_product_1_reg_a;
wire [31:0] memory_controller_product_1_out_a;
assign memory_controller_product_1_out_a = {32{ select_product_1_reg_a[ram_latency]}} & product_1_out_a;

wire select_w0_a;
assign select_w0_a = (tag_a == `TAG_g_w0);
reg [ram_latency:0] select_w0_reg_a;
wire [31:0] memory_controller_w0_out_a;
assign memory_controller_w0_out_a = {32{ select_w0_reg_a[ram_latency]}} & w0_out_a;

wire select_w1_a;
assign select_w1_a = (tag_a == `TAG_g_w1);
reg [ram_latency:0] select_w1_reg_a;
wire [31:0] memory_controller_w1_out_a;
assign memory_controller_w1_out_a = {32{ select_w1_reg_a[ram_latency]}} & w1_out_a;

wire select_w_next0_a;
assign select_w_next0_a = (tag_a == `TAG_g_w_next0);
reg [ram_latency:0] select_w_next0_reg_a;
wire [31:0] memory_controller_w_next0_out_a;
assign memory_controller_w_next0_out_a = {32{ select_w_next0_reg_a[ram_latency]}} & w_next0_out_a;

wire select_w_next1_a;
assign select_w_next1_a = (tag_a == `TAG_g_w_next1);
reg [ram_latency:0] select_w_next1_reg_a;
wire [31:0] memory_controller_w_next1_out_a;
assign memory_controller_w_next1_out_a = {32{ select_w_next1_reg_a[ram_latency]}} & w_next1_out_a;

wire select_main_entry_omp_data_o13ii_a;
assign select_main_entry_omp_data_o13ii_a = (tag_a == `TAG_main_entry_omp_data_o13ii);
reg [ram_latency:0] select_main_entry_omp_data_o13ii_reg_a;
reg [63:0] memory_controller_main_entry_omp_data_o13ii_out_a;
wire [63:0] memory_controller_main_entry_omp_data_o13ii_out_struct_a;
assign memory_controller_main_entry_omp_data_o13ii_out_struct_a = {64{ select_main_entry_omp_data_o13ii_reg_a[ram_latency]}} & main_entry_omp_data_o13ii_out_a;

always @(*)
begin
	whitened_signals_address_a = memory_controller_address_a [7-1+2:2] & {7{select_whitened_signals_a}};
	whitened_signals_write_enable_a = memory_controller_write_enable_a & select_whitened_signals_a;
	whitened_signals_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sum_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sum_1_a}};
	sum_1_write_enable_a = memory_controller_write_enable_a & select_sum_1_a;
	sum_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_30_address_a = memory_controller_address_a [1-1+2:2] & {1{select_product_30_a}};
	product_30_write_enable_a = memory_controller_write_enable_a & select_product_30_a;
	product_30_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_31_address_a = memory_controller_address_a [1-1+2:2] & {1{select_product_31_a}};
	product_31_write_enable_a = memory_controller_write_enable_a & select_product_31_a;
	product_31_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_20_address_a = memory_controller_address_a [1-1+2:2] & {1{select_product_20_a}};
	product_20_write_enable_a = memory_controller_write_enable_a & select_product_20_a;
	product_20_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_21_address_a = memory_controller_address_a [1-1+2:2] & {1{select_product_21_a}};
	product_21_write_enable_a = memory_controller_write_enable_a & select_product_21_a;
	product_21_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_1_address_a = memory_controller_address_a [6-1+2:2] & {6{select_product_1_a}};
	product_1_write_enable_a = memory_controller_write_enable_a & select_product_1_a;
	product_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	w0_address_a = memory_controller_address_a [1-1+2:2] & {1{select_w0_a}};
	w0_write_enable_a = memory_controller_write_enable_a & select_w0_a;
	w0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	w1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_w1_a}};
	w1_write_enable_a = memory_controller_write_enable_a & select_w1_a;
	w1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	w_next0_address_a = memory_controller_address_a [1-1+2:2] & {1{select_w_next0_a}};
	w_next0_write_enable_a = memory_controller_write_enable_a & select_w_next0_a;
	w_next0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	w_next1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_w_next1_a}};
	w_next1_write_enable_a = memory_controller_write_enable_a & select_w_next1_a;
	w_next1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_entry_omp_data_o13ii_address_a = memory_controller_address_a[4-1:3] & {1{select_main_entry_omp_data_o13ii_a}};
	main_entry_omp_data_o13ii_write_enable_a = memory_controller_write_enable_a & select_main_entry_omp_data_o13ii_a;
				main_entry_omp_data_o13ii_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				main_entry_omp_data_o13ii_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				main_entry_omp_data_o13ii_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					main_entry_omp_data_o13ii_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					main_entry_omp_data_o13ii_byteena_a = 8'b00001111;
				end
				else
				begin
					main_entry_omp_data_o13ii_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					main_entry_omp_data_o13ii_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						main_entry_omp_data_o13ii_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd3;
					end
					1:
					begin
						main_entry_omp_data_o13ii_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd12;
					end
					2:
					begin
						main_entry_omp_data_o13ii_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd48;
					end
					3:
					begin
						main_entry_omp_data_o13ii_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						main_entry_omp_data_o13ii_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd1;
					end
					1:
					begin
						main_entry_omp_data_o13ii_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd2;
					end
					2:
					begin
						main_entry_omp_data_o13ii_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd4;
					end
					3:
					begin
						main_entry_omp_data_o13ii_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd8;
					end
					4:
					begin
						main_entry_omp_data_o13ii_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd16;
					end
					5:
					begin
						main_entry_omp_data_o13ii_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd32;
					end
					6:
					begin
						main_entry_omp_data_o13ii_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd64;
					end
					7:
					begin
						main_entry_omp_data_o13ii_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						main_entry_omp_data_o13ii_byteena_a = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_whitened_signals_reg_a[ram_latency]}} | {2{select_sum_1_reg_a[ram_latency]}} | {2{select_product_30_reg_a[ram_latency]}} | {2{select_product_31_reg_a[ram_latency]}} | {2{select_product_20_reg_a[ram_latency]}} | {2{select_product_21_reg_a[ram_latency]}} | {2{select_product_1_reg_a[ram_latency]}} | {2{select_w0_reg_a[ram_latency]}} | {2{select_w1_reg_a[ram_latency]}} | {2{select_w_next0_reg_a[ram_latency]}} | {2{select_w_next1_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_main_entry_omp_data_o13ii_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_main_entry_omp_data_o13ii_out_a[64-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[64-1:0];
		1: memory_controller_main_entry_omp_data_o13ii_out_a[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[40-1:8];
		2: memory_controller_main_entry_omp_data_o13ii_out_a[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[48-1:16];
		3: memory_controller_main_entry_omp_data_o13ii_out_a[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[56-1:24];
		4: memory_controller_main_entry_omp_data_o13ii_out_a[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[64-1:32];
		5: memory_controller_main_entry_omp_data_o13ii_out_a[16-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[56-1:40];
		6: memory_controller_main_entry_omp_data_o13ii_out_a[16-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[64-1:48];
		7: memory_controller_main_entry_omp_data_o13ii_out_a[8-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_a[64-1:56];
	endcase

	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_whitened_signals_out_a | memory_controller_sum_1_out_a | memory_controller_product_30_out_a | memory_controller_product_31_out_a | memory_controller_product_20_out_a | memory_controller_product_21_out_a | memory_controller_product_1_out_a | memory_controller_w0_out_a | memory_controller_w1_out_a | memory_controller_w_next0_out_a | memory_controller_w_next1_out_a | memory_controller_main_entry_omp_data_o13ii_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_whitened_signals_reg_a[j+1] <= select_whitened_signals_reg_a[j];
select_sum_1_reg_a[j+1] <= select_sum_1_reg_a[j];
select_product_30_reg_a[j+1] <= select_product_30_reg_a[j];
select_product_31_reg_a[j+1] <= select_product_31_reg_a[j];
select_product_20_reg_a[j+1] <= select_product_20_reg_a[j];
select_product_21_reg_a[j+1] <= select_product_21_reg_a[j];
select_product_1_reg_a[j+1] <= select_product_1_reg_a[j];
select_w0_reg_a[j+1] <= select_w0_reg_a[j];
select_w1_reg_a[j+1] <= select_w1_reg_a[j];
select_w_next0_reg_a[j+1] <= select_w_next0_reg_a[j];
select_w_next1_reg_a[j+1] <= select_w_next1_reg_a[j];
select_main_entry_omp_data_o13ii_reg_a[j+1] <= select_main_entry_omp_data_o13ii_reg_a[j];
end
always @(*)
begin
select_whitened_signals_reg_a[0] <= select_whitened_signals_a;
select_sum_1_reg_a[0] <= select_sum_1_a;
select_product_30_reg_a[0] <= select_product_30_a;
select_product_31_reg_a[0] <= select_product_31_a;
select_product_20_reg_a[0] <= select_product_20_a;
select_product_21_reg_a[0] <= select_product_21_a;
select_product_1_reg_a[0] <= select_product_1_a;
select_w0_reg_a[0] <= select_w0_a;
select_w1_reg_a[0] <= select_w1_a;
select_w_next0_reg_a[0] <= select_w_next0_a;
select_w_next1_reg_a[0] <= select_w_next1_a;
select_main_entry_omp_data_o13ii_reg_a[0] <= select_main_entry_omp_data_o13ii_a;
end

reg [2:0] select_not_struct_b;

wire select_whitened_signals_b;
assign select_whitened_signals_b = (tag_b == `TAG_g_whitened_signals);
reg [ram_latency:0] select_whitened_signals_reg_b;
wire [31:0] memory_controller_whitened_signals_out_b;
assign memory_controller_whitened_signals_out_b = {32{ select_whitened_signals_reg_b[ram_latency]}} & whitened_signals_out_b;

wire select_sum_1_b;
assign select_sum_1_b = (tag_b == `TAG_g_sum_1);
reg [ram_latency:0] select_sum_1_reg_b;
wire [31:0] memory_controller_sum_1_out_b;
assign memory_controller_sum_1_out_b = {32{ select_sum_1_reg_b[ram_latency]}} & sum_1_out_b;

wire select_product_30_b;
assign select_product_30_b = (tag_b == `TAG_g_product_30);
reg [ram_latency:0] select_product_30_reg_b;
wire [31:0] memory_controller_product_30_out_b;
assign memory_controller_product_30_out_b = {32{ select_product_30_reg_b[ram_latency]}} & product_30_out_b;

wire select_product_31_b;
assign select_product_31_b = (tag_b == `TAG_g_product_31);
reg [ram_latency:0] select_product_31_reg_b;
wire [31:0] memory_controller_product_31_out_b;
assign memory_controller_product_31_out_b = {32{ select_product_31_reg_b[ram_latency]}} & product_31_out_b;

wire select_product_20_b;
assign select_product_20_b = (tag_b == `TAG_g_product_20);
reg [ram_latency:0] select_product_20_reg_b;
wire [31:0] memory_controller_product_20_out_b;
assign memory_controller_product_20_out_b = {32{ select_product_20_reg_b[ram_latency]}} & product_20_out_b;

wire select_product_21_b;
assign select_product_21_b = (tag_b == `TAG_g_product_21);
reg [ram_latency:0] select_product_21_reg_b;
wire [31:0] memory_controller_product_21_out_b;
assign memory_controller_product_21_out_b = {32{ select_product_21_reg_b[ram_latency]}} & product_21_out_b;

wire select_product_1_b;
assign select_product_1_b = (tag_b == `TAG_g_product_1);
reg [ram_latency:0] select_product_1_reg_b;
wire [31:0] memory_controller_product_1_out_b;
assign memory_controller_product_1_out_b = {32{ select_product_1_reg_b[ram_latency]}} & product_1_out_b;

wire select_w0_b;
assign select_w0_b = (tag_b == `TAG_g_w0);
reg [ram_latency:0] select_w0_reg_b;
wire [31:0] memory_controller_w0_out_b;
assign memory_controller_w0_out_b = {32{ select_w0_reg_b[ram_latency]}} & w0_out_b;

wire select_w1_b;
assign select_w1_b = (tag_b == `TAG_g_w1);
reg [ram_latency:0] select_w1_reg_b;
wire [31:0] memory_controller_w1_out_b;
assign memory_controller_w1_out_b = {32{ select_w1_reg_b[ram_latency]}} & w1_out_b;

wire select_w_next0_b;
assign select_w_next0_b = (tag_b == `TAG_g_w_next0);
reg [ram_latency:0] select_w_next0_reg_b;
wire [31:0] memory_controller_w_next0_out_b;
assign memory_controller_w_next0_out_b = {32{ select_w_next0_reg_b[ram_latency]}} & w_next0_out_b;

wire select_w_next1_b;
assign select_w_next1_b = (tag_b == `TAG_g_w_next1);
reg [ram_latency:0] select_w_next1_reg_b;
wire [31:0] memory_controller_w_next1_out_b;
assign memory_controller_w_next1_out_b = {32{ select_w_next1_reg_b[ram_latency]}} & w_next1_out_b;

wire select_main_entry_omp_data_o13ii_b;
assign select_main_entry_omp_data_o13ii_b = (tag_b == `TAG_main_entry_omp_data_o13ii);
reg [ram_latency:0] select_main_entry_omp_data_o13ii_reg_b;
reg [63:0] memory_controller_main_entry_omp_data_o13ii_out_b;
wire [63:0] memory_controller_main_entry_omp_data_o13ii_out_struct_b;
assign memory_controller_main_entry_omp_data_o13ii_out_struct_b = {64{ select_main_entry_omp_data_o13ii_reg_b[ram_latency]}} & main_entry_omp_data_o13ii_out_b;

always @(*)
begin
	whitened_signals_address_b = memory_controller_address_b [7-1+2:2] & {7{select_whitened_signals_b}};
	whitened_signals_write_enable_b = memory_controller_write_enable_b & select_whitened_signals_b;
	whitened_signals_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sum_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sum_1_b}};
	sum_1_write_enable_b = memory_controller_write_enable_b & select_sum_1_b;
	sum_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_30_address_b = memory_controller_address_b [1-1+2:2] & {1{select_product_30_b}};
	product_30_write_enable_b = memory_controller_write_enable_b & select_product_30_b;
	product_30_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_31_address_b = memory_controller_address_b [1-1+2:2] & {1{select_product_31_b}};
	product_31_write_enable_b = memory_controller_write_enable_b & select_product_31_b;
	product_31_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_20_address_b = memory_controller_address_b [1-1+2:2] & {1{select_product_20_b}};
	product_20_write_enable_b = memory_controller_write_enable_b & select_product_20_b;
	product_20_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_21_address_b = memory_controller_address_b [1-1+2:2] & {1{select_product_21_b}};
	product_21_write_enable_b = memory_controller_write_enable_b & select_product_21_b;
	product_21_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_1_address_b = memory_controller_address_b [6-1+2:2] & {6{select_product_1_b}};
	product_1_write_enable_b = memory_controller_write_enable_b & select_product_1_b;
	product_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	w0_address_b = memory_controller_address_b [1-1+2:2] & {1{select_w0_b}};
	w0_write_enable_b = memory_controller_write_enable_b & select_w0_b;
	w0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	w1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_w1_b}};
	w1_write_enable_b = memory_controller_write_enable_b & select_w1_b;
	w1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	w_next0_address_b = memory_controller_address_b [1-1+2:2] & {1{select_w_next0_b}};
	w_next0_write_enable_b = memory_controller_write_enable_b & select_w_next0_b;
	w_next0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	w_next1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_w_next1_b}};
	w_next1_write_enable_b = memory_controller_write_enable_b & select_w_next1_b;
	w_next1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_entry_omp_data_o13ii_address_b = memory_controller_address_b[4-1:3] & {1{select_main_entry_omp_data_o13ii_b}};
	main_entry_omp_data_o13ii_write_enable_b = memory_controller_write_enable_b & select_main_entry_omp_data_o13ii_b;
				main_entry_omp_data_o13ii_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				main_entry_omp_data_o13ii_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				main_entry_omp_data_o13ii_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					main_entry_omp_data_o13ii_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					main_entry_omp_data_o13ii_byteena_b = 8'b00001111;
				end
				else
				begin
					main_entry_omp_data_o13ii_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					main_entry_omp_data_o13ii_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						main_entry_omp_data_o13ii_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd3;
					end
					1:
					begin
						main_entry_omp_data_o13ii_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd12;
					end
					2:
					begin
						main_entry_omp_data_o13ii_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd48;
					end
					3:
					begin
						main_entry_omp_data_o13ii_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						main_entry_omp_data_o13ii_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd1;
					end
					1:
					begin
						main_entry_omp_data_o13ii_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd2;
					end
					2:
					begin
						main_entry_omp_data_o13ii_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd4;
					end
					3:
					begin
						main_entry_omp_data_o13ii_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd8;
					end
					4:
					begin
						main_entry_omp_data_o13ii_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd16;
					end
					5:
					begin
						main_entry_omp_data_o13ii_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd32;
					end
					6:
					begin
						main_entry_omp_data_o13ii_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd64;
					end
					7:
					begin
						main_entry_omp_data_o13ii_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						main_entry_omp_data_o13ii_byteena_b = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_whitened_signals_reg_b[ram_latency]}} | {2{select_sum_1_reg_b[ram_latency]}} | {2{select_product_30_reg_b[ram_latency]}} | {2{select_product_31_reg_b[ram_latency]}} | {2{select_product_20_reg_b[ram_latency]}} | {2{select_product_21_reg_b[ram_latency]}} | {2{select_product_1_reg_b[ram_latency]}} | {2{select_w0_reg_b[ram_latency]}} | {2{select_w1_reg_b[ram_latency]}} | {2{select_w_next0_reg_b[ram_latency]}} | {2{select_w_next1_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_main_entry_omp_data_o13ii_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_main_entry_omp_data_o13ii_out_b[64-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[64-1:0];
		1: memory_controller_main_entry_omp_data_o13ii_out_b[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[40-1:8];
		2: memory_controller_main_entry_omp_data_o13ii_out_b[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[48-1:16];
		3: memory_controller_main_entry_omp_data_o13ii_out_b[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[56-1:24];
		4: memory_controller_main_entry_omp_data_o13ii_out_b[32-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[64-1:32];
		5: memory_controller_main_entry_omp_data_o13ii_out_b[16-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[56-1:40];
		6: memory_controller_main_entry_omp_data_o13ii_out_b[16-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[64-1:48];
		7: memory_controller_main_entry_omp_data_o13ii_out_b[8-1:0] = memory_controller_main_entry_omp_data_o13ii_out_struct_b[64-1:56];
	endcase

	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_whitened_signals_out_b | memory_controller_sum_1_out_b | memory_controller_product_30_out_b | memory_controller_product_31_out_b | memory_controller_product_20_out_b | memory_controller_product_21_out_b | memory_controller_product_1_out_b | memory_controller_w0_out_b | memory_controller_w1_out_b | memory_controller_w_next0_out_b | memory_controller_w_next1_out_b | memory_controller_main_entry_omp_data_o13ii_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_whitened_signals_reg_b[j+1] <= select_whitened_signals_reg_b[j];
select_sum_1_reg_b[j+1] <= select_sum_1_reg_b[j];
select_product_30_reg_b[j+1] <= select_product_30_reg_b[j];
select_product_31_reg_b[j+1] <= select_product_31_reg_b[j];
select_product_20_reg_b[j+1] <= select_product_20_reg_b[j];
select_product_21_reg_b[j+1] <= select_product_21_reg_b[j];
select_product_1_reg_b[j+1] <= select_product_1_reg_b[j];
select_w0_reg_b[j+1] <= select_w0_reg_b[j];
select_w1_reg_b[j+1] <= select_w1_reg_b[j];
select_w_next0_reg_b[j+1] <= select_w_next0_reg_b[j];
select_w_next1_reg_b[j+1] <= select_w_next1_reg_b[j];
select_main_entry_omp_data_o13ii_reg_b[j+1] <= select_main_entry_omp_data_o13ii_reg_b[j];
end
always @(*)
begin
select_whitened_signals_reg_b[0] <= select_whitened_signals_b;
select_sum_1_reg_b[0] <= select_sum_1_b;
select_product_30_reg_b[0] <= select_product_30_b;
select_product_31_reg_b[0] <= select_product_31_b;
select_product_20_reg_b[0] <= select_product_20_b;
select_product_21_reg_b[0] <= select_product_21_b;
select_product_1_reg_b[0] <= select_product_1_b;
select_w0_reg_b[0] <= select_w0_b;
select_w1_reg_b[0] <= select_w1_b;
select_w_next0_reg_b[0] <= select_w_next0_b;
select_w_next1_reg_b[0] <= select_w_next1_b;
select_main_entry_omp_data_o13ii_reg_b[0] <= select_main_entry_omp_data_o13ii_b;
end

endmodule 

`timescale 1 ns / 1 ns
module rotate_omp_fn0
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_1 = 5'd1;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_2 = 5'd2;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_3 = 5'd3;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_4 = 5'd4;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_5 = 5'd5;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_6 = 5'd6;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_7 = 5'd7;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_8 = 5'd8;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_9 = 5'd9;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_10 = 5'd10;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_11 = 5'd11;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_12 = 5'd12;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_13 = 5'd13;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_14 = 5'd14;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_15 = 5'd15;
parameter [4:0] LEGUP_F_rotate_omp_fn0_BB_entry_16 = 5'd16;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] rotate_omp_fn0_entry_0;
reg [31:0] rotate_omp_fn0_entry_0_reg;
reg [31:0] rotate_omp_fn0_entry_1;
reg [31:0] rotate_omp_fn0_entry_2;
reg [31:0] rotate_omp_fn0_entry_3;
reg [31:0] rotate_omp_fn0_entry_4;
reg [31:0] rotate_omp_fn0_altfp_multiply_32_0_op0;
reg [31:0] rotate_omp_fn0_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_rotate_omp_fn0_entry_2_out;
reg  altfp_rotate_omp_fn0_entry_2_en;
reg [31:0] rotate_omp_fn0_altfp_multiply_32_0;
reg  first_state_after_memory_read;
reg  second_state_after_memory_read;
reg  memory_controller_waitrequest_inverted_reg;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_b;

/*   %2 = fmul float %0, %1*/
altfp_multiplier_11 altfp_multiplier_11_rotate_omp_fn0_entry_2 (
	.result (altfp_multiplier_rotate_omp_fn0_entry_2_out),
	.dataa (rotate_omp_fn0_altfp_multiply_32_0_op0),
	.datab (rotate_omp_fn0_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_rotate_omp_fn0_entry_2_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_1;
LEGUP_F_rotate_omp_fn0_BB_entry_1:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_2;
LEGUP_F_rotate_omp_fn0_BB_entry_10:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_11;
LEGUP_F_rotate_omp_fn0_BB_entry_11:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_12;
LEGUP_F_rotate_omp_fn0_BB_entry_12:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_13;
LEGUP_F_rotate_omp_fn0_BB_entry_13:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_14;
LEGUP_F_rotate_omp_fn0_BB_entry_14:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_15;
LEGUP_F_rotate_omp_fn0_BB_entry_15:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_16;
LEGUP_F_rotate_omp_fn0_BB_entry_16:
		next_state = LEGUP_0;
LEGUP_F_rotate_omp_fn0_BB_entry_2:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_3;
LEGUP_F_rotate_omp_fn0_BB_entry_3:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_4;
LEGUP_F_rotate_omp_fn0_BB_entry_4:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_5;
LEGUP_F_rotate_omp_fn0_BB_entry_5:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_6;
LEGUP_F_rotate_omp_fn0_BB_entry_6:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_7;
LEGUP_F_rotate_omp_fn0_BB_entry_7:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_8;
LEGUP_F_rotate_omp_fn0_BB_entry_8:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_9;
LEGUP_F_rotate_omp_fn0_BB_entry_9:
		next_state = LEGUP_F_rotate_omp_fn0_BB_entry_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
		rotate_omp_fn0_entry_0 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(posedge clk) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_3)) begin
		rotate_omp_fn0_entry_0_reg <= rotate_omp_fn0_entry_0;
		if (start == 1'b0 && ^(rotate_omp_fn0_entry_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_entry_0_reg"); $finish; end
	end
end
always @(*) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %1 = load float* @w.0, align 4, !tbaa !1*/
		rotate_omp_fn0_entry_1 = memory_controller_out_stored_on_datavalid_b[31:0];
end
always @(*) begin
	rotate_omp_fn0_entry_2 = rotate_omp_fn0_altfp_multiply_32_0;
end
always @(*) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %3 = load float* @w.1, align 4, !tbaa !1*/
		rotate_omp_fn0_entry_3 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	rotate_omp_fn0_entry_4 = rotate_omp_fn0_altfp_multiply_32_0;
end
always @(*) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_3)) begin
		rotate_omp_fn0_altfp_multiply_32_0_op0 = rotate_omp_fn0_entry_0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %4 = fmul float %0, %3*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_4)) */ begin
		rotate_omp_fn0_altfp_multiply_32_0_op0 = rotate_omp_fn0_entry_0_reg;
	end
end
always @(*) begin
	/* rotate._omp_fn.0: %entry*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_3)) begin
		rotate_omp_fn0_altfp_multiply_32_0_op1 = rotate_omp_fn0_entry_1;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %4 = fmul float %0, %3*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_4)) */ begin
		rotate_omp_fn0_altfp_multiply_32_0_op1 = rotate_omp_fn0_entry_3;
	end
end
always @(*) begin
	altfp_rotate_omp_fn0_entry_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	rotate_omp_fn0_altfp_multiply_32_0 = altfp_multiplier_rotate_omp_fn0_entry_2_out;
end
always @(posedge clk) begin
	if (reset) begin
		first_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		first_state_after_memory_read <= ((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)));
		if (start == 1'b0 && ^(((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		second_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		second_state_after_memory_read <= first_state_after_memory_read;
		if (start == 1'b0 && ^(first_state_after_memory_read) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	memory_controller_waitrequest_inverted_reg <= ~(memory_controller_waitrequest);
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_a = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_stored_on_datavalid_reg_a;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_a <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_a <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_b = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_stored_on_datavalid_reg_b;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_b <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_b <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* rotate._omp_fn.0: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_16)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %3 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %4, float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_15)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_sum_1_a;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %3 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_2)) begin
		memory_controller_address_a = `TAG_g_w1_a;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %4, float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_15)) begin
		memory_controller_address_a = `TAG_g_product_31_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %3 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %4, float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %4, float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_15)) begin
		memory_controller_in_a = rotate_omp_fn0_entry_4;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %0 = load float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %3 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %4, float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_15)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %1 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %2, float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_14)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %1 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_address_b = `TAG_g_w0_a;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %2, float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_14)) begin
		memory_controller_address_b = `TAG_g_product_30_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %1 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %2, float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %2, float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_14)) begin
		memory_controller_in_b = rotate_omp_fn0_entry_2;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   %1 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* rotate._omp_fn.0: %entry*/
	/*   store float %2, float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn0_BB_entry_14)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_omp_rotate_omp_fn0
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1 = 2'd1;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_3 = 2'd3;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [1:0] cur_state;
reg [1:0] next_state;
reg  rotate_omp_fn0_start_inst0;
reg  rotate_omp_fn0_start_inst1;
wire  rotate_omp_fn0_memory_controller_enable_a_inst0;
wire  rotate_omp_fn0_memory_controller_write_enable_a_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn0_memory_controller_address_a_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_in_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_a_inst0;
wire  rotate_omp_fn0_memory_controller_gnt_0;
reg  rotate_omp_fn0_memory_controller_dataReady0_a_inst0;
reg  rotate_omp_fn0_memory_controller_dataReady1_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_reg_a_inst0;
wire [1:0] rotate_omp_fn0_memory_controller_size_a_inst0;
wire  rotate_omp_fn0_memory_controller_enable_a_inst1;
wire  rotate_omp_fn0_memory_controller_write_enable_a_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn0_memory_controller_address_a_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_in_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_a_inst1;
wire  rotate_omp_fn0_memory_controller_gnt_1;
reg  rotate_omp_fn0_memory_controller_dataReady0_a_inst1;
reg  rotate_omp_fn0_memory_controller_dataReady1_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_reg_a_inst1;
wire [1:0] rotate_omp_fn0_memory_controller_size_a_inst1;
wire  rotate_omp_fn0_memory_controller_enable_b_inst0;
wire  rotate_omp_fn0_memory_controller_write_enable_b_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn0_memory_controller_address_b_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_in_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_b_inst0;
reg  rotate_omp_fn0_memory_controller_dataReady0_b_inst0;
reg  rotate_omp_fn0_memory_controller_dataReady1_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_reg_b_inst0;
wire [1:0] rotate_omp_fn0_memory_controller_size_b_inst0;
wire  rotate_omp_fn0_memory_controller_enable_b_inst1;
wire  rotate_omp_fn0_memory_controller_write_enable_b_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn0_memory_controller_address_b_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_in_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_b_inst1;
reg  rotate_omp_fn0_memory_controller_dataReady0_b_inst1;
reg  rotate_omp_fn0_memory_controller_dataReady1_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn0_memory_controller_out_reg_b_inst1;
wire [1:0] rotate_omp_fn0_memory_controller_size_b_inst1;
reg  rotate_omp_fn0_memory_controller_waitrequest_inst0;
reg  rotate_omp_fn0_memory_controller_waitrequest_inst1;
reg  rotate_omp_fn0_finish_final;
reg  rotate_omp_fn0_finish_inst0_reg;
wire  rotate_omp_fn0_finish_inst0;
reg  rotate_omp_fn0_finish_inst1_reg;
wire  rotate_omp_fn0_finish_inst1;


rotate_omp_fn0 rotate_omp_fn0_inst0 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn0_start_inst0),
	.finish (rotate_omp_fn0_finish_inst0),
	.memory_controller_enable_a (rotate_omp_fn0_memory_controller_enable_a_inst0),
	.memory_controller_address_a (rotate_omp_fn0_memory_controller_address_a_inst0),
	.memory_controller_write_enable_a (rotate_omp_fn0_memory_controller_write_enable_a_inst0),
	.memory_controller_in_a (rotate_omp_fn0_memory_controller_in_a_inst0),
	.memory_controller_size_a (rotate_omp_fn0_memory_controller_size_a_inst0),
	.memory_controller_out_a (rotate_omp_fn0_memory_controller_out_a_inst0),
	.memory_controller_enable_b (rotate_omp_fn0_memory_controller_enable_b_inst0),
	.memory_controller_address_b (rotate_omp_fn0_memory_controller_address_b_inst0),
	.memory_controller_write_enable_b (rotate_omp_fn0_memory_controller_write_enable_b_inst0),
	.memory_controller_in_b (rotate_omp_fn0_memory_controller_in_b_inst0),
	.memory_controller_size_b (rotate_omp_fn0_memory_controller_size_b_inst0),
	.memory_controller_out_b (rotate_omp_fn0_memory_controller_out_b_inst0),
	.memory_controller_waitrequest (rotate_omp_fn0_memory_controller_waitrequest_inst0)
);

defparam
	rotate_omp_fn0_inst0.tag_offset = tag_offset*2+0;


rotate_omp_fn0 rotate_omp_fn0_inst1 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn0_start_inst1),
	.finish (rotate_omp_fn0_finish_inst1),
	.memory_controller_enable_a (rotate_omp_fn0_memory_controller_enable_a_inst1),
	.memory_controller_address_a (rotate_omp_fn0_memory_controller_address_a_inst1),
	.memory_controller_write_enable_a (rotate_omp_fn0_memory_controller_write_enable_a_inst1),
	.memory_controller_in_a (rotate_omp_fn0_memory_controller_in_a_inst1),
	.memory_controller_size_a (rotate_omp_fn0_memory_controller_size_a_inst1),
	.memory_controller_out_a (rotate_omp_fn0_memory_controller_out_a_inst1),
	.memory_controller_enable_b (rotate_omp_fn0_memory_controller_enable_b_inst1),
	.memory_controller_address_b (rotate_omp_fn0_memory_controller_address_b_inst1),
	.memory_controller_write_enable_b (rotate_omp_fn0_memory_controller_write_enable_b_inst1),
	.memory_controller_in_b (rotate_omp_fn0_memory_controller_in_b_inst1),
	.memory_controller_size_b (rotate_omp_fn0_memory_controller_size_b_inst1),
	.memory_controller_out_b (rotate_omp_fn0_memory_controller_out_b_inst1),
	.memory_controller_waitrequest (rotate_omp_fn0_memory_controller_waitrequest_inst1)
);

defparam
	rotate_omp_fn0_inst1.tag_offset = tag_offset*2+1;


round_robin_arbiter round_robin_arbiter_rotate_omp_fn0_inst (
	.clk (clk),
	.rst_an (~(reset)),
	.waitrequest (memory_controller_waitrequest),
	.req_in ({(rotate_omp_fn0_memory_controller_enable_a_inst0 | rotate_omp_fn0_memory_controller_enable_b_inst0),(rotate_omp_fn0_memory_controller_enable_a_inst1 | rotate_omp_fn0_memory_controller_enable_b_inst1)}),
	.grant_final ({rotate_omp_fn0_memory_controller_gnt_0,rotate_omp_fn0_memory_controller_gnt_1})
);

defparam
	round_robin_arbiter_rotate_omp_fn0_inst.N = 2;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1;
LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_3:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((rotate_omp_fn0_finish_final == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_3;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1)) begin
		rotate_omp_fn0_start_inst0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_start_inst0"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn0_start_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_start_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1)) begin
		rotate_omp_fn0_start_inst1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_start_inst1"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn0_start_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_start_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_out_a_inst0 = rotate_omp_fn0_memory_controller_out_reg_a_inst0;
	if (rotate_omp_fn0_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn0_memory_controller_out_a_inst0 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_dataReady0_a_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_a_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn0_memory_controller_dataReady0_a_inst0 <= (rotate_omp_fn0_memory_controller_gnt_0 & (rotate_omp_fn0_memory_controller_enable_a_inst0 & ~(rotate_omp_fn0_memory_controller_write_enable_a_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn0_memory_controller_gnt_0 & (rotate_omp_fn0_memory_controller_enable_a_inst0 & ~(rotate_omp_fn0_memory_controller_write_enable_a_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_a_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn0_memory_controller_dataReady1_a_inst0 <= rotate_omp_fn0_memory_controller_dataReady0_a_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_out_reg_a_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_a_inst0"); $finish; end
	end
	if (rotate_omp_fn0_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn0_memory_controller_out_reg_a_inst0 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_a_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_out_a_inst1 = rotate_omp_fn0_memory_controller_out_reg_a_inst1;
	if (rotate_omp_fn0_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn0_memory_controller_out_a_inst1 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_dataReady0_a_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_a_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn0_memory_controller_dataReady0_a_inst1 <= (rotate_omp_fn0_memory_controller_gnt_1 & (rotate_omp_fn0_memory_controller_enable_a_inst1 & ~(rotate_omp_fn0_memory_controller_write_enable_a_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn0_memory_controller_gnt_1 & (rotate_omp_fn0_memory_controller_enable_a_inst1 & ~(rotate_omp_fn0_memory_controller_write_enable_a_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_a_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn0_memory_controller_dataReady1_a_inst1 <= rotate_omp_fn0_memory_controller_dataReady0_a_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_out_reg_a_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_a_inst1"); $finish; end
	end
	if (rotate_omp_fn0_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn0_memory_controller_out_reg_a_inst1 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_a_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_out_b_inst0 = rotate_omp_fn0_memory_controller_out_reg_b_inst0;
	if (rotate_omp_fn0_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn0_memory_controller_out_b_inst0 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_dataReady0_b_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_b_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn0_memory_controller_dataReady0_b_inst0 <= (rotate_omp_fn0_memory_controller_gnt_0 & (rotate_omp_fn0_memory_controller_enable_b_inst0 & ~(rotate_omp_fn0_memory_controller_write_enable_b_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn0_memory_controller_gnt_0 & (rotate_omp_fn0_memory_controller_enable_b_inst0 & ~(rotate_omp_fn0_memory_controller_write_enable_b_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_b_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn0_memory_controller_dataReady1_b_inst0 <= rotate_omp_fn0_memory_controller_dataReady0_b_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_out_reg_b_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_b_inst0"); $finish; end
	end
	if (rotate_omp_fn0_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn0_memory_controller_out_reg_b_inst0 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_b_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_out_b_inst1 = rotate_omp_fn0_memory_controller_out_reg_b_inst1;
	if (rotate_omp_fn0_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn0_memory_controller_out_b_inst1 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_dataReady0_b_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_b_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn0_memory_controller_dataReady0_b_inst1 <= (rotate_omp_fn0_memory_controller_gnt_1 & (rotate_omp_fn0_memory_controller_enable_b_inst1 & ~(rotate_omp_fn0_memory_controller_write_enable_b_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn0_memory_controller_gnt_1 & (rotate_omp_fn0_memory_controller_enable_b_inst1 & ~(rotate_omp_fn0_memory_controller_write_enable_b_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_dataReady0_b_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn0_memory_controller_dataReady1_b_inst1 <= rotate_omp_fn0_memory_controller_dataReady0_b_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn0_memory_controller_out_reg_b_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_b_inst1"); $finish; end
	end
	if (rotate_omp_fn0_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn0_memory_controller_out_reg_b_inst1 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_memory_controller_out_reg_b_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_waitrequest_inst0 = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn0_memory_controller_waitrequest_inst0 = (((rotate_omp_fn0_memory_controller_enable_a_inst0 | rotate_omp_fn0_memory_controller_enable_b_inst0) & ~(rotate_omp_fn0_memory_controller_gnt_0)) | (rotate_omp_fn0_memory_controller_gnt_0 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn0_memory_controller_waitrequest_inst1 = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn0_memory_controller_waitrequest_inst1 = (((rotate_omp_fn0_memory_controller_enable_a_inst1 | rotate_omp_fn0_memory_controller_enable_b_inst1) & ~(rotate_omp_fn0_memory_controller_gnt_1)) | (rotate_omp_fn0_memory_controller_gnt_1 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn0_finish_final = (rotate_omp_fn0_finish_inst0_reg & rotate_omp_fn0_finish_inst1_reg);
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1))) begin
		rotate_omp_fn0_finish_inst0_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_finish_inst0_reg"); $finish; end
	end
	if (rotate_omp_fn0_finish_inst0) begin
		rotate_omp_fn0_finish_inst0_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_finish_inst0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_1))) begin
		rotate_omp_fn0_finish_inst1_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_finish_inst1_reg"); $finish; end
	end
	if (rotate_omp_fn0_finish_inst1) begin
		rotate_omp_fn0_finish_inst1_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn0_finish_inst1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn0_BB_entry_3)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn0_memory_controller_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn0_memory_controller_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn0_memory_controller_address_a_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn0_memory_controller_address_a_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn0_memory_controller_write_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn0_memory_controller_write_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn0_memory_controller_in_a_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn0_memory_controller_in_a_inst1;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn0_memory_controller_size_a_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn0_memory_controller_size_a_inst1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn0_memory_controller_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn0_memory_controller_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn0_memory_controller_address_b_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn0_memory_controller_address_b_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn0_memory_controller_write_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn0_memory_controller_write_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn0_memory_controller_in_b_inst0;
	end
	/* legup_omp_rotate_omp_fn0: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.0(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn0_memory_controller_in_b_inst1;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn0_memory_controller_size_b_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn0_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn0_memory_controller_size_b_inst1;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module rotate_omp_fn1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_1 = 5'd1;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_2 = 5'd2;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_3 = 5'd3;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_4 = 5'd4;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_5 = 5'd5;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_6 = 5'd6;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_7 = 5'd7;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_8 = 5'd8;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_9 = 5'd9;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_10 = 5'd10;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_11 = 5'd11;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_12 = 5'd12;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_13 = 5'd13;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_14 = 5'd14;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_15 = 5'd15;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_16 = 5'd16;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_17 = 5'd17;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_18 = 5'd18;
parameter [4:0] LEGUP_F_rotate_omp_fn1_BB_entry_19 = 5'd19;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] rotate_omp_fn1_entry_0;
reg [31:0] rotate_omp_fn1_entry_1;
reg [31:0] rotate_omp_fn1_entry_2;
reg [31:0] rotate_omp_fn1_entry_3;
reg [31:0] rotate_omp_fn1_entry_4;
reg [31:0] rotate_omp_fn1_entry_5;
reg [31:0] rotate_omp_fn1_altfp_subtract_32_0_op0;
reg [31:0] rotate_omp_fn1_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_rotate_omp_fn1_entry_2_out;
reg  altfp_rotate_omp_fn1_entry_2_en;
reg [31:0] rotate_omp_fn1_altfp_subtract_32_0;
reg  first_state_after_memory_read;
reg  second_state_after_memory_read;
reg  memory_controller_waitrequest_inverted_reg;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_b;

/*   %2 = fsub float %0, %1*/
altfp_subtractor_14 altfp_subtractor_14_rotate_omp_fn1_entry_2 (
	.result (altfp_subtractor_rotate_omp_fn1_entry_2_out),
	.dataa (rotate_omp_fn1_altfp_subtract_32_0_op0),
	.datab (rotate_omp_fn1_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_rotate_omp_fn1_entry_2_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_1;
LEGUP_F_rotate_omp_fn1_BB_entry_1:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_2;
LEGUP_F_rotate_omp_fn1_BB_entry_10:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_11;
LEGUP_F_rotate_omp_fn1_BB_entry_11:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_12;
LEGUP_F_rotate_omp_fn1_BB_entry_12:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_13;
LEGUP_F_rotate_omp_fn1_BB_entry_13:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_14;
LEGUP_F_rotate_omp_fn1_BB_entry_14:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_15;
LEGUP_F_rotate_omp_fn1_BB_entry_15:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_16;
LEGUP_F_rotate_omp_fn1_BB_entry_16:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_17;
LEGUP_F_rotate_omp_fn1_BB_entry_17:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_18;
LEGUP_F_rotate_omp_fn1_BB_entry_18:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_19;
LEGUP_F_rotate_omp_fn1_BB_entry_19:
		next_state = LEGUP_0;
LEGUP_F_rotate_omp_fn1_BB_entry_2:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_3;
LEGUP_F_rotate_omp_fn1_BB_entry_3:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_4;
LEGUP_F_rotate_omp_fn1_BB_entry_4:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_5;
LEGUP_F_rotate_omp_fn1_BB_entry_5:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_6;
LEGUP_F_rotate_omp_fn1_BB_entry_6:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_7;
LEGUP_F_rotate_omp_fn1_BB_entry_7:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_8;
LEGUP_F_rotate_omp_fn1_BB_entry_8:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_9;
LEGUP_F_rotate_omp_fn1_BB_entry_9:
		next_state = LEGUP_F_rotate_omp_fn1_BB_entry_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %0 = load float* @product_2.0, align 4, !tbaa !1*/
		rotate_omp_fn1_entry_0 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %1 = load float* @product_3.0, align 4, !tbaa !1*/
		rotate_omp_fn1_entry_1 = memory_controller_out_stored_on_datavalid_b[31:0];
end
always @(*) begin
	rotate_omp_fn1_entry_2 = rotate_omp_fn1_altfp_subtract_32_0;
end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %3 = load float* @product_2.1, align 4, !tbaa !1*/
		rotate_omp_fn1_entry_3 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %4 = load float* @product_3.1, align 4, !tbaa !1*/
		rotate_omp_fn1_entry_4 = memory_controller_out_stored_on_datavalid_b[31:0];
end
always @(*) begin
	rotate_omp_fn1_entry_5 = rotate_omp_fn1_altfp_subtract_32_0;
end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %2 = fsub float %0, %1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_3)) begin
		rotate_omp_fn1_altfp_subtract_32_0_op0 = rotate_omp_fn1_entry_0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %5 = fsub float %3, %4*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_4)) */ begin
		rotate_omp_fn1_altfp_subtract_32_0_op0 = rotate_omp_fn1_entry_3;
	end
end
always @(*) begin
	/* rotate._omp_fn.1: %entry*/
	/*   %2 = fsub float %0, %1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_3)) begin
		rotate_omp_fn1_altfp_subtract_32_0_op1 = rotate_omp_fn1_entry_1;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %5 = fsub float %3, %4*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_4)) */ begin
		rotate_omp_fn1_altfp_subtract_32_0_op1 = rotate_omp_fn1_entry_4;
	end
end
always @(*) begin
	altfp_rotate_omp_fn1_entry_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	rotate_omp_fn1_altfp_subtract_32_0 = altfp_subtractor_rotate_omp_fn1_entry_2_out;
end
always @(posedge clk) begin
	if (reset) begin
		first_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		first_state_after_memory_read <= ((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)));
		if (start == 1'b0 && ^(((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		second_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		second_state_after_memory_read <= first_state_after_memory_read;
		if (start == 1'b0 && ^(first_state_after_memory_read) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	memory_controller_waitrequest_inverted_reg <= ~(memory_controller_waitrequest);
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_a = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_stored_on_datavalid_reg_a;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_a <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_a <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_b = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_stored_on_datavalid_reg_b;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_b <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_b <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* rotate._omp_fn.1: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_19)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %0 = load float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %3 = load float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %2, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_17)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %0 = load float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_product_20_a;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %3 = load float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_address_a = `TAG_g_product_21_a;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %2, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_17)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %0 = load float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %3 = load float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %2, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %2, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_17)) begin
		memory_controller_in_a = rotate_omp_fn1_entry_2;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %0 = load float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %3 = load float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %2, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_17)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %1 = load float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %4 = load float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_18)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %1 = load float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_address_b = `TAG_g_product_30_a;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %4 = load float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_address_b = `TAG_g_product_31_a;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_18)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %1 = load float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %4 = load float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_18)) begin
		memory_controller_in_b = rotate_omp_fn1_entry_5;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %1 = load float* @product_3.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   %4 = load float* @product_3.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* rotate._omp_fn.1: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn1_BB_entry_18)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_omp_rotate_omp_fn1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1 = 2'd1;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_3 = 2'd3;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [1:0] cur_state;
reg [1:0] next_state;
reg  rotate_omp_fn1_start_inst0;
reg  rotate_omp_fn1_start_inst1;
wire  rotate_omp_fn1_memory_controller_enable_a_inst0;
wire  rotate_omp_fn1_memory_controller_write_enable_a_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn1_memory_controller_address_a_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_in_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_a_inst0;
wire  rotate_omp_fn1_memory_controller_gnt_0;
reg  rotate_omp_fn1_memory_controller_dataReady0_a_inst0;
reg  rotate_omp_fn1_memory_controller_dataReady1_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_reg_a_inst0;
wire [1:0] rotate_omp_fn1_memory_controller_size_a_inst0;
wire  rotate_omp_fn1_memory_controller_enable_a_inst1;
wire  rotate_omp_fn1_memory_controller_write_enable_a_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn1_memory_controller_address_a_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_in_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_a_inst1;
wire  rotate_omp_fn1_memory_controller_gnt_1;
reg  rotate_omp_fn1_memory_controller_dataReady0_a_inst1;
reg  rotate_omp_fn1_memory_controller_dataReady1_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_reg_a_inst1;
wire [1:0] rotate_omp_fn1_memory_controller_size_a_inst1;
wire  rotate_omp_fn1_memory_controller_enable_b_inst0;
wire  rotate_omp_fn1_memory_controller_write_enable_b_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn1_memory_controller_address_b_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_in_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_b_inst0;
reg  rotate_omp_fn1_memory_controller_dataReady0_b_inst0;
reg  rotate_omp_fn1_memory_controller_dataReady1_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_reg_b_inst0;
wire [1:0] rotate_omp_fn1_memory_controller_size_b_inst0;
wire  rotate_omp_fn1_memory_controller_enable_b_inst1;
wire  rotate_omp_fn1_memory_controller_write_enable_b_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn1_memory_controller_address_b_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_in_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_b_inst1;
reg  rotate_omp_fn1_memory_controller_dataReady0_b_inst1;
reg  rotate_omp_fn1_memory_controller_dataReady1_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn1_memory_controller_out_reg_b_inst1;
wire [1:0] rotate_omp_fn1_memory_controller_size_b_inst1;
reg  rotate_omp_fn1_memory_controller_waitrequest_inst0;
reg  rotate_omp_fn1_memory_controller_waitrequest_inst1;
reg  rotate_omp_fn1_finish_final;
reg  rotate_omp_fn1_finish_inst0_reg;
wire  rotate_omp_fn1_finish_inst0;
reg  rotate_omp_fn1_finish_inst1_reg;
wire  rotate_omp_fn1_finish_inst1;


rotate_omp_fn1 rotate_omp_fn1_inst0 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn1_start_inst0),
	.finish (rotate_omp_fn1_finish_inst0),
	.memory_controller_enable_a (rotate_omp_fn1_memory_controller_enable_a_inst0),
	.memory_controller_address_a (rotate_omp_fn1_memory_controller_address_a_inst0),
	.memory_controller_write_enable_a (rotate_omp_fn1_memory_controller_write_enable_a_inst0),
	.memory_controller_in_a (rotate_omp_fn1_memory_controller_in_a_inst0),
	.memory_controller_size_a (rotate_omp_fn1_memory_controller_size_a_inst0),
	.memory_controller_out_a (rotate_omp_fn1_memory_controller_out_a_inst0),
	.memory_controller_enable_b (rotate_omp_fn1_memory_controller_enable_b_inst0),
	.memory_controller_address_b (rotate_omp_fn1_memory_controller_address_b_inst0),
	.memory_controller_write_enable_b (rotate_omp_fn1_memory_controller_write_enable_b_inst0),
	.memory_controller_in_b (rotate_omp_fn1_memory_controller_in_b_inst0),
	.memory_controller_size_b (rotate_omp_fn1_memory_controller_size_b_inst0),
	.memory_controller_out_b (rotate_omp_fn1_memory_controller_out_b_inst0),
	.memory_controller_waitrequest (rotate_omp_fn1_memory_controller_waitrequest_inst0)
);

defparam
	rotate_omp_fn1_inst0.tag_offset = tag_offset*2+0;


rotate_omp_fn1 rotate_omp_fn1_inst1 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn1_start_inst1),
	.finish (rotate_omp_fn1_finish_inst1),
	.memory_controller_enable_a (rotate_omp_fn1_memory_controller_enable_a_inst1),
	.memory_controller_address_a (rotate_omp_fn1_memory_controller_address_a_inst1),
	.memory_controller_write_enable_a (rotate_omp_fn1_memory_controller_write_enable_a_inst1),
	.memory_controller_in_a (rotate_omp_fn1_memory_controller_in_a_inst1),
	.memory_controller_size_a (rotate_omp_fn1_memory_controller_size_a_inst1),
	.memory_controller_out_a (rotate_omp_fn1_memory_controller_out_a_inst1),
	.memory_controller_enable_b (rotate_omp_fn1_memory_controller_enable_b_inst1),
	.memory_controller_address_b (rotate_omp_fn1_memory_controller_address_b_inst1),
	.memory_controller_write_enable_b (rotate_omp_fn1_memory_controller_write_enable_b_inst1),
	.memory_controller_in_b (rotate_omp_fn1_memory_controller_in_b_inst1),
	.memory_controller_size_b (rotate_omp_fn1_memory_controller_size_b_inst1),
	.memory_controller_out_b (rotate_omp_fn1_memory_controller_out_b_inst1),
	.memory_controller_waitrequest (rotate_omp_fn1_memory_controller_waitrequest_inst1)
);

defparam
	rotate_omp_fn1_inst1.tag_offset = tag_offset*2+1;


round_robin_arbiter round_robin_arbiter_rotate_omp_fn1_inst (
	.clk (clk),
	.rst_an (~(reset)),
	.waitrequest (memory_controller_waitrequest),
	.req_in ({(rotate_omp_fn1_memory_controller_enable_a_inst0 | rotate_omp_fn1_memory_controller_enable_b_inst0),(rotate_omp_fn1_memory_controller_enable_a_inst1 | rotate_omp_fn1_memory_controller_enable_b_inst1)}),
	.grant_final ({rotate_omp_fn1_memory_controller_gnt_0,rotate_omp_fn1_memory_controller_gnt_1})
);

defparam
	round_robin_arbiter_rotate_omp_fn1_inst.N = 2;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1;
LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_3:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((rotate_omp_fn1_finish_final == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_3;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1)) begin
		rotate_omp_fn1_start_inst0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_start_inst0"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn1_start_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_start_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1)) begin
		rotate_omp_fn1_start_inst1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_start_inst1"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn1_start_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_start_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_out_a_inst0 = rotate_omp_fn1_memory_controller_out_reg_a_inst0;
	if (rotate_omp_fn1_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn1_memory_controller_out_a_inst0 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_dataReady0_a_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_a_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn1_memory_controller_dataReady0_a_inst0 <= (rotate_omp_fn1_memory_controller_gnt_0 & (rotate_omp_fn1_memory_controller_enable_a_inst0 & ~(rotate_omp_fn1_memory_controller_write_enable_a_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn1_memory_controller_gnt_0 & (rotate_omp_fn1_memory_controller_enable_a_inst0 & ~(rotate_omp_fn1_memory_controller_write_enable_a_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_a_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn1_memory_controller_dataReady1_a_inst0 <= rotate_omp_fn1_memory_controller_dataReady0_a_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_out_reg_a_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_a_inst0"); $finish; end
	end
	if (rotate_omp_fn1_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn1_memory_controller_out_reg_a_inst0 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_a_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_out_a_inst1 = rotate_omp_fn1_memory_controller_out_reg_a_inst1;
	if (rotate_omp_fn1_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn1_memory_controller_out_a_inst1 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_dataReady0_a_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_a_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn1_memory_controller_dataReady0_a_inst1 <= (rotate_omp_fn1_memory_controller_gnt_1 & (rotate_omp_fn1_memory_controller_enable_a_inst1 & ~(rotate_omp_fn1_memory_controller_write_enable_a_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn1_memory_controller_gnt_1 & (rotate_omp_fn1_memory_controller_enable_a_inst1 & ~(rotate_omp_fn1_memory_controller_write_enable_a_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_a_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn1_memory_controller_dataReady1_a_inst1 <= rotate_omp_fn1_memory_controller_dataReady0_a_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_out_reg_a_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_a_inst1"); $finish; end
	end
	if (rotate_omp_fn1_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn1_memory_controller_out_reg_a_inst1 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_a_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_out_b_inst0 = rotate_omp_fn1_memory_controller_out_reg_b_inst0;
	if (rotate_omp_fn1_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn1_memory_controller_out_b_inst0 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_dataReady0_b_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_b_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn1_memory_controller_dataReady0_b_inst0 <= (rotate_omp_fn1_memory_controller_gnt_0 & (rotate_omp_fn1_memory_controller_enable_b_inst0 & ~(rotate_omp_fn1_memory_controller_write_enable_b_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn1_memory_controller_gnt_0 & (rotate_omp_fn1_memory_controller_enable_b_inst0 & ~(rotate_omp_fn1_memory_controller_write_enable_b_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_b_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn1_memory_controller_dataReady1_b_inst0 <= rotate_omp_fn1_memory_controller_dataReady0_b_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_out_reg_b_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_b_inst0"); $finish; end
	end
	if (rotate_omp_fn1_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn1_memory_controller_out_reg_b_inst0 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_b_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_out_b_inst1 = rotate_omp_fn1_memory_controller_out_reg_b_inst1;
	if (rotate_omp_fn1_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn1_memory_controller_out_b_inst1 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_dataReady0_b_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_b_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn1_memory_controller_dataReady0_b_inst1 <= (rotate_omp_fn1_memory_controller_gnt_1 & (rotate_omp_fn1_memory_controller_enable_b_inst1 & ~(rotate_omp_fn1_memory_controller_write_enable_b_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn1_memory_controller_gnt_1 & (rotate_omp_fn1_memory_controller_enable_b_inst1 & ~(rotate_omp_fn1_memory_controller_write_enable_b_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_dataReady0_b_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn1_memory_controller_dataReady1_b_inst1 <= rotate_omp_fn1_memory_controller_dataReady0_b_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn1_memory_controller_out_reg_b_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_b_inst1"); $finish; end
	end
	if (rotate_omp_fn1_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn1_memory_controller_out_reg_b_inst1 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_memory_controller_out_reg_b_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_waitrequest_inst0 = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn1_memory_controller_waitrequest_inst0 = (((rotate_omp_fn1_memory_controller_enable_a_inst0 | rotate_omp_fn1_memory_controller_enable_b_inst0) & ~(rotate_omp_fn1_memory_controller_gnt_0)) | (rotate_omp_fn1_memory_controller_gnt_0 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn1_memory_controller_waitrequest_inst1 = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn1_memory_controller_waitrequest_inst1 = (((rotate_omp_fn1_memory_controller_enable_a_inst1 | rotate_omp_fn1_memory_controller_enable_b_inst1) & ~(rotate_omp_fn1_memory_controller_gnt_1)) | (rotate_omp_fn1_memory_controller_gnt_1 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn1_finish_final = (rotate_omp_fn1_finish_inst0_reg & rotate_omp_fn1_finish_inst1_reg);
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1))) begin
		rotate_omp_fn1_finish_inst0_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_finish_inst0_reg"); $finish; end
	end
	if (rotate_omp_fn1_finish_inst0) begin
		rotate_omp_fn1_finish_inst0_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_finish_inst0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_1))) begin
		rotate_omp_fn1_finish_inst1_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_finish_inst1_reg"); $finish; end
	end
	if (rotate_omp_fn1_finish_inst1) begin
		rotate_omp_fn1_finish_inst1_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn1_finish_inst1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn1_BB_entry_3)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn1_memory_controller_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn1_memory_controller_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn1_memory_controller_address_a_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn1_memory_controller_address_a_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn1_memory_controller_write_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn1_memory_controller_write_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn1_memory_controller_in_a_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn1_memory_controller_in_a_inst1;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn1_memory_controller_size_a_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn1_memory_controller_size_a_inst1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn1_memory_controller_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn1_memory_controller_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn1_memory_controller_address_b_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn1_memory_controller_address_b_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn1_memory_controller_write_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn1_memory_controller_write_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn1_memory_controller_in_b_inst0;
	end
	/* legup_omp_rotate_omp_fn1: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.1(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn1_memory_controller_in_b_inst1;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn1_memory_controller_size_b_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn1_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn1_memory_controller_size_b_inst1;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module rotate_omp_fn2
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_1 = 5'd1;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_2 = 5'd2;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_3 = 5'd3;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_4 = 5'd4;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_5 = 5'd5;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_6 = 5'd6;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_7 = 5'd7;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_8 = 5'd8;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_9 = 5'd9;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_10 = 5'd10;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_11 = 5'd11;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_12 = 5'd12;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_13 = 5'd13;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_14 = 5'd14;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_15 = 5'd15;
parameter [4:0] LEGUP_F_rotate_omp_fn2_BB_entry_16 = 5'd16;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] rotate_omp_fn2_entry_0;
reg [31:0] rotate_omp_fn2_entry_1;
reg [31:0] rotate_omp_fn2_entry_2;
reg [31:0] rotate_omp_fn2_entry_2_reg;
reg [31:0] rotate_omp_fn2_entry_3;
reg [31:0] rotate_omp_fn2_altfp_multiply_32_0_op0;
reg [31:0] rotate_omp_fn2_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_rotate_omp_fn2_entry_1_out;
reg  altfp_rotate_omp_fn2_entry_1_en;
reg [31:0] rotate_omp_fn2_altfp_multiply_32_0;
reg  first_state_after_memory_read;
reg  second_state_after_memory_read;
reg  memory_controller_waitrequest_inverted_reg;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_b;

/*   %1 = fmul float %0, 5.000000e-01*/
altfp_multiplier_11 altfp_multiplier_11_rotate_omp_fn2_entry_1 (
	.result (altfp_multiplier_rotate_omp_fn2_entry_1_out),
	.dataa (rotate_omp_fn2_altfp_multiply_32_0_op0),
	.datab (rotate_omp_fn2_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_rotate_omp_fn2_entry_1_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_1;
LEGUP_F_rotate_omp_fn2_BB_entry_1:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_2;
LEGUP_F_rotate_omp_fn2_BB_entry_10:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_11;
LEGUP_F_rotate_omp_fn2_BB_entry_11:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_12;
LEGUP_F_rotate_omp_fn2_BB_entry_12:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_13;
LEGUP_F_rotate_omp_fn2_BB_entry_13:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_14;
LEGUP_F_rotate_omp_fn2_BB_entry_14:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_15;
LEGUP_F_rotate_omp_fn2_BB_entry_15:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_16;
LEGUP_F_rotate_omp_fn2_BB_entry_16:
		next_state = LEGUP_0;
LEGUP_F_rotate_omp_fn2_BB_entry_2:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_3;
LEGUP_F_rotate_omp_fn2_BB_entry_3:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_4;
LEGUP_F_rotate_omp_fn2_BB_entry_4:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_5;
LEGUP_F_rotate_omp_fn2_BB_entry_5:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_6;
LEGUP_F_rotate_omp_fn2_BB_entry_6:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_7;
LEGUP_F_rotate_omp_fn2_BB_entry_7:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_8;
LEGUP_F_rotate_omp_fn2_BB_entry_8:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_9;
LEGUP_F_rotate_omp_fn2_BB_entry_9:
		next_state = LEGUP_F_rotate_omp_fn2_BB_entry_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* rotate._omp_fn.2: %entry*/
	/*   %0 = load float* @w_next.0, align 4, !tbaa !1*/
		rotate_omp_fn2_entry_0 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	rotate_omp_fn2_entry_1 = rotate_omp_fn2_altfp_multiply_32_0;
end
always @(*) begin
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
		rotate_omp_fn2_entry_2 = memory_controller_out_stored_on_datavalid_b[31:0];
end
always @(posedge clk) begin
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_3)) begin
		rotate_omp_fn2_entry_2_reg <= rotate_omp_fn2_entry_2;
		if (start == 1'b0 && ^(rotate_omp_fn2_entry_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_entry_2_reg"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_entry_3 = rotate_omp_fn2_altfp_multiply_32_0;
end
always @(*) begin
	/* rotate._omp_fn.2: %entry*/
	/*   %1 = fmul float %0, 5.000000e-01*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_3)) begin
		rotate_omp_fn2_altfp_multiply_32_0_op0 = rotate_omp_fn2_entry_0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %3 = fmul float %2, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_4)) */ begin
		rotate_omp_fn2_altfp_multiply_32_0_op0 = rotate_omp_fn2_entry_2_reg;
	end
end
always @(*) begin
	/* rotate._omp_fn.2: %entry*/
	/*   %1 = fmul float %0, 5.000000e-01*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_3)) begin
		rotate_omp_fn2_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %3 = fmul float %2, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_4)) */ begin
		rotate_omp_fn2_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
end
always @(*) begin
	altfp_rotate_omp_fn2_entry_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	rotate_omp_fn2_altfp_multiply_32_0 = altfp_multiplier_rotate_omp_fn2_entry_1_out;
end
always @(posedge clk) begin
	if (reset) begin
		first_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		first_state_after_memory_read <= ((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)));
		if (start == 1'b0 && ^(((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		second_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		second_state_after_memory_read <= first_state_after_memory_read;
		if (start == 1'b0 && ^(first_state_after_memory_read) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	memory_controller_waitrequest_inverted_reg <= ~(memory_controller_waitrequest);
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_a = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_stored_on_datavalid_reg_a;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_a <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_a <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_b = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_stored_on_datavalid_reg_b;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_b <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_b <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* rotate._omp_fn.2: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_16)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %0 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %1, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_14)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %0 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %1, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_14)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %0 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %1, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %1, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_14)) begin
		memory_controller_in_a = rotate_omp_fn2_entry_1;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %0 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %1, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_14)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %3, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_15)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %3, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_15)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %3, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %3, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_15)) begin
		memory_controller_in_b = rotate_omp_fn2_entry_3;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   %2 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* rotate._omp_fn.2: %entry*/
	/*   store float %3, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_rotate_omp_fn2_BB_entry_15)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_omp_rotate_omp_fn2
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1 = 2'd1;
parameter [1:0] LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_3 = 2'd3;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [1:0] cur_state;
reg [1:0] next_state;
reg  rotate_omp_fn2_start_inst0;
reg  rotate_omp_fn2_start_inst1;
wire  rotate_omp_fn2_memory_controller_enable_a_inst0;
wire  rotate_omp_fn2_memory_controller_write_enable_a_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn2_memory_controller_address_a_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_in_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_a_inst0;
wire  rotate_omp_fn2_memory_controller_gnt_0;
reg  rotate_omp_fn2_memory_controller_dataReady0_a_inst0;
reg  rotate_omp_fn2_memory_controller_dataReady1_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_reg_a_inst0;
wire [1:0] rotate_omp_fn2_memory_controller_size_a_inst0;
wire  rotate_omp_fn2_memory_controller_enable_a_inst1;
wire  rotate_omp_fn2_memory_controller_write_enable_a_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn2_memory_controller_address_a_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_in_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_a_inst1;
wire  rotate_omp_fn2_memory_controller_gnt_1;
reg  rotate_omp_fn2_memory_controller_dataReady0_a_inst1;
reg  rotate_omp_fn2_memory_controller_dataReady1_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_reg_a_inst1;
wire [1:0] rotate_omp_fn2_memory_controller_size_a_inst1;
wire  rotate_omp_fn2_memory_controller_enable_b_inst0;
wire  rotate_omp_fn2_memory_controller_write_enable_b_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn2_memory_controller_address_b_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_in_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_b_inst0;
reg  rotate_omp_fn2_memory_controller_dataReady0_b_inst0;
reg  rotate_omp_fn2_memory_controller_dataReady1_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_reg_b_inst0;
wire [1:0] rotate_omp_fn2_memory_controller_size_b_inst0;
wire  rotate_omp_fn2_memory_controller_enable_b_inst1;
wire  rotate_omp_fn2_memory_controller_write_enable_b_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] rotate_omp_fn2_memory_controller_address_b_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_in_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_b_inst1;
reg  rotate_omp_fn2_memory_controller_dataReady0_b_inst1;
reg  rotate_omp_fn2_memory_controller_dataReady1_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] rotate_omp_fn2_memory_controller_out_reg_b_inst1;
wire [1:0] rotate_omp_fn2_memory_controller_size_b_inst1;
reg  rotate_omp_fn2_memory_controller_waitrequest_inst0;
reg  rotate_omp_fn2_memory_controller_waitrequest_inst1;
reg  rotate_omp_fn2_finish_final;
reg  rotate_omp_fn2_finish_inst0_reg;
wire  rotate_omp_fn2_finish_inst0;
reg  rotate_omp_fn2_finish_inst1_reg;
wire  rotate_omp_fn2_finish_inst1;


rotate_omp_fn2 rotate_omp_fn2_inst0 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn2_start_inst0),
	.finish (rotate_omp_fn2_finish_inst0),
	.memory_controller_enable_a (rotate_omp_fn2_memory_controller_enable_a_inst0),
	.memory_controller_address_a (rotate_omp_fn2_memory_controller_address_a_inst0),
	.memory_controller_write_enable_a (rotate_omp_fn2_memory_controller_write_enable_a_inst0),
	.memory_controller_in_a (rotate_omp_fn2_memory_controller_in_a_inst0),
	.memory_controller_size_a (rotate_omp_fn2_memory_controller_size_a_inst0),
	.memory_controller_out_a (rotate_omp_fn2_memory_controller_out_a_inst0),
	.memory_controller_enable_b (rotate_omp_fn2_memory_controller_enable_b_inst0),
	.memory_controller_address_b (rotate_omp_fn2_memory_controller_address_b_inst0),
	.memory_controller_write_enable_b (rotate_omp_fn2_memory_controller_write_enable_b_inst0),
	.memory_controller_in_b (rotate_omp_fn2_memory_controller_in_b_inst0),
	.memory_controller_size_b (rotate_omp_fn2_memory_controller_size_b_inst0),
	.memory_controller_out_b (rotate_omp_fn2_memory_controller_out_b_inst0),
	.memory_controller_waitrequest (rotate_omp_fn2_memory_controller_waitrequest_inst0)
);

defparam
	rotate_omp_fn2_inst0.tag_offset = tag_offset*2+0;


rotate_omp_fn2 rotate_omp_fn2_inst1 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (rotate_omp_fn2_start_inst1),
	.finish (rotate_omp_fn2_finish_inst1),
	.memory_controller_enable_a (rotate_omp_fn2_memory_controller_enable_a_inst1),
	.memory_controller_address_a (rotate_omp_fn2_memory_controller_address_a_inst1),
	.memory_controller_write_enable_a (rotate_omp_fn2_memory_controller_write_enable_a_inst1),
	.memory_controller_in_a (rotate_omp_fn2_memory_controller_in_a_inst1),
	.memory_controller_size_a (rotate_omp_fn2_memory_controller_size_a_inst1),
	.memory_controller_out_a (rotate_omp_fn2_memory_controller_out_a_inst1),
	.memory_controller_enable_b (rotate_omp_fn2_memory_controller_enable_b_inst1),
	.memory_controller_address_b (rotate_omp_fn2_memory_controller_address_b_inst1),
	.memory_controller_write_enable_b (rotate_omp_fn2_memory_controller_write_enable_b_inst1),
	.memory_controller_in_b (rotate_omp_fn2_memory_controller_in_b_inst1),
	.memory_controller_size_b (rotate_omp_fn2_memory_controller_size_b_inst1),
	.memory_controller_out_b (rotate_omp_fn2_memory_controller_out_b_inst1),
	.memory_controller_waitrequest (rotate_omp_fn2_memory_controller_waitrequest_inst1)
);

defparam
	rotate_omp_fn2_inst1.tag_offset = tag_offset*2+1;


round_robin_arbiter round_robin_arbiter_rotate_omp_fn2_inst (
	.clk (clk),
	.rst_an (~(reset)),
	.waitrequest (memory_controller_waitrequest),
	.req_in ({(rotate_omp_fn2_memory_controller_enable_a_inst0 | rotate_omp_fn2_memory_controller_enable_b_inst0),(rotate_omp_fn2_memory_controller_enable_a_inst1 | rotate_omp_fn2_memory_controller_enable_b_inst1)}),
	.grant_final ({rotate_omp_fn2_memory_controller_gnt_0,rotate_omp_fn2_memory_controller_gnt_1})
);

defparam
	round_robin_arbiter_rotate_omp_fn2_inst.N = 2;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1;
LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_3:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((rotate_omp_fn2_finish_final == 1'd1))
		next_state = LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_3;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1)) begin
		rotate_omp_fn2_start_inst0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_start_inst0"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn2_start_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_start_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1)) begin
		rotate_omp_fn2_start_inst1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_start_inst1"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		rotate_omp_fn2_start_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_start_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_out_a_inst0 = rotate_omp_fn2_memory_controller_out_reg_a_inst0;
	if (rotate_omp_fn2_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn2_memory_controller_out_a_inst0 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_dataReady0_a_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_a_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn2_memory_controller_dataReady0_a_inst0 <= (rotate_omp_fn2_memory_controller_gnt_0 & (rotate_omp_fn2_memory_controller_enable_a_inst0 & ~(rotate_omp_fn2_memory_controller_write_enable_a_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn2_memory_controller_gnt_0 & (rotate_omp_fn2_memory_controller_enable_a_inst0 & ~(rotate_omp_fn2_memory_controller_write_enable_a_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_a_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn2_memory_controller_dataReady1_a_inst0 <= rotate_omp_fn2_memory_controller_dataReady0_a_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_out_reg_a_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_a_inst0"); $finish; end
	end
	if (rotate_omp_fn2_memory_controller_dataReady1_a_inst0) begin
		rotate_omp_fn2_memory_controller_out_reg_a_inst0 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_a_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_out_a_inst1 = rotate_omp_fn2_memory_controller_out_reg_a_inst1;
	if (rotate_omp_fn2_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn2_memory_controller_out_a_inst1 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_dataReady0_a_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_a_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn2_memory_controller_dataReady0_a_inst1 <= (rotate_omp_fn2_memory_controller_gnt_1 & (rotate_omp_fn2_memory_controller_enable_a_inst1 & ~(rotate_omp_fn2_memory_controller_write_enable_a_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn2_memory_controller_gnt_1 & (rotate_omp_fn2_memory_controller_enable_a_inst1 & ~(rotate_omp_fn2_memory_controller_write_enable_a_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_a_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn2_memory_controller_dataReady1_a_inst1 <= rotate_omp_fn2_memory_controller_dataReady0_a_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_out_reg_a_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_a_inst1"); $finish; end
	end
	if (rotate_omp_fn2_memory_controller_dataReady1_a_inst1) begin
		rotate_omp_fn2_memory_controller_out_reg_a_inst1 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_a_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_out_b_inst0 = rotate_omp_fn2_memory_controller_out_reg_b_inst0;
	if (rotate_omp_fn2_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn2_memory_controller_out_b_inst0 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_dataReady0_b_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_b_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn2_memory_controller_dataReady0_b_inst0 <= (rotate_omp_fn2_memory_controller_gnt_0 & (rotate_omp_fn2_memory_controller_enable_b_inst0 & ~(rotate_omp_fn2_memory_controller_write_enable_b_inst0)));
		if (start == 1'b0 && ^((rotate_omp_fn2_memory_controller_gnt_0 & (rotate_omp_fn2_memory_controller_enable_b_inst0 & ~(rotate_omp_fn2_memory_controller_write_enable_b_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_b_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn2_memory_controller_dataReady1_b_inst0 <= rotate_omp_fn2_memory_controller_dataReady0_b_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_out_reg_b_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_b_inst0"); $finish; end
	end
	if (rotate_omp_fn2_memory_controller_dataReady1_b_inst0) begin
		rotate_omp_fn2_memory_controller_out_reg_b_inst0 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_b_inst0"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_out_b_inst1 = rotate_omp_fn2_memory_controller_out_reg_b_inst1;
	if (rotate_omp_fn2_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn2_memory_controller_out_b_inst1 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_dataReady0_b_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_b_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		rotate_omp_fn2_memory_controller_dataReady0_b_inst1 <= (rotate_omp_fn2_memory_controller_gnt_1 & (rotate_omp_fn2_memory_controller_enable_b_inst1 & ~(rotate_omp_fn2_memory_controller_write_enable_b_inst1)));
		if (start == 1'b0 && ^((rotate_omp_fn2_memory_controller_gnt_1 & (rotate_omp_fn2_memory_controller_enable_b_inst1 & ~(rotate_omp_fn2_memory_controller_write_enable_b_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_dataReady0_b_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	rotate_omp_fn2_memory_controller_dataReady1_b_inst1 <= rotate_omp_fn2_memory_controller_dataReady0_b_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		rotate_omp_fn2_memory_controller_out_reg_b_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_b_inst1"); $finish; end
	end
	if (rotate_omp_fn2_memory_controller_dataReady1_b_inst1) begin
		rotate_omp_fn2_memory_controller_out_reg_b_inst1 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_memory_controller_out_reg_b_inst1"); $finish; end
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_waitrequest_inst0 = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn2_memory_controller_waitrequest_inst0 = (((rotate_omp_fn2_memory_controller_enable_a_inst0 | rotate_omp_fn2_memory_controller_enable_b_inst0) & ~(rotate_omp_fn2_memory_controller_gnt_0)) | (rotate_omp_fn2_memory_controller_gnt_0 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn2_memory_controller_waitrequest_inst1 = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		rotate_omp_fn2_memory_controller_waitrequest_inst1 = (((rotate_omp_fn2_memory_controller_enable_a_inst1 | rotate_omp_fn2_memory_controller_enable_b_inst1) & ~(rotate_omp_fn2_memory_controller_gnt_1)) | (rotate_omp_fn2_memory_controller_gnt_1 & memory_controller_waitrequest));
	end
end
always @(*) begin
	rotate_omp_fn2_finish_final = (rotate_omp_fn2_finish_inst0_reg & rotate_omp_fn2_finish_inst1_reg);
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1))) begin
		rotate_omp_fn2_finish_inst0_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_finish_inst0_reg"); $finish; end
	end
	if (rotate_omp_fn2_finish_inst0) begin
		rotate_omp_fn2_finish_inst0_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_finish_inst0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_1))) begin
		rotate_omp_fn2_finish_inst1_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_finish_inst1_reg"); $finish; end
	end
	if (rotate_omp_fn2_finish_inst1) begin
		rotate_omp_fn2_finish_inst1_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to rotate_omp_fn2_finish_inst1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_omp_rotate_omp_fn2_BB_entry_3)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn2_memory_controller_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_a = rotate_omp_fn2_memory_controller_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn2_memory_controller_address_a_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_a = rotate_omp_fn2_memory_controller_address_a_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn2_memory_controller_write_enable_a_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_a = rotate_omp_fn2_memory_controller_write_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn2_memory_controller_in_a_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_a = rotate_omp_fn2_memory_controller_in_a_inst1;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn2_memory_controller_size_a_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_a = rotate_omp_fn2_memory_controller_size_a_inst1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn2_memory_controller_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_b = rotate_omp_fn2_memory_controller_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn2_memory_controller_address_b_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_b = rotate_omp_fn2_memory_controller_address_b_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn2_memory_controller_write_enable_b_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_b = rotate_omp_fn2_memory_controller_write_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn2_memory_controller_in_b_inst0;
	end
	/* legup_omp_rotate_omp_fn2: %entry*/
	/*   tail call fastcc void @rotate._omp_fn.2(), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_b = rotate_omp_fn2_memory_controller_in_b_inst1;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn2_memory_controller_size_b_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (rotate_omp_fn2_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_b = rotate_omp_fn2_memory_controller_size_b_inst1;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module normalize_omp_fn3
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_omp_data_i
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_1 = 6'd1;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_2 = 6'd2;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_3 = 6'd3;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_4 = 6'd4;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_5 = 6'd5;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_6 = 6'd6;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_7 = 6'd7;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_8 = 6'd8;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_9 = 6'd9;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_10 = 6'd10;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_11 = 6'd11;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_12 = 6'd12;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_13 = 6'd13;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_14 = 6'd14;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_15 = 6'd15;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_16 = 6'd16;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_17 = 6'd17;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_18 = 6'd18;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_19 = 6'd19;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_20 = 6'd20;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_21 = 6'd21;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_22 = 6'd22;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_23 = 6'd23;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_24 = 6'd24;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_25 = 6'd25;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_26 = 6'd26;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_27 = 6'd27;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_28 = 6'd28;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_29 = 6'd29;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_30 = 6'd30;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_31 = 6'd31;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_32 = 6'd32;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_33 = 6'd33;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_34 = 6'd34;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_35 = 6'd35;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_36 = 6'd36;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_37 = 6'd37;
parameter [5:0] LEGUP_F_normalize_omp_fn3_BB_entry_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_omp_data_i;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_entry_0;
reg [31:0] normalize_omp_fn3_entry_1;
reg [31:0] normalize_omp_fn3_entry_2;
reg [31:0] normalize_omp_fn3_entry_2_reg;
reg [31:0] normalize_omp_fn3_entry_3;
reg [31:0] normalize_omp_fn3_entry_4;
reg [31:0] normalize_omp_fn3_entry_5;
reg [31:0] normalize_omp_fn3_altfp_divide_32_0_op0;
reg [31:0] normalize_omp_fn3_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_normalize_omp_fn3_entry_3_out;
reg  altfp_normalize_omp_fn3_entry_3_en;
reg [31:0] normalize_omp_fn3_altfp_divide_32_0;
reg  first_state_after_memory_read;
reg  second_state_after_memory_read;
reg  memory_controller_waitrequest_inverted_reg;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_stored_on_datavalid_reg_b;

/*   %3 = fdiv float %1, %2*/
altfp_divider_33 altfp_divider_33_normalize_omp_fn3_entry_3 (
	.result (altfp_divider_normalize_omp_fn3_entry_3_out),
	.dataa (normalize_omp_fn3_altfp_divide_32_0_op0),
	.datab (normalize_omp_fn3_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_normalize_omp_fn3_entry_3_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_1;
LEGUP_F_normalize_omp_fn3_BB_entry_1:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_2;
LEGUP_F_normalize_omp_fn3_BB_entry_10:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_11;
LEGUP_F_normalize_omp_fn3_BB_entry_11:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_12;
LEGUP_F_normalize_omp_fn3_BB_entry_12:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_13;
LEGUP_F_normalize_omp_fn3_BB_entry_13:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_14;
LEGUP_F_normalize_omp_fn3_BB_entry_14:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_15;
LEGUP_F_normalize_omp_fn3_BB_entry_15:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_16;
LEGUP_F_normalize_omp_fn3_BB_entry_16:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_17;
LEGUP_F_normalize_omp_fn3_BB_entry_17:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_18;
LEGUP_F_normalize_omp_fn3_BB_entry_18:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_19;
LEGUP_F_normalize_omp_fn3_BB_entry_19:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_20;
LEGUP_F_normalize_omp_fn3_BB_entry_2:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_3;
LEGUP_F_normalize_omp_fn3_BB_entry_20:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_21;
LEGUP_F_normalize_omp_fn3_BB_entry_21:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_22;
LEGUP_F_normalize_omp_fn3_BB_entry_22:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_23;
LEGUP_F_normalize_omp_fn3_BB_entry_23:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_24;
LEGUP_F_normalize_omp_fn3_BB_entry_24:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_25;
LEGUP_F_normalize_omp_fn3_BB_entry_25:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_26;
LEGUP_F_normalize_omp_fn3_BB_entry_26:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_27;
LEGUP_F_normalize_omp_fn3_BB_entry_27:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_28;
LEGUP_F_normalize_omp_fn3_BB_entry_28:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_29;
LEGUP_F_normalize_omp_fn3_BB_entry_29:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_30;
LEGUP_F_normalize_omp_fn3_BB_entry_3:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_4;
LEGUP_F_normalize_omp_fn3_BB_entry_30:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_31;
LEGUP_F_normalize_omp_fn3_BB_entry_31:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_32;
LEGUP_F_normalize_omp_fn3_BB_entry_32:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_33;
LEGUP_F_normalize_omp_fn3_BB_entry_33:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_34;
LEGUP_F_normalize_omp_fn3_BB_entry_34:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_35;
LEGUP_F_normalize_omp_fn3_BB_entry_35:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_36;
LEGUP_F_normalize_omp_fn3_BB_entry_36:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_37;
LEGUP_F_normalize_omp_fn3_BB_entry_37:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_38;
LEGUP_F_normalize_omp_fn3_BB_entry_38:
		next_state = LEGUP_0;
LEGUP_F_normalize_omp_fn3_BB_entry_4:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_5;
LEGUP_F_normalize_omp_fn3_BB_entry_5:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_6;
LEGUP_F_normalize_omp_fn3_BB_entry_6:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_7;
LEGUP_F_normalize_omp_fn3_BB_entry_7:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_8;
LEGUP_F_normalize_omp_fn3_BB_entry_8:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_9;
LEGUP_F_normalize_omp_fn3_BB_entry_9:
		next_state = LEGUP_F_normalize_omp_fn3_BB_entry_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %0 = bitcast i8* %.omp_data_i to float**/
		normalize_omp_fn3_entry_0 = arg_omp_data_i;
end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
		normalize_omp_fn3_entry_1 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
		normalize_omp_fn3_entry_2 = memory_controller_out_stored_on_datavalid_b[31:0];
end
always @(posedge clk) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_3)) begin
		normalize_omp_fn3_entry_2_reg <= normalize_omp_fn3_entry_2;
		if (start == 1'b0 && ^(normalize_omp_fn3_entry_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_entry_2_reg"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_entry_3 = normalize_omp_fn3_altfp_divide_32_0;
end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %4 = load float* @w_next.1, align 4, !tbaa !1*/
		normalize_omp_fn3_entry_4 = memory_controller_out_stored_on_datavalid_a[31:0];
end
always @(*) begin
	normalize_omp_fn3_entry_5 = normalize_omp_fn3_altfp_divide_32_0;
end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %3 = fdiv float %1, %2*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_3)) begin
		normalize_omp_fn3_altfp_divide_32_0_op0 = normalize_omp_fn3_entry_1;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %5 = fdiv float %4, %2*/
	else /* if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_4)) */ begin
		normalize_omp_fn3_altfp_divide_32_0_op0 = normalize_omp_fn3_entry_4;
	end
end
always @(*) begin
	/* normalize._omp_fn.3: %entry*/
	/*   %3 = fdiv float %1, %2*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_3)) begin
		normalize_omp_fn3_altfp_divide_32_0_op1 = normalize_omp_fn3_entry_2;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %5 = fdiv float %4, %2*/
	else /* if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_4)) */ begin
		normalize_omp_fn3_altfp_divide_32_0_op1 = normalize_omp_fn3_entry_2_reg;
	end
end
always @(*) begin
	altfp_normalize_omp_fn3_entry_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	normalize_omp_fn3_altfp_divide_32_0 = altfp_divider_normalize_omp_fn3_entry_3_out;
end
always @(posedge clk) begin
	if (reset) begin
		first_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		first_state_after_memory_read <= ((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)));
		if (start == 1'b0 && ^(((memory_controller_enable_a & ~(memory_controller_write_enable_a)) | (memory_controller_enable_b & ~(memory_controller_write_enable_b)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to first_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		second_state_after_memory_read <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		second_state_after_memory_read <= first_state_after_memory_read;
		if (start == 1'b0 && ^(first_state_after_memory_read) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to second_state_after_memory_read"); $finish; end
	end
end
always @(posedge clk) begin
	memory_controller_waitrequest_inverted_reg <= ~(memory_controller_waitrequest);
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_a = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_stored_on_datavalid_reg_a;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_a = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_a <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_a <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_a"); $finish; end
	end
end
always @(*) begin
	memory_controller_out_stored_on_datavalid_b = 64'd0;
	if (second_state_after_memory_read) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_stored_on_datavalid_reg_b;
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_b = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		memory_controller_out_stored_on_datavalid_reg_b <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
	if ((second_state_after_memory_read & memory_controller_waitrequest_inverted_reg)) begin
		memory_controller_out_stored_on_datavalid_reg_b <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_stored_on_datavalid_reg_b"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* normalize._omp_fn.3: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %4 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %3, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_37)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %4 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_2)) begin
		memory_controller_address_a = `TAG_g_w_next1_a;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %3, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_36)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_37)) begin
		memory_controller_address_a = `TAG_g_w_next1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %4 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %3, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %3, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_36)) begin
		memory_controller_in_a = normalize_omp_fn3_entry_3;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_37)) begin
		memory_controller_in_a = normalize_omp_fn3_entry_5;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %4 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %3, float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   store float %5, float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_37)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_address_b = normalize_omp_fn3_entry_0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* normalize._omp_fn.3: %entry*/
	/*   %2 = load float* %0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_normalize_omp_fn3_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_omp_normalize_omp_fn3
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_omp_data_i
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1 = 2'd1;
parameter [1:0] LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_3 = 2'd3;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_omp_data_i;
reg [1:0] cur_state;
reg [1:0] next_state;
reg  normalize_omp_fn3_start_inst0;
reg  normalize_omp_fn3_start_inst1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_arg_omp_data_i_inst0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_arg_omp_data_i_inst1;
wire  normalize_omp_fn3_memory_controller_enable_a_inst0;
wire  normalize_omp_fn3_memory_controller_write_enable_a_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_memory_controller_address_a_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_in_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_a_inst0;
wire  normalize_omp_fn3_memory_controller_gnt_0;
reg  normalize_omp_fn3_memory_controller_dataReady0_a_inst0;
reg  normalize_omp_fn3_memory_controller_dataReady1_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_reg_a_inst0;
wire [1:0] normalize_omp_fn3_memory_controller_size_a_inst0;
wire  normalize_omp_fn3_memory_controller_enable_a_inst1;
wire  normalize_omp_fn3_memory_controller_write_enable_a_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_memory_controller_address_a_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_in_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_a_inst1;
wire  normalize_omp_fn3_memory_controller_gnt_1;
reg  normalize_omp_fn3_memory_controller_dataReady0_a_inst1;
reg  normalize_omp_fn3_memory_controller_dataReady1_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_reg_a_inst1;
wire [1:0] normalize_omp_fn3_memory_controller_size_a_inst1;
wire  normalize_omp_fn3_memory_controller_enable_b_inst0;
wire  normalize_omp_fn3_memory_controller_write_enable_b_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_memory_controller_address_b_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_in_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_b_inst0;
reg  normalize_omp_fn3_memory_controller_dataReady0_b_inst0;
reg  normalize_omp_fn3_memory_controller_dataReady1_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_reg_b_inst0;
wire [1:0] normalize_omp_fn3_memory_controller_size_b_inst0;
wire  normalize_omp_fn3_memory_controller_enable_b_inst1;
wire  normalize_omp_fn3_memory_controller_write_enable_b_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] normalize_omp_fn3_memory_controller_address_b_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_in_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_b_inst1;
reg  normalize_omp_fn3_memory_controller_dataReady0_b_inst1;
reg  normalize_omp_fn3_memory_controller_dataReady1_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] normalize_omp_fn3_memory_controller_out_reg_b_inst1;
wire [1:0] normalize_omp_fn3_memory_controller_size_b_inst1;
reg  normalize_omp_fn3_memory_controller_waitrequest_inst0;
reg  normalize_omp_fn3_memory_controller_waitrequest_inst1;
reg  normalize_omp_fn3_finish_final;
reg  normalize_omp_fn3_finish_inst0_reg;
wire  normalize_omp_fn3_finish_inst0;
reg  normalize_omp_fn3_finish_inst1_reg;
wire  normalize_omp_fn3_finish_inst1;


normalize_omp_fn3 normalize_omp_fn3_inst0 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (normalize_omp_fn3_start_inst0),
	.finish (normalize_omp_fn3_finish_inst0),
	.memory_controller_enable_a (normalize_omp_fn3_memory_controller_enable_a_inst0),
	.memory_controller_address_a (normalize_omp_fn3_memory_controller_address_a_inst0),
	.memory_controller_write_enable_a (normalize_omp_fn3_memory_controller_write_enable_a_inst0),
	.memory_controller_in_a (normalize_omp_fn3_memory_controller_in_a_inst0),
	.memory_controller_size_a (normalize_omp_fn3_memory_controller_size_a_inst0),
	.memory_controller_out_a (normalize_omp_fn3_memory_controller_out_a_inst0),
	.memory_controller_enable_b (normalize_omp_fn3_memory_controller_enable_b_inst0),
	.memory_controller_address_b (normalize_omp_fn3_memory_controller_address_b_inst0),
	.memory_controller_write_enable_b (normalize_omp_fn3_memory_controller_write_enable_b_inst0),
	.memory_controller_in_b (normalize_omp_fn3_memory_controller_in_b_inst0),
	.memory_controller_size_b (normalize_omp_fn3_memory_controller_size_b_inst0),
	.memory_controller_out_b (normalize_omp_fn3_memory_controller_out_b_inst0),
	.memory_controller_waitrequest (normalize_omp_fn3_memory_controller_waitrequest_inst0),
	.arg_omp_data_i (normalize_omp_fn3_arg_omp_data_i_inst0)
);

defparam
	normalize_omp_fn3_inst0.tag_offset = tag_offset*2+0;


normalize_omp_fn3 normalize_omp_fn3_inst1 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (normalize_omp_fn3_start_inst1),
	.finish (normalize_omp_fn3_finish_inst1),
	.memory_controller_enable_a (normalize_omp_fn3_memory_controller_enable_a_inst1),
	.memory_controller_address_a (normalize_omp_fn3_memory_controller_address_a_inst1),
	.memory_controller_write_enable_a (normalize_omp_fn3_memory_controller_write_enable_a_inst1),
	.memory_controller_in_a (normalize_omp_fn3_memory_controller_in_a_inst1),
	.memory_controller_size_a (normalize_omp_fn3_memory_controller_size_a_inst1),
	.memory_controller_out_a (normalize_omp_fn3_memory_controller_out_a_inst1),
	.memory_controller_enable_b (normalize_omp_fn3_memory_controller_enable_b_inst1),
	.memory_controller_address_b (normalize_omp_fn3_memory_controller_address_b_inst1),
	.memory_controller_write_enable_b (normalize_omp_fn3_memory_controller_write_enable_b_inst1),
	.memory_controller_in_b (normalize_omp_fn3_memory_controller_in_b_inst1),
	.memory_controller_size_b (normalize_omp_fn3_memory_controller_size_b_inst1),
	.memory_controller_out_b (normalize_omp_fn3_memory_controller_out_b_inst1),
	.memory_controller_waitrequest (normalize_omp_fn3_memory_controller_waitrequest_inst1),
	.arg_omp_data_i (normalize_omp_fn3_arg_omp_data_i_inst1)
);

defparam
	normalize_omp_fn3_inst1.tag_offset = tag_offset*2+1;


round_robin_arbiter round_robin_arbiter_normalize_omp_fn3_inst (
	.clk (clk),
	.rst_an (~(reset)),
	.waitrequest (memory_controller_waitrequest),
	.req_in ({(normalize_omp_fn3_memory_controller_enable_a_inst0 | normalize_omp_fn3_memory_controller_enable_b_inst0),(normalize_omp_fn3_memory_controller_enable_a_inst1 | normalize_omp_fn3_memory_controller_enable_b_inst1)}),
	.grant_final ({normalize_omp_fn3_memory_controller_gnt_0,normalize_omp_fn3_memory_controller_gnt_1})
);

defparam
	round_robin_arbiter_normalize_omp_fn3_inst.N = 2;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1;
LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_3:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((normalize_omp_fn3_finish_final == 1'd1))
		next_state = LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_3;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1)) begin
		normalize_omp_fn3_start_inst0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_start_inst0"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		normalize_omp_fn3_start_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_start_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1)) begin
		normalize_omp_fn3_start_inst1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_start_inst1"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0))) begin
		normalize_omp_fn3_start_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_start_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1)) begin
		normalize_omp_fn3_arg_omp_data_i_inst0 <= arg_omp_data_i;
		if (start == 1'b0 && ^(arg_omp_data_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_arg_omp_data_i_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1)) begin
		normalize_omp_fn3_arg_omp_data_i_inst1 <= arg_omp_data_i;
		if (start == 1'b0 && ^(arg_omp_data_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_arg_omp_data_i_inst1"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_out_a_inst0 = normalize_omp_fn3_memory_controller_out_reg_a_inst0;
	if (normalize_omp_fn3_memory_controller_dataReady1_a_inst0) begin
		normalize_omp_fn3_memory_controller_out_a_inst0 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_dataReady0_a_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_a_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		normalize_omp_fn3_memory_controller_dataReady0_a_inst0 <= (normalize_omp_fn3_memory_controller_gnt_0 & (normalize_omp_fn3_memory_controller_enable_a_inst0 & ~(normalize_omp_fn3_memory_controller_write_enable_a_inst0)));
		if (start == 1'b0 && ^((normalize_omp_fn3_memory_controller_gnt_0 & (normalize_omp_fn3_memory_controller_enable_a_inst0 & ~(normalize_omp_fn3_memory_controller_write_enable_a_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_a_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	normalize_omp_fn3_memory_controller_dataReady1_a_inst0 <= normalize_omp_fn3_memory_controller_dataReady0_a_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_out_reg_a_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_a_inst0"); $finish; end
	end
	if (normalize_omp_fn3_memory_controller_dataReady1_a_inst0) begin
		normalize_omp_fn3_memory_controller_out_reg_a_inst0 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_a_inst0"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_out_a_inst1 = normalize_omp_fn3_memory_controller_out_reg_a_inst1;
	if (normalize_omp_fn3_memory_controller_dataReady1_a_inst1) begin
		normalize_omp_fn3_memory_controller_out_a_inst1 = memory_controller_out_a;
	end
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_dataReady0_a_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_a_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		normalize_omp_fn3_memory_controller_dataReady0_a_inst1 <= (normalize_omp_fn3_memory_controller_gnt_1 & (normalize_omp_fn3_memory_controller_enable_a_inst1 & ~(normalize_omp_fn3_memory_controller_write_enable_a_inst1)));
		if (start == 1'b0 && ^((normalize_omp_fn3_memory_controller_gnt_1 & (normalize_omp_fn3_memory_controller_enable_a_inst1 & ~(normalize_omp_fn3_memory_controller_write_enable_a_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_a_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	normalize_omp_fn3_memory_controller_dataReady1_a_inst1 <= normalize_omp_fn3_memory_controller_dataReady0_a_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_out_reg_a_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_a_inst1"); $finish; end
	end
	if (normalize_omp_fn3_memory_controller_dataReady1_a_inst1) begin
		normalize_omp_fn3_memory_controller_out_reg_a_inst1 <= memory_controller_out_a;
		if (start == 1'b0 && ^(memory_controller_out_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_a_inst1"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_out_b_inst0 = normalize_omp_fn3_memory_controller_out_reg_b_inst0;
	if (normalize_omp_fn3_memory_controller_dataReady1_b_inst0) begin
		normalize_omp_fn3_memory_controller_out_b_inst0 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_dataReady0_b_inst0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_b_inst0"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		normalize_omp_fn3_memory_controller_dataReady0_b_inst0 <= (normalize_omp_fn3_memory_controller_gnt_0 & (normalize_omp_fn3_memory_controller_enable_b_inst0 & ~(normalize_omp_fn3_memory_controller_write_enable_b_inst0)));
		if (start == 1'b0 && ^((normalize_omp_fn3_memory_controller_gnt_0 & (normalize_omp_fn3_memory_controller_enable_b_inst0 & ~(normalize_omp_fn3_memory_controller_write_enable_b_inst0)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_b_inst0"); $finish; end
	end
end
always @(posedge clk) begin
	normalize_omp_fn3_memory_controller_dataReady1_b_inst0 <= normalize_omp_fn3_memory_controller_dataReady0_b_inst0;
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_out_reg_b_inst0 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_b_inst0"); $finish; end
	end
	if (normalize_omp_fn3_memory_controller_dataReady1_b_inst0) begin
		normalize_omp_fn3_memory_controller_out_reg_b_inst0 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_b_inst0"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_out_b_inst1 = normalize_omp_fn3_memory_controller_out_reg_b_inst1;
	if (normalize_omp_fn3_memory_controller_dataReady1_b_inst1) begin
		normalize_omp_fn3_memory_controller_out_b_inst1 = memory_controller_out_b;
	end
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_dataReady0_b_inst1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_b_inst1"); $finish; end
	end
	if (~(memory_controller_waitrequest)) begin
		normalize_omp_fn3_memory_controller_dataReady0_b_inst1 <= (normalize_omp_fn3_memory_controller_gnt_1 & (normalize_omp_fn3_memory_controller_enable_b_inst1 & ~(normalize_omp_fn3_memory_controller_write_enable_b_inst1)));
		if (start == 1'b0 && ^((normalize_omp_fn3_memory_controller_gnt_1 & (normalize_omp_fn3_memory_controller_enable_b_inst1 & ~(normalize_omp_fn3_memory_controller_write_enable_b_inst1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_dataReady0_b_inst1"); $finish; end
	end
end
always @(posedge clk) begin
	normalize_omp_fn3_memory_controller_dataReady1_b_inst1 <= normalize_omp_fn3_memory_controller_dataReady0_b_inst1;
end
always @(posedge clk) begin
	if (reset) begin
		normalize_omp_fn3_memory_controller_out_reg_b_inst1 <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_b_inst1"); $finish; end
	end
	if (normalize_omp_fn3_memory_controller_dataReady1_b_inst1) begin
		normalize_omp_fn3_memory_controller_out_reg_b_inst1 <= memory_controller_out_b;
		if (start == 1'b0 && ^(memory_controller_out_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_memory_controller_out_reg_b_inst1"); $finish; end
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_waitrequest_inst0 = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		normalize_omp_fn3_memory_controller_waitrequest_inst0 = (((normalize_omp_fn3_memory_controller_enable_a_inst0 | normalize_omp_fn3_memory_controller_enable_b_inst0) & ~(normalize_omp_fn3_memory_controller_gnt_0)) | (normalize_omp_fn3_memory_controller_gnt_0 & memory_controller_waitrequest));
	end
end
always @(*) begin
	normalize_omp_fn3_memory_controller_waitrequest_inst1 = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		normalize_omp_fn3_memory_controller_waitrequest_inst1 = (((normalize_omp_fn3_memory_controller_enable_a_inst1 | normalize_omp_fn3_memory_controller_enable_b_inst1) & ~(normalize_omp_fn3_memory_controller_gnt_1)) | (normalize_omp_fn3_memory_controller_gnt_1 & memory_controller_waitrequest));
	end
end
always @(*) begin
	normalize_omp_fn3_finish_final = (normalize_omp_fn3_finish_inst0_reg & normalize_omp_fn3_finish_inst1_reg);
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1))) begin
		normalize_omp_fn3_finish_inst0_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_finish_inst0_reg"); $finish; end
	end
	if (normalize_omp_fn3_finish_inst0) begin
		normalize_omp_fn3_finish_inst0_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_finish_inst0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_1))) begin
		normalize_omp_fn3_finish_inst1_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_finish_inst1_reg"); $finish; end
	end
	if (normalize_omp_fn3_finish_inst1) begin
		normalize_omp_fn3_finish_inst1_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to normalize_omp_fn3_finish_inst1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_omp_normalize_omp_fn3_BB_entry_3)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_a = normalize_omp_fn3_memory_controller_enable_a_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_a = normalize_omp_fn3_memory_controller_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_a = normalize_omp_fn3_memory_controller_address_a_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_a = normalize_omp_fn3_memory_controller_address_a_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_a = normalize_omp_fn3_memory_controller_write_enable_a_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_a = normalize_omp_fn3_memory_controller_write_enable_a_inst1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_a = normalize_omp_fn3_memory_controller_in_a_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_a = normalize_omp_fn3_memory_controller_in_a_inst1;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_a = normalize_omp_fn3_memory_controller_size_a_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_a = normalize_omp_fn3_memory_controller_size_a_inst1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_enable_b = normalize_omp_fn3_memory_controller_enable_b_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_enable_b = normalize_omp_fn3_memory_controller_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_address_b = normalize_omp_fn3_memory_controller_address_b_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_address_b = normalize_omp_fn3_memory_controller_address_b_inst1;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_write_enable_b = normalize_omp_fn3_memory_controller_write_enable_b_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_write_enable_b = normalize_omp_fn3_memory_controller_write_enable_b_inst1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_in_b = normalize_omp_fn3_memory_controller_in_b_inst0;
	end
	/* legup_omp_normalize_omp_fn3: %entry*/
	/*   tail call fastcc void @normalize._omp_fn.3(i8* %.omp_data_i), !TYPE !1, !NUMTHREADS !2, !THREADID !3*/
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_in_b = normalize_omp_fn3_memory_controller_in_b_inst1;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_0 == 1'd1))) begin
		memory_controller_size_b = normalize_omp_fn3_memory_controller_size_b_inst0;
	end
	if (((cur_state == LEGUP_function_call_2) & (normalize_omp_fn3_memory_controller_gnt_1 == 1'd1))) begin
		memory_controller_size_b = normalize_omp_fn3_memory_controller_size_b_inst1;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [9:0] LEGUP_0 = 10'd0;
parameter [9:0] LEGUP_F_main_BB_entry_1 = 10'd1;
parameter [9:0] LEGUP_F_main_BB_entry_2 = 10'd2;
parameter [9:0] LEGUP_F_main_BB_entry_3 = 10'd3;
parameter [9:0] LEGUP_F_main_BB_entry_4 = 10'd4;
parameter [9:0] LEGUP_F_main_BB_entry_5 = 10'd5;
parameter [9:0] LEGUP_F_main_BB_entry_6 = 10'd6;
parameter [9:0] LEGUP_F_main_BB_entry_7 = 10'd7;
parameter [9:0] LEGUP_F_main_BB_entry_8 = 10'd8;
parameter [9:0] LEGUP_F_main_BB_entry_9 = 10'd9;
parameter [9:0] LEGUP_F_main_BB_entry_10 = 10'd10;
parameter [9:0] LEGUP_F_main_BB_entry_11 = 10'd11;
parameter [9:0] LEGUP_F_main_BB_entry_12 = 10'd12;
parameter [9:0] LEGUP_F_main_BB_entry_13 = 10'd13;
parameter [9:0] LEGUP_F_main_BB_entry_14 = 10'd14;
parameter [9:0] LEGUP_F_main_BB_entry_15 = 10'd15;
parameter [9:0] LEGUP_F_main_BB_entry_16 = 10'd16;
parameter [9:0] LEGUP_F_main_BB_entry_17 = 10'd17;
parameter [9:0] LEGUP_F_main_BB_entry_18 = 10'd18;
parameter [9:0] LEGUP_F_main_BB_entry_19 = 10'd19;
parameter [9:0] LEGUP_F_main_BB_entry_20 = 10'd20;
parameter [9:0] LEGUP_F_main_BB_entry_21 = 10'd21;
parameter [9:0] LEGUP_F_main_BB_entry_22 = 10'd22;
parameter [9:0] LEGUP_F_main_BB_entry_23 = 10'd23;
parameter [9:0] LEGUP_F_main_BB_entry_24 = 10'd24;
parameter [9:0] LEGUP_F_main_BB_entry_25 = 10'd25;
parameter [9:0] LEGUP_F_main_BB_entry_26 = 10'd26;
parameter [9:0] LEGUP_F_main_BB_entry_27 = 10'd27;
parameter [9:0] LEGUP_F_main_BB_entry_28 = 10'd28;
parameter [9:0] LEGUP_F_main_BB_entry_29 = 10'd29;
parameter [9:0] LEGUP_F_main_BB_entry_30 = 10'd30;
parameter [9:0] LEGUP_F_main_BB_entry_31 = 10'd31;
parameter [9:0] LEGUP_F_main_BB_entry_32 = 10'd32;
parameter [9:0] LEGUP_F_main_BB_entry_33 = 10'd33;
parameter [9:0] LEGUP_F_main_BB_entry_34 = 10'd34;
parameter [9:0] LEGUP_F_main_BB_entry_35 = 10'd35;
parameter [9:0] LEGUP_F_main_BB_entry_36 = 10'd36;
parameter [9:0] LEGUP_F_main_BB_entry_37 = 10'd37;
parameter [9:0] LEGUP_F_main_BB_entry_38 = 10'd38;
parameter [9:0] LEGUP_F_main_BB_entry_39 = 10'd39;
parameter [9:0] LEGUP_F_main_BB_entry_40 = 10'd40;
parameter [9:0] LEGUP_F_main_BB_entry_41 = 10'd41;
parameter [9:0] LEGUP_F_main_BB_entry_42 = 10'd42;
parameter [9:0] LEGUP_F_main_BB_entry_43 = 10'd43;
parameter [9:0] LEGUP_F_main_BB__7ii_44 = 10'd44;
parameter [9:0] LEGUP_F_main_BB__7ii_45 = 10'd45;
parameter [9:0] LEGUP_F_main_BB__7ii_46 = 10'd46;
parameter [9:0] LEGUP_F_main_BB__7ii_47 = 10'd47;
parameter [9:0] LEGUP_F_main_BB__7ii_48 = 10'd48;
parameter [9:0] LEGUP_F_main_BB__7ii_49 = 10'd49;
parameter [9:0] LEGUP_F_main_BB__7ii_50 = 10'd50;
parameter [9:0] LEGUP_F_main_BB__7ii_51 = 10'd51;
parameter [9:0] LEGUP_F_main_BB__7ii_52 = 10'd52;
parameter [9:0] LEGUP_F_main_BB__7ii_53 = 10'd53;
parameter [9:0] LEGUP_F_main_BB__7ii_54 = 10'd54;
parameter [9:0] LEGUP_F_main_BB__7ii_55 = 10'd55;
parameter [9:0] LEGUP_F_main_BB__7ii_56 = 10'd56;
parameter [9:0] LEGUP_F_main_BB__7ii_57 = 10'd57;
parameter [9:0] LEGUP_F_main_BB__7ii_58 = 10'd58;
parameter [9:0] LEGUP_F_main_BB__8ii_59 = 10'd59;
parameter [9:0] LEGUP_F_main_BB__8ii_60 = 10'd60;
parameter [9:0] LEGUP_F_main_BB__8ii_61 = 10'd61;
parameter [9:0] LEGUP_F_main_BB__8ii_62 = 10'd62;
parameter [9:0] LEGUP_F_main_BB__8ii_63 = 10'd63;
parameter [9:0] LEGUP_F_main_BB__8ii_64 = 10'd64;
parameter [9:0] LEGUP_F_main_BB__8ii_65 = 10'd65;
parameter [9:0] LEGUP_F_main_BB__8ii_66 = 10'd66;
parameter [9:0] LEGUP_F_main_BB__8ii_67 = 10'd67;
parameter [9:0] LEGUP_F_main_BB__8ii_68 = 10'd68;
parameter [9:0] LEGUP_F_main_BB__8ii_69 = 10'd69;
parameter [9:0] LEGUP_F_main_BB__8ii_70 = 10'd70;
parameter [9:0] LEGUP_F_main_BB__8ii_71 = 10'd71;
parameter [9:0] LEGUP_F_main_BB__8ii_72 = 10'd72;
parameter [9:0] LEGUP_F_main_BB__8ii_73 = 10'd73;
parameter [9:0] LEGUP_F_main_BB__8ii_74 = 10'd74;
parameter [9:0] LEGUP_F_main_BB__9ii_75 = 10'd75;
parameter [9:0] LEGUP_F_main_BB__11ii_76 = 10'd76;
parameter [9:0] LEGUP_F_main_BB__11ii_77 = 10'd77;
parameter [9:0] LEGUP_F_main_BB__11ii_78 = 10'd78;
parameter [9:0] LEGUP_F_main_BB__11ii_79 = 10'd79;
parameter [9:0] LEGUP_F_main_BB__11ii_80 = 10'd80;
parameter [9:0] LEGUP_F_main_BB__11ii_81 = 10'd81;
parameter [9:0] LEGUP_F_main_BB__11ii_82 = 10'd82;
parameter [9:0] LEGUP_F_main_BB__11ii_83 = 10'd83;
parameter [9:0] LEGUP_F_main_BB__11ii_84 = 10'd84;
parameter [9:0] LEGUP_F_main_BB__11ii_85 = 10'd85;
parameter [9:0] LEGUP_F_main_BB__11ii_86 = 10'd86;
parameter [9:0] LEGUP_F_main_BB__11ii_87 = 10'd87;
parameter [9:0] LEGUP_F_main_BB__11ii_88 = 10'd88;
parameter [9:0] LEGUP_F_main_BB__11ii_89 = 10'd89;
parameter [9:0] LEGUP_F_main_BB__11ii_90 = 10'd90;
parameter [9:0] LEGUP_F_main_BB__12ii_91 = 10'd91;
parameter [9:0] LEGUP_F_main_BB__12ii_92 = 10'd92;
parameter [9:0] LEGUP_F_main_BB__12ii_93 = 10'd93;
parameter [9:0] LEGUP_F_main_BB__12ii_94 = 10'd94;
parameter [9:0] LEGUP_F_main_BB__12ii_95 = 10'd95;
parameter [9:0] LEGUP_F_main_BB__12ii_96 = 10'd96;
parameter [9:0] LEGUP_F_main_BB__12ii_97 = 10'd97;
parameter [9:0] LEGUP_F_main_BB__12ii_98 = 10'd98;
parameter [9:0] LEGUP_F_main_BB__12ii_99 = 10'd99;
parameter [9:0] LEGUP_F_main_BB__12ii_100 = 10'd100;
parameter [9:0] LEGUP_F_main_BB__12ii_101 = 10'd101;
parameter [9:0] LEGUP_F_main_BB__12ii_102 = 10'd102;
parameter [9:0] LEGUP_F_main_BB__12ii_103 = 10'd103;
parameter [9:0] LEGUP_F_main_BB__12ii_104 = 10'd104;
parameter [9:0] LEGUP_F_main_BB__12ii_105 = 10'd105;
parameter [9:0] LEGUP_F_main_BB__13ii_106 = 10'd106;
parameter [9:0] LEGUP_F_main_BB__15ii_107 = 10'd107;
parameter [9:0] LEGUP_F_main_BB__15ii_108 = 10'd108;
parameter [9:0] LEGUP_F_main_BB__15ii_109 = 10'd109;
parameter [9:0] LEGUP_F_main_BB__15ii_110 = 10'd110;
parameter [9:0] LEGUP_F_main_BB__15ii_111 = 10'd111;
parameter [9:0] LEGUP_F_main_BB__15ii_112 = 10'd112;
parameter [9:0] LEGUP_F_main_BB__15ii_113 = 10'd113;
parameter [9:0] LEGUP_F_main_BB__15ii_114 = 10'd114;
parameter [9:0] LEGUP_F_main_BB__15ii_115 = 10'd115;
parameter [9:0] LEGUP_F_main_BB__15ii_116 = 10'd116;
parameter [9:0] LEGUP_F_main_BB__15ii_117 = 10'd117;
parameter [9:0] LEGUP_F_main_BB__15ii_118 = 10'd118;
parameter [9:0] LEGUP_F_main_BB__15ii_119 = 10'd119;
parameter [9:0] LEGUP_F_main_BB__15ii_120 = 10'd120;
parameter [9:0] LEGUP_F_main_BB__15ii_121 = 10'd121;
parameter [9:0] LEGUP_F_main_BB__16ii_122 = 10'd122;
parameter [9:0] LEGUP_F_main_BB__16ii_123 = 10'd123;
parameter [9:0] LEGUP_F_main_BB__16ii_124 = 10'd124;
parameter [9:0] LEGUP_F_main_BB__16ii_125 = 10'd125;
parameter [9:0] LEGUP_F_main_BB__16ii_126 = 10'd126;
parameter [9:0] LEGUP_F_main_BB__16ii_127 = 10'd127;
parameter [9:0] LEGUP_F_main_BB__16ii_128 = 10'd128;
parameter [9:0] LEGUP_F_main_BB__16ii_129 = 10'd129;
parameter [9:0] LEGUP_F_main_BB__16ii_130 = 10'd130;
parameter [9:0] LEGUP_F_main_BB__16ii_131 = 10'd131;
parameter [9:0] LEGUP_F_main_BB__16ii_132 = 10'd132;
parameter [9:0] LEGUP_F_main_BB__16ii_133 = 10'd133;
parameter [9:0] LEGUP_F_main_BB__16ii_134 = 10'd134;
parameter [9:0] LEGUP_F_main_BB__16ii_135 = 10'd135;
parameter [9:0] LEGUP_F_main_BB__16ii_136 = 10'd136;
parameter [9:0] LEGUP_F_main_BB__16ii_137 = 10'd137;
parameter [9:0] LEGUP_F_main_BB__16ii_138 = 10'd138;
parameter [9:0] LEGUP_F_main_BB__16ii_139 = 10'd139;
parameter [9:0] LEGUP_F_main_BB__16ii_140 = 10'd140;
parameter [9:0] LEGUP_F_main_BB__16ii_141 = 10'd141;
parameter [9:0] LEGUP_F_main_BB__16ii_142 = 10'd142;
parameter [9:0] LEGUP_F_main_BB__16ii_143 = 10'd143;
parameter [9:0] LEGUP_F_main_BB__16ii_144 = 10'd144;
parameter [9:0] LEGUP_F_main_BB__16ii_145 = 10'd145;
parameter [9:0] LEGUP_F_main_BB__16ii_146 = 10'd146;
parameter [9:0] LEGUP_F_main_BB__16ii_147 = 10'd147;
parameter [9:0] LEGUP_F_main_BB__16ii_148 = 10'd148;
parameter [9:0] LEGUP_F_main_BB__16ii_149 = 10'd149;
parameter [9:0] LEGUP_F_main_BB__16ii_150 = 10'd150;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_151 = 10'd151;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_152 = 10'd152;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_153 = 10'd153;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_154 = 10'd154;
parameter [9:0] LEGUP_F_main_BB__3ipreheader_155 = 10'd155;
parameter [9:0] LEGUP_F_main_BB__3i_156 = 10'd156;
parameter [9:0] LEGUP_F_main_BB__3i_157 = 10'd157;
parameter [9:0] LEGUP_F_main_BB__3i_158 = 10'd158;
parameter [9:0] LEGUP_F_main_BB__3i_159 = 10'd159;
parameter [9:0] LEGUP_F_main_BB__3i_160 = 10'd160;
parameter [9:0] LEGUP_F_main_BB__3i_161 = 10'd161;
parameter [9:0] LEGUP_F_main_BB__3ii_162 = 10'd162;
parameter [9:0] LEGUP_F_main_BB__3ii_163 = 10'd163;
parameter [9:0] LEGUP_F_main_BB__3ii_164 = 10'd164;
parameter [9:0] LEGUP_F_main_BB__3ii_165 = 10'd165;
parameter [9:0] LEGUP_F_main_BB__3ii_166 = 10'd166;
parameter [9:0] LEGUP_F_main_BB__3ii_167 = 10'd167;
parameter [9:0] LEGUP_F_main_BB__3ii_168 = 10'd168;
parameter [9:0] LEGUP_F_main_BB__3ii_169 = 10'd169;
parameter [9:0] LEGUP_F_main_BB__3ii_170 = 10'd170;
parameter [9:0] LEGUP_F_main_BB__3ii_171 = 10'd171;
parameter [9:0] LEGUP_F_main_BB__3ii_172 = 10'd172;
parameter [9:0] LEGUP_F_main_BB__3ii_173 = 10'd173;
parameter [9:0] LEGUP_F_main_BB__3ii_174 = 10'd174;
parameter [9:0] LEGUP_F_main_BB__3ii_175 = 10'd175;
parameter [9:0] LEGUP_F_main_BB__3ii_176 = 10'd176;
parameter [9:0] LEGUP_F_main_BB__3ii_177 = 10'd177;
parameter [9:0] LEGUP_F_main_BB__3ii_178 = 10'd178;
parameter [9:0] LEGUP_F_main_BB__3ii_179 = 10'd179;
parameter [9:0] LEGUP_F_main_BB__3ii_180 = 10'd180;
parameter [9:0] LEGUP_F_main_BB__3ii_181 = 10'd181;
parameter [9:0] LEGUP_F_main_BB__3ii_182 = 10'd182;
parameter [9:0] LEGUP_F_main_BB__3ii_183 = 10'd183;
parameter [9:0] LEGUP_F_main_BB__3ii_184 = 10'd184;
parameter [9:0] LEGUP_F_main_BB__3ii_185 = 10'd185;
parameter [9:0] LEGUP_F_main_BB__3ii_186 = 10'd186;
parameter [9:0] LEGUP_F_main_BB__3ii_187 = 10'd187;
parameter [9:0] LEGUP_F_main_BB__3ii_188 = 10'd188;
parameter [9:0] LEGUP_F_main_BB__3ii_189 = 10'd189;
parameter [9:0] LEGUP_F_main_BB__3ii_190 = 10'd190;
parameter [9:0] LEGUP_F_main_BB__3ii_191 = 10'd191;
parameter [9:0] LEGUP_F_main_BB__3ii_192 = 10'd192;
parameter [9:0] LEGUP_F_main_BB__3ii_193 = 10'd193;
parameter [9:0] LEGUP_F_main_BB__3ii_194 = 10'd194;
parameter [9:0] LEGUP_F_main_BB__3ii_195 = 10'd195;
parameter [9:0] LEGUP_F_main_BB__3ii_196 = 10'd196;
parameter [9:0] LEGUP_F_main_BB__3ii_197 = 10'd197;
parameter [9:0] LEGUP_F_main_BB__3ii_198 = 10'd198;
parameter [9:0] LEGUP_F_main_BB__3ii_199 = 10'd199;
parameter [9:0] LEGUP_F_main_BB__3ii_200 = 10'd200;
parameter [9:0] LEGUP_F_main_BB__3ii_201 = 10'd201;
parameter [9:0] LEGUP_F_main_BB__3ii_202 = 10'd202;
parameter [9:0] LEGUP_F_main_BB__3ii_203 = 10'd203;
parameter [9:0] LEGUP_F_main_BB__3ii_204 = 10'd204;
parameter [9:0] LEGUP_F_main_BB__9preheaderii_205 = 10'd205;
parameter [9:0] LEGUP_F_main_BB__9preheaderii_206 = 10'd206;
parameter [9:0] LEGUP_F_main_BB__10ii_207 = 10'd207;
parameter [9:0] LEGUP_F_main_BB__10ii_208 = 10'd208;
parameter [9:0] LEGUP_F_main_BB__10ii_209 = 10'd209;
parameter [9:0] LEGUP_F_main_BB__10ii_210 = 10'd210;
parameter [9:0] LEGUP_F_main_BB__4iii_211 = 10'd211;
parameter [9:0] LEGUP_F_main_BB__4iii_212 = 10'd212;
parameter [9:0] LEGUP_F_main_BB__7iii_213 = 10'd213;
parameter [9:0] LEGUP_F_main_BB__7iii_214 = 10'd214;
parameter [9:0] LEGUP_F_main_BB__10iii_215 = 10'd215;
parameter [9:0] LEGUP_F_main_BB__10iii_216 = 10'd216;
parameter [9:0] LEGUP_F_main_BB__13iii_217 = 10'd217;
parameter [9:0] LEGUP_F_main_BB__13iii_218 = 10'd218;
parameter [9:0] LEGUP_F_main_BB__16iii_219 = 10'd219;
parameter [9:0] LEGUP_F_main_BB__16iii_220 = 10'd220;
parameter [9:0] LEGUP_F_main_BB__19iii_221 = 10'd221;
parameter [9:0] LEGUP_F_main_BB__19iii_222 = 10'd222;
parameter [9:0] LEGUP_F_main_BB__22iii_223 = 10'd223;
parameter [9:0] LEGUP_F_main_BB__22iii_224 = 10'd224;
parameter [9:0] LEGUP_F_main_BB__25iii_225 = 10'd225;
parameter [9:0] LEGUP_F_main_BB__25iii_226 = 10'd226;
parameter [9:0] LEGUP_F_main_BB__28iii_227 = 10'd227;
parameter [9:0] LEGUP_F_main_BB__28iii_228 = 10'd228;
parameter [9:0] LEGUP_F_main_BB__31iii_229 = 10'd229;
parameter [9:0] LEGUP_F_main_BB__31iii_230 = 10'd230;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_231 = 10'd231;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_232 = 10'd232;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_233 = 10'd233;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_234 = 10'd234;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_235 = 10'd235;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_236 = 10'd236;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_237 = 10'd237;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_238 = 10'd238;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_239 = 10'd239;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_240 = 10'd240;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_241 = 10'd241;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_242 = 10'd242;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_243 = 10'd243;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_244 = 10'd244;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_245 = 10'd245;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_246 = 10'd246;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_247 = 10'd247;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_248 = 10'd248;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_249 = 10'd249;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_250 = 10'd250;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_251 = 10'd251;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_252 = 10'd252;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_253 = 10'd253;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_254 = 10'd254;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_255 = 10'd255;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_256 = 10'd256;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_257 = 10'd257;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_258 = 10'd258;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_259 = 10'd259;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_260 = 10'd260;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_261 = 10'd261;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_262 = 10'd262;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_263 = 10'd263;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_264 = 10'd264;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_265 = 10'd265;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_266 = 10'd266;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_267 = 10'd267;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_268 = 10'd268;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_269 = 10'd269;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_270 = 10'd270;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_271 = 10'd271;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_272 = 10'd272;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_273 = 10'd273;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_274 = 10'd274;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_275 = 10'd275;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_276 = 10'd276;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_277 = 10'd277;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_278 = 10'd278;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_279 = 10'd279;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_280 = 10'd280;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_281 = 10'd281;
parameter [9:0] LEGUP_F_main_BB__12i14i_282 = 10'd282;
parameter [9:0] LEGUP_F_main_BB__12i14i_283 = 10'd283;
parameter [9:0] LEGUP_F_main_BB__15i15i_284 = 10'd284;
parameter [9:0] LEGUP_F_main_BB__15i15i_285 = 10'd285;
parameter [9:0] LEGUP_F_main_BB__15i15i_286 = 10'd286;
parameter [9:0] LEGUP_F_main_BB__15i15i_287 = 10'd287;
parameter [9:0] LEGUP_F_main_BB__4i3ii_288 = 10'd288;
parameter [9:0] LEGUP_F_main_BB__4i3ii_289 = 10'd289;
parameter [9:0] LEGUP_F_main_BB__7i5ii_290 = 10'd290;
parameter [9:0] LEGUP_F_main_BB__7i5ii_291 = 10'd291;
parameter [9:0] LEGUP_F_main_BB__10i7ii_292 = 10'd292;
parameter [9:0] LEGUP_F_main_BB__10i7ii_293 = 10'd293;
parameter [9:0] LEGUP_F_main_BB__13i9ii_294 = 10'd294;
parameter [9:0] LEGUP_F_main_BB__13i9ii_295 = 10'd295;
parameter [9:0] LEGUP_F_main_BB__16i11ii_296 = 10'd296;
parameter [9:0] LEGUP_F_main_BB__16i11ii_297 = 10'd297;
parameter [9:0] LEGUP_F_main_BB__16i11ii_298 = 10'd298;
parameter [9:0] LEGUP_F_main_BB__16i11ii_299 = 10'd299;
parameter [9:0] LEGUP_F_main_BB__19i13ii_300 = 10'd300;
parameter [9:0] LEGUP_F_main_BB__19i13ii_301 = 10'd301;
parameter [9:0] LEGUP_F_main_BB__22i15ii_302 = 10'd302;
parameter [9:0] LEGUP_F_main_BB__22i15ii_303 = 10'd303;
parameter [9:0] LEGUP_F_main_BB__25i17ii_304 = 10'd304;
parameter [9:0] LEGUP_F_main_BB__25i17ii_305 = 10'd305;
parameter [9:0] LEGUP_F_main_BB__28i19ii_306 = 10'd306;
parameter [9:0] LEGUP_F_main_BB__28i19ii_307 = 10'd307;
parameter [9:0] LEGUP_F_main_BB__31i20ii_308 = 10'd308;
parameter [9:0] LEGUP_F_main_BB__31i20ii_309 = 10'd309;
parameter [9:0] LEGUP_F_main_BB__34iii_310 = 10'd310;
parameter [9:0] LEGUP_F_main_BB__34iii_311 = 10'd311;
parameter [9:0] LEGUP_F_main_BB__37iii_312 = 10'd312;
parameter [9:0] LEGUP_F_main_BB__37iii_313 = 10'd313;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_314 = 10'd314;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_315 = 10'd315;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_316 = 10'd316;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_317 = 10'd317;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_318 = 10'd318;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_319 = 10'd319;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_320 = 10'd320;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_321 = 10'd321;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_322 = 10'd322;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_323 = 10'd323;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_324 = 10'd324;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_325 = 10'd325;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_326 = 10'd326;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_327 = 10'd327;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_328 = 10'd328;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_329 = 10'd329;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_330 = 10'd330;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_331 = 10'd331;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_332 = 10'd332;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_333 = 10'd333;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_334 = 10'd334;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_335 = 10'd335;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_336 = 10'd336;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_337 = 10'd337;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_338 = 10'd338;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_339 = 10'd339;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_340 = 10'd340;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_341 = 10'd341;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_342 = 10'd342;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_343 = 10'd343;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_344 = 10'd344;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_345 = 10'd345;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_346 = 10'd346;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_347 = 10'd347;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_348 = 10'd348;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_349 = 10'd349;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_350 = 10'd350;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_351 = 10'd351;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_352 = 10'd352;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_353 = 10'd353;
parameter [9:0] LEGUP_F_main_BB__101ii_354 = 10'd354;
parameter [9:0] LEGUP_F_main_BB__101ii_355 = 10'd355;
parameter [9:0] LEGUP_F_main_BB__101ii_356 = 10'd356;
parameter [9:0] LEGUP_F_main_BB__101ii_357 = 10'd357;
parameter [9:0] LEGUP_F_main_BB__4i2ii_358 = 10'd358;
parameter [9:0] LEGUP_F_main_BB__4i2ii_359 = 10'd359;
parameter [9:0] LEGUP_F_main_BB__7i4ii_360 = 10'd360;
parameter [9:0] LEGUP_F_main_BB__7i4ii_361 = 10'd361;
parameter [9:0] LEGUP_F_main_BB__10i6ii_362 = 10'd362;
parameter [9:0] LEGUP_F_main_BB__10i6ii_363 = 10'd363;
parameter [9:0] LEGUP_F_main_BB__13i8ii_364 = 10'd364;
parameter [9:0] LEGUP_F_main_BB__13i8ii_365 = 10'd365;
parameter [9:0] LEGUP_F_main_BB__16i10ii_366 = 10'd366;
parameter [9:0] LEGUP_F_main_BB__16i10ii_367 = 10'd367;
parameter [9:0] LEGUP_F_main_BB__19i12ii_368 = 10'd368;
parameter [9:0] LEGUP_F_main_BB__19i12ii_369 = 10'd369;
parameter [9:0] LEGUP_F_main_BB__22i14ii_370 = 10'd370;
parameter [9:0] LEGUP_F_main_BB__22i14ii_371 = 10'd371;
parameter [9:0] LEGUP_F_main_BB__25i16ii_372 = 10'd372;
parameter [9:0] LEGUP_F_main_BB__25i16ii_373 = 10'd373;
parameter [9:0] LEGUP_F_main_BB__28i18ii_374 = 10'd374;
parameter [9:0] LEGUP_F_main_BB__28i18ii_375 = 10'd375;
parameter [9:0] LEGUP_F_main_BB__31i22ii_376 = 10'd376;
parameter [9:0] LEGUP_F_main_BB__31i22ii_377 = 10'd377;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_378 = 10'd378;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_379 = 10'd379;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_380 = 10'd380;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_381 = 10'd381;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_382 = 10'd382;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_383 = 10'd383;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_384 = 10'd384;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_385 = 10'd385;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_386 = 10'd386;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_387 = 10'd387;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_388 = 10'd388;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_389 = 10'd389;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_390 = 10'd390;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_391 = 10'd391;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_392 = 10'd392;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_393 = 10'd393;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_394 = 10'd394;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_395 = 10'd395;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_396 = 10'd396;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_397 = 10'd397;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_398 = 10'd398;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_399 = 10'd399;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_400 = 10'd400;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_401 = 10'd401;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_402 = 10'd402;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_403 = 10'd403;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_404 = 10'd404;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_405 = 10'd405;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_406 = 10'd406;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_407 = 10'd407;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_408 = 10'd408;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_409 = 10'd409;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_410 = 10'd410;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_411 = 10'd411;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_412 = 10'd412;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_413 = 10'd413;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_414 = 10'd414;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_415 = 10'd415;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_416 = 10'd416;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_417 = 10'd417;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_418 = 10'd418;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_419 = 10'd419;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_420 = 10'd420;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_421 = 10'd421;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_422 = 10'd422;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_423 = 10'd423;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_424 = 10'd424;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_425 = 10'd425;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_426 = 10'd426;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_427 = 10'd427;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit23ii_428 = 10'd428;
parameter [9:0] LEGUP_F_main_BB__121ii_429 = 10'd429;
parameter [9:0] LEGUP_F_main_BB__121ii_430 = 10'd430;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_431 = 10'd431;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_432 = 10'd432;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_434 = 10'd434;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_436 = 10'd436;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_438 = 10'd438;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_439 = 10'd439;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_440 = 10'd440;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_441 = 10'd441;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_442 = 10'd442;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_443 = 10'd443;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_444 = 10'd444;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_445 = 10'd445;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_446 = 10'd446;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_447 = 10'd447;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_448 = 10'd448;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_449 = 10'd449;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_450 = 10'd450;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_451 = 10'd451;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_452 = 10'd452;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_453 = 10'd453;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_454 = 10'd454;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_455 = 10'd455;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_456 = 10'd456;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_457 = 10'd457;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_458 = 10'd458;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_459 = 10'd459;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_460 = 10'd460;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_461 = 10'd461;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_462 = 10'd462;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_463 = 10'd463;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_464 = 10'd464;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_465 = 10'd465;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_466 = 10'd466;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_467 = 10'd467;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_468 = 10'd468;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_469 = 10'd469;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_470 = 10'd470;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_471 = 10'd471;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_472 = 10'd472;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_473 = 10'd473;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_474 = 10'd474;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_475 = 10'd475;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_476 = 10'd476;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_477 = 10'd477;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_478 = 10'd478;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_479 = 10'd479;
parameter [9:0] LEGUP_F_main_BB__156_480 = 10'd480;
parameter [9:0] LEGUP_F_main_BB__156_481 = 10'd481;
parameter [9:0] LEGUP_F_main_BB__156_482 = 10'd482;
parameter [9:0] LEGUP_F_main_BB__156_483 = 10'd483;
parameter [9:0] LEGUP_F_main_BB__156_484 = 10'd484;
parameter [9:0] LEGUP_F_main_BB__156_485 = 10'd485;
parameter [9:0] LEGUP_F_main_BB__156_486 = 10'd486;
parameter [9:0] LEGUP_F_main_BB__156_487 = 10'd487;
parameter [9:0] LEGUP_F_main_BB__156_488 = 10'd488;
parameter [9:0] LEGUP_F_main_BB__156_489 = 10'd489;
parameter [9:0] LEGUP_F_main_BB__156_490 = 10'd490;
parameter [9:0] LEGUP_F_main_BB__156_491 = 10'd491;
parameter [9:0] LEGUP_F_main_BB__156_492 = 10'd492;
parameter [9:0] LEGUP_F_main_BB__156_493 = 10'd493;
parameter [9:0] LEGUP_F_main_BB__156_494 = 10'd494;
parameter [9:0] LEGUP_F_main_BB__156_495 = 10'd495;
parameter [9:0] LEGUP_F_main_BB__156_496 = 10'd496;
parameter [9:0] LEGUP_F_main_BB__156_497 = 10'd497;
parameter [9:0] LEGUP_F_main_BB__156_498 = 10'd498;
parameter [9:0] LEGUP_F_main_BB__156_499 = 10'd499;
parameter [9:0] LEGUP_F_main_BB__156_500 = 10'd500;
parameter [9:0] LEGUP_F_main_BB__156_501 = 10'd501;
parameter [9:0] LEGUP_F_main_BB__156_502 = 10'd502;
parameter [9:0] LEGUP_F_main_BB__156_503 = 10'd503;
parameter [9:0] LEGUP_F_main_BB__156_504 = 10'd504;
parameter [9:0] LEGUP_F_main_BB__156_505 = 10'd505;
parameter [9:0] LEGUP_F_main_BB__159_506 = 10'd506;
parameter [9:0] LEGUP_F_main_BB__161_507 = 10'd507;
parameter [9:0] LEGUP_F_main_BB__163_508 = 10'd508;
parameter [9:0] LEGUP_F_main_BB__163_509 = 10'd509;
parameter [9:0] LEGUP_F_main_BB__163_510 = 10'd510;
parameter [9:0] LEGUP_F_main_BB__163_511 = 10'd511;
parameter [9:0] LEGUP_F_main_BB__163_512 = 10'd512;
parameter [9:0] LEGUP_F_main_BB__163_513 = 10'd513;
parameter [9:0] LEGUP_F_main_BB__163_514 = 10'd514;
parameter [9:0] LEGUP_F_main_BB__163_515 = 10'd515;
parameter [9:0] LEGUP_F_main_BB__163_516 = 10'd516;
parameter [9:0] LEGUP_F_main_BB__163_517 = 10'd517;
parameter [9:0] LEGUP_F_main_BB__163_518 = 10'd518;
parameter [9:0] LEGUP_F_main_BB__163_519 = 10'd519;
parameter [9:0] LEGUP_F_main_BB__163_520 = 10'd520;
parameter [9:0] LEGUP_F_main_BB__163_521 = 10'd521;
parameter [9:0] LEGUP_F_main_BB__163_522 = 10'd522;
parameter [9:0] LEGUP_F_main_BB__163_523 = 10'd523;
parameter [9:0] LEGUP_F_main_BB__163_524 = 10'd524;
parameter [9:0] LEGUP_F_main_BB__163_525 = 10'd525;
parameter [9:0] LEGUP_F_main_BB__163_526 = 10'd526;
parameter [9:0] LEGUP_F_main_BB__163_527 = 10'd527;
parameter [9:0] LEGUP_F_main_BB__163_528 = 10'd528;
parameter [9:0] LEGUP_F_main_BB__163_529 = 10'd529;
parameter [9:0] LEGUP_F_main_BB__163_530 = 10'd530;
parameter [9:0] LEGUP_F_main_BB__163_531 = 10'd531;
parameter [9:0] LEGUP_F_main_BB__163_532 = 10'd532;
parameter [9:0] LEGUP_F_main_BB__163_533 = 10'd533;
parameter [9:0] LEGUP_F_main_BB__163_534 = 10'd534;
parameter [9:0] LEGUP_F_main_BB__163_535 = 10'd535;
parameter [9:0] LEGUP_F_main_BB__163_536 = 10'd536;
parameter [9:0] LEGUP_F_main_BB__163_537 = 10'd537;
parameter [9:0] LEGUP_F_main_BB__163_538 = 10'd538;
parameter [9:0] LEGUP_F_main_BB__163_539 = 10'd539;
parameter [9:0] LEGUP_F_main_BB__163_540 = 10'd540;
parameter [9:0] LEGUP_F_main_BB__163_541 = 10'd541;
parameter [9:0] LEGUP_F_main_BB__163_542 = 10'd542;
parameter [9:0] LEGUP_F_main_BB__163_543 = 10'd543;
parameter [9:0] LEGUP_F_main_BB__163_544 = 10'd544;
parameter [9:0] LEGUP_F_main_BB__163_545 = 10'd545;
parameter [9:0] LEGUP_F_main_BB__163_546 = 10'd546;
parameter [9:0] LEGUP_F_main_BB__163_547 = 10'd547;
parameter [9:0] LEGUP_F_main_BB__163_548 = 10'd548;
parameter [9:0] LEGUP_F_main_BB__163_549 = 10'd549;
parameter [9:0] LEGUP_F_main_BB__163_550 = 10'd550;
parameter [9:0] LEGUP_F_main_BB__163_551 = 10'd551;
parameter [9:0] LEGUP_F_main_BB__163_552 = 10'd552;
parameter [9:0] LEGUP_F_main_BB__163_553 = 10'd553;
parameter [9:0] LEGUP_F_main_BB__163_554 = 10'd554;
parameter [9:0] LEGUP_F_main_BB__163_555 = 10'd555;
parameter [9:0] LEGUP_F_main_BB__166_556 = 10'd556;
parameter [9:0] LEGUP_F_main_BB_preheader_557 = 10'd557;
parameter [9:0] LEGUP_F_main_BB__169_558 = 10'd558;
parameter [9:0] LEGUP_F_main_BB__173_559 = 10'd559;
parameter [9:0] LEGUP_F_main_BB__176_560 = 10'd560;
parameter [9:0] LEGUP_F_main_BB__179_561 = 10'd561;
parameter [9:0] LEGUP_F_main_BB__187_562 = 10'd562;
parameter [9:0] LEGUP_F_main_BB__190_563 = 10'd563;
parameter [9:0] LEGUP_F_main_BB__193_564 = 10'd564;
parameter [9:0] LEGUP_F_main_BB__197_565 = 10'd565;
parameter [9:0] LEGUP_F_main_BB__200_566 = 10'd566;
parameter [9:0] LEGUP_F_main_BB__203_567 = 10'd567;
parameter [9:0] LEGUP_F_main_BB__206_568 = 10'd568;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_569 = 10'd569;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_570 = 10'd570;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_572 = 10'd572;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_573 = 10'd573;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_574 = 10'd574;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_575 = 10'd575;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_576 = 10'd576;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_577 = 10'd577;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_578 = 10'd578;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_579 = 10'd579;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_580 = 10'd580;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_581 = 10'd581;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_582 = 10'd582;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_583 = 10'd583;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_584 = 10'd584;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_585 = 10'd585;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_586 = 10'd586;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_587 = 10'd587;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_588 = 10'd588;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_589 = 10'd589;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_590 = 10'd590;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_591 = 10'd591;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_592 = 10'd592;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_593 = 10'd593;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_594 = 10'd594;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_595 = 10'd595;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_596 = 10'd596;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_597 = 10'd597;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_598 = 10'd598;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_599 = 10'd599;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_600 = 10'd600;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_601 = 10'd601;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_602 = 10'd602;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_603 = 10'd603;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_604 = 10'd604;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_605 = 10'd605;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_606 = 10'd606;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_607 = 10'd607;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_608 = 10'd608;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_609 = 10'd609;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_610 = 10'd610;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_611 = 10'd611;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_612 = 10'd612;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_613 = 10'd613;
parameter [9:0] LEGUP_F_main_BB_sqrtfexit_614 = 10'd614;
parameter [9:0] LEGUP_F_main_BB__7i1i_615 = 10'd615;
parameter [9:0] LEGUP_F_main_BB__7i1i_616 = 10'd616;
parameter [9:0] LEGUP_F_main_BB__7i1i_617 = 10'd617;
parameter [9:0] LEGUP_F_main_BB__7i1i_618 = 10'd618;
parameter [9:0] LEGUP_F_main_BB__7i1i_619 = 10'd619;
parameter [9:0] LEGUP_F_main_BB__7i1i_620 = 10'd620;
parameter [9:0] LEGUP_F_main_BB__7i1i_621 = 10'd621;
parameter [9:0] LEGUP_F_main_BB__7i1i_622 = 10'd622;
parameter [9:0] LEGUP_F_main_BB__7i1i_623 = 10'd623;
parameter [9:0] LEGUP_F_main_BB__7i1i_624 = 10'd624;
parameter [9:0] LEGUP_F_main_BB__7i1i_625 = 10'd625;
parameter [9:0] LEGUP_F_main_BB__7i1i_626 = 10'd626;
parameter [9:0] LEGUP_F_main_BB__7i1i_627 = 10'd627;
parameter [9:0] LEGUP_F_main_BB__7i1i_628 = 10'd628;
parameter [9:0] LEGUP_F_main_BB__7i1i_629 = 10'd629;
parameter [9:0] LEGUP_F_main_BB__8i3i_630 = 10'd630;
parameter [9:0] LEGUP_F_main_BB__8i3i_631 = 10'd631;
parameter [9:0] LEGUP_F_main_BB__8i3i_632 = 10'd632;
parameter [9:0] LEGUP_F_main_BB__8i3i_633 = 10'd633;
parameter [9:0] LEGUP_F_main_BB__8i3i_634 = 10'd634;
parameter [9:0] LEGUP_F_main_BB__8i3i_635 = 10'd635;
parameter [9:0] LEGUP_F_main_BB__8i3i_636 = 10'd636;
parameter [9:0] LEGUP_F_main_BB__8i3i_637 = 10'd637;
parameter [9:0] LEGUP_F_main_BB__8i3i_638 = 10'd638;
parameter [9:0] LEGUP_F_main_BB__8i3i_639 = 10'd639;
parameter [9:0] LEGUP_F_main_BB__8i3i_640 = 10'd640;
parameter [9:0] LEGUP_F_main_BB__8i3i_641 = 10'd641;
parameter [9:0] LEGUP_F_main_BB__8i3i_642 = 10'd642;
parameter [9:0] LEGUP_F_main_BB__8i3i_643 = 10'd643;
parameter [9:0] LEGUP_F_main_BB__8i3i_644 = 10'd644;
parameter [9:0] LEGUP_F_main_BB__8i3i_645 = 10'd645;
parameter [9:0] LEGUP_F_main_BB__9i4i_646 = 10'd646;
parameter [9:0] LEGUP_F_main_BB__11i5i_647 = 10'd647;
parameter [9:0] LEGUP_F_main_BB__11i5i_648 = 10'd648;
parameter [9:0] LEGUP_F_main_BB__11i5i_649 = 10'd649;
parameter [9:0] LEGUP_F_main_BB__11i5i_650 = 10'd650;
parameter [9:0] LEGUP_F_main_BB__11i5i_651 = 10'd651;
parameter [9:0] LEGUP_F_main_BB__11i5i_652 = 10'd652;
parameter [9:0] LEGUP_F_main_BB__11i5i_653 = 10'd653;
parameter [9:0] LEGUP_F_main_BB__11i5i_654 = 10'd654;
parameter [9:0] LEGUP_F_main_BB__11i5i_655 = 10'd655;
parameter [9:0] LEGUP_F_main_BB__11i5i_656 = 10'd656;
parameter [9:0] LEGUP_F_main_BB__11i5i_657 = 10'd657;
parameter [9:0] LEGUP_F_main_BB__11i5i_658 = 10'd658;
parameter [9:0] LEGUP_F_main_BB__11i5i_659 = 10'd659;
parameter [9:0] LEGUP_F_main_BB__11i5i_660 = 10'd660;
parameter [9:0] LEGUP_F_main_BB__11i5i_661 = 10'd661;
parameter [9:0] LEGUP_F_main_BB__12i7i_662 = 10'd662;
parameter [9:0] LEGUP_F_main_BB__12i7i_663 = 10'd663;
parameter [9:0] LEGUP_F_main_BB__12i7i_664 = 10'd664;
parameter [9:0] LEGUP_F_main_BB__12i7i_665 = 10'd665;
parameter [9:0] LEGUP_F_main_BB__12i7i_666 = 10'd666;
parameter [9:0] LEGUP_F_main_BB__12i7i_667 = 10'd667;
parameter [9:0] LEGUP_F_main_BB__12i7i_668 = 10'd668;
parameter [9:0] LEGUP_F_main_BB__12i7i_669 = 10'd669;
parameter [9:0] LEGUP_F_main_BB__12i7i_670 = 10'd670;
parameter [9:0] LEGUP_F_main_BB__12i7i_671 = 10'd671;
parameter [9:0] LEGUP_F_main_BB__12i7i_672 = 10'd672;
parameter [9:0] LEGUP_F_main_BB__12i7i_673 = 10'd673;
parameter [9:0] LEGUP_F_main_BB__12i7i_674 = 10'd674;
parameter [9:0] LEGUP_F_main_BB__12i7i_675 = 10'd675;
parameter [9:0] LEGUP_F_main_BB__12i7i_676 = 10'd676;
parameter [9:0] LEGUP_F_main_BB__13i8i_677 = 10'd677;
parameter [9:0] LEGUP_F_main_BB__15i9i_678 = 10'd678;
parameter [9:0] LEGUP_F_main_BB__15i9i_679 = 10'd679;
parameter [9:0] LEGUP_F_main_BB__15i9i_680 = 10'd680;
parameter [9:0] LEGUP_F_main_BB__15i9i_681 = 10'd681;
parameter [9:0] LEGUP_F_main_BB__15i9i_682 = 10'd682;
parameter [9:0] LEGUP_F_main_BB__15i9i_683 = 10'd683;
parameter [9:0] LEGUP_F_main_BB__15i9i_684 = 10'd684;
parameter [9:0] LEGUP_F_main_BB__15i9i_685 = 10'd685;
parameter [9:0] LEGUP_F_main_BB__15i9i_686 = 10'd686;
parameter [9:0] LEGUP_F_main_BB__15i9i_687 = 10'd687;
parameter [9:0] LEGUP_F_main_BB__15i9i_688 = 10'd688;
parameter [9:0] LEGUP_F_main_BB__15i9i_689 = 10'd689;
parameter [9:0] LEGUP_F_main_BB__15i9i_690 = 10'd690;
parameter [9:0] LEGUP_F_main_BB__15i9i_691 = 10'd691;
parameter [9:0] LEGUP_F_main_BB__15i9i_692 = 10'd692;
parameter [9:0] LEGUP_F_main_BB__16i11i_693 = 10'd693;
parameter [9:0] LEGUP_F_main_BB__16i11i_694 = 10'd694;
parameter [9:0] LEGUP_F_main_BB__16i11i_695 = 10'd695;
parameter [9:0] LEGUP_F_main_BB__16i11i_696 = 10'd696;
parameter [9:0] LEGUP_F_main_BB__16i11i_697 = 10'd697;
parameter [9:0] LEGUP_F_main_BB__16i11i_698 = 10'd698;
parameter [9:0] LEGUP_F_main_BB__16i11i_699 = 10'd699;
parameter [9:0] LEGUP_F_main_BB__16i11i_700 = 10'd700;
parameter [9:0] LEGUP_F_main_BB__16i11i_701 = 10'd701;
parameter [9:0] LEGUP_F_main_BB__16i11i_702 = 10'd702;
parameter [9:0] LEGUP_F_main_BB__16i11i_703 = 10'd703;
parameter [9:0] LEGUP_F_main_BB__16i11i_704 = 10'd704;
parameter [9:0] LEGUP_F_main_BB__16i11i_705 = 10'd705;
parameter [9:0] LEGUP_F_main_BB__16i11i_706 = 10'd706;
parameter [9:0] LEGUP_F_main_BB__16i11i_707 = 10'd707;
parameter [9:0] LEGUP_F_main_BB__16i11i_708 = 10'd708;
parameter [9:0] LEGUP_F_main_BB__16i11i_709 = 10'd709;
parameter [9:0] LEGUP_F_main_BB__16i11i_710 = 10'd710;
parameter [9:0] LEGUP_F_main_BB__16i11i_711 = 10'd711;
parameter [9:0] LEGUP_F_main_BB__16i11i_712 = 10'd712;
parameter [9:0] LEGUP_F_main_BB__16i11i_713 = 10'd713;
parameter [9:0] LEGUP_F_main_BB__16i11i_714 = 10'd714;
parameter [9:0] LEGUP_F_main_BB__16i11i_715 = 10'd715;
parameter [9:0] LEGUP_F_main_BB__16i11i_716 = 10'd716;
parameter [9:0] LEGUP_F_main_BB__16i11i_717 = 10'd717;
parameter [9:0] LEGUP_F_main_BB__16i11i_718 = 10'd718;
parameter [9:0] LEGUP_F_main_BB__16i11i_719 = 10'd719;
parameter [9:0] LEGUP_F_main_BB__16i11i_720 = 10'd720;
parameter [9:0] LEGUP_F_main_BB__16i11i_721 = 10'd721;
parameter [9:0] LEGUP_F_main_BB_convergedexit13i_722 = 10'd722;
parameter [9:0] LEGUP_F_main_BB_convergedexit13i_723 = 10'd723;
parameter [9:0] LEGUP_F_main_BB_convergedexit13i_724 = 10'd724;
parameter [9:0] LEGUP_F_main_BB_convergedexit13i_725 = 10'd725;
parameter [9:0] LEGUP_F_main_BB_fasticaexitloopexit_726 = 10'd726;
parameter [9:0] LEGUP_F_main_BB_fasticaexit_727 = 10'd727;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [9:0] LEGUP_function_call_433 = 10'd433;
parameter [9:0] LEGUP_function_call_435 = 10'd435;
parameter [9:0] LEGUP_function_call_437 = 10'd437;
parameter [9:0] LEGUP_function_call_571 = 10'd571;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [9:0] cur_state;
reg [9:0] next_state;
reg [31:0] main_entry_0;
reg [31:0] main_entry_1;
reg [31:0] main_entry_2;
reg [31:0] main_entry_3;
reg [31:0] main_entry_4;
reg [31:0] main_entry_5;
reg [31:0] main_entry_6;
reg [31:0] main_entry_6_reg;
reg [31:0] main_entry_7;
reg [31:0] main_entry_7_reg;
reg  main_entry_8;
reg  main_entry_8_reg;
reg [31:0] main_entry_9;
reg [31:0] main_entry_9_reg;
reg [31:0] main_entry_10;
reg [31:0] main_entry_10_reg;
reg [31:0] main_entry_11;
reg [31:0] main_entry_11_reg;
reg [31:0] main_entry_12;
reg [31:0] main_entry_12_reg;
reg [31:0] main_7ii_13;
reg [31:0] main_8ii_sink1ii;
reg [31:0] main_8ii_sink1ii_reg;
reg [31:0] main_8ii_14;
reg  main_8ii_15;
reg [31:0] main_11ii_16;
reg [31:0] main_12ii_sinkii;
reg [31:0] main_12ii_sinkii_reg;
reg [31:0] main_12ii_17;
reg [31:0] main_15ii_18;
reg [31:0] main_16ii_sink3ii;
reg [31:0] main_16ii_sink3ii_reg;
reg [31:0] main_16ii_19;
reg [31:0] main_16ii_20;
reg [31:0] main_convergedexiti_21;
reg [31:0] main_convergedexiti_21_reg;
reg [63:0] main_convergedexiti_22;
reg [63:0] main_convergedexiti_22_reg;
reg  main_convergedexiti_23;
reg [31:0] main_convergedexiti_ii;
reg  main_convergedexiti_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ipreheader_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ipreheader_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ipreheader_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ipreheader_26_reg;
reg [31:0] main_3i_27;
reg [31:0] main_3i_27_reg;
reg [31:0] main_3i_28;
reg [31:0] main_3i_28_reg;
reg [31:0] main_3i_29;
reg [31:0] main_3i_29_reg;
reg [31:0] main_3i_30;
reg [31:0] main_3i_30_reg;
reg [31:0] main_3i_31;
reg [31:0] main_3i_31_reg;
reg [31:0] main_3i_33;
reg [31:0] main_3i_34;
reg [31:0] main_3i_34_reg;
reg [31:0] main_3i_36;
reg [31:0] main_3i_37;
reg [31:0] main_3i_37_reg;
reg [31:0] main_3i_preii;
reg [31:0] main_3i_preii_reg;
reg [31:0] main_3i_pre5ii;
reg [31:0] main_3i_pre5ii_reg;
reg [31:0] main_3ii_39;
reg [31:0] main_3ii_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ii_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ii_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ii_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3ii_scevgep4_reg;
reg [31:0] main_3ii_40;
reg [31:0] main_3ii_41;
reg [31:0] main_3ii_42;
reg [31:0] main_3ii_43;
reg [31:0] main_3ii_43_reg;
reg [31:0] main_3ii_44;
reg [31:0] main_3ii_44_reg;
reg [31:0] main_3ii_45;
reg [31:0] main_3ii_46;
reg [31:0] main_3ii_46_reg;
reg  main_3ii_exitcond;
reg  main_3ii_exitcond_reg;
reg [31:0] main_10ii_47;
reg [31:0] main_10ii_47_reg;
reg [31:0] main_10ii_48;
reg [31:0] main_10ii_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10ii_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10ii_scevgep7;
reg [31:0] main_10ii_49;
reg [31:0] main_10ii_49_reg;
reg [31:0] main_10ii_50;
reg [31:0] main_10ii_50_reg;
reg  main_10ii_51;
reg  main_4iii_52;
reg  main_4iii_53;
reg  main_4iii_orcondiii;
reg  main_7iii_54;
reg  main_7iii_55;
reg  main_7iii_orcond1iii;
reg  main_10iii_56;
reg  main_10iii_57;
reg  main_10iii_orcond2iii;
reg  main_13iii_58;
reg  main_13iii_59;
reg  main_13iii_orcond3iii;
reg  main_16iii_60;
reg  main_16iii_61;
reg  main_16iii_orcond4iii;
reg  main_19iii_62;
reg  main_19iii_63;
reg  main_19iii_orcond5iii;
reg  main_22iii_64;
reg  main_22iii_65;
reg  main_22iii_orcond6iii;
reg  main_25iii_66;
reg  main_25iii_67;
reg  main_25iii_orcond7iii;
reg  main_28iii_68;
reg  main_28iii_69;
reg  main_28iii_orcond8iii;
reg  main_31iii_70;
reg  main_31iii_71;
reg  main_31iii_orcond9iii;
reg [31:0] main_31iii_iii;
reg [31:0] main_31iii_10iii;
reg [31:0] main_linear_tanhexitii_72;
reg [31:0] main_linear_tanhexitii_72_reg;
reg [31:0] main_linear_tanhexitii_73;
reg [31:0] main_linear_tanhexitii_73_reg;
reg [31:0] main_linear_tanhexitii_74;
reg [31:0] main_linear_tanhexitii_75;
reg [31:0] main_linear_tanhexitii_76;
reg [31:0] main_linear_tanhexitii_77;
reg [31:0] main_linear_tanhexitii_78;
reg [31:0] main_linear_tanhexitii_78_reg;
reg  main_linear_tanhexitii_exitcond5;
reg  main_linear_tanhexitii_exitcond5_reg;
reg [31:0] main_12i14i_lcssa;
reg [31:0] main_12i14i_lcssa_reg;
reg [31:0] main_15i15i_79;
reg [31:0] main_15i15i_79_reg;
reg [31:0] main_15i15i_80;
reg [31:0] main_15i15i_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15i15i_scevgep12;
reg [31:0] main_15i15i_81;
reg [31:0] main_15i15i_81_reg;
reg  main_15i15i_82;
reg  main_4i3ii_83;
reg  main_4i3ii_84;
reg  main_4i3ii_orcondi2ii;
reg  main_7i5ii_85;
reg  main_7i5ii_86;
reg  main_7i5ii_orcond1i4ii;
reg  main_10i7ii_87;
reg  main_10i7ii_88;
reg  main_10i7ii_orcond2i6ii;
reg  main_13i9ii_89;
reg  main_13i9ii_90;
reg  main_13i9ii_orcond3i8ii;
reg  main_16i11ii_91;
reg  main_16i11ii_91_reg;
reg [63:0] main_16i11ii_92;
reg [63:0] main_16i11ii_92_reg;
reg  main_16i11ii_93;
reg  main_16i11ii_orcond5i10ii;
reg  main_19i13ii_94;
reg  main_19i13ii_95;
reg  main_19i13ii_orcond6i12ii;
reg  main_22i15ii_96;
reg  main_22i15ii_97;
reg  main_22i15ii_orcond8i14ii;
reg  main_25i17ii_98;
reg  main_25i17ii_99;
reg  main_25i17ii_orcond9i16ii;
reg  main_28i19ii_100;
reg  main_28i19ii_101;
reg  main_28i19ii_orcond10iii;
reg  main_31i20ii_102;
reg  main_31i20ii_103;
reg  main_31i20ii_orcond11iii;
reg  main_34iii_104;
reg  main_34iii_105;
reg  main_34iii_orcond12iii;
reg  main_37iii_106;
reg  main_37iii_107;
reg  main_37iii_orcond13iii;
reg [31:0] main_37iii_i21ii;
reg [31:0] main_37iii_14iii;
reg [31:0] main_linear_sech2exitii_108;
reg [31:0] main_linear_sech2exitii_108_reg;
reg [31:0] main_linear_sech2exitii_109;
reg [31:0] main_linear_sech2exitii_109_reg;
reg [31:0] main_linear_sech2exitii_110;
reg [31:0] main_linear_sech2exitii_111;
reg [31:0] main_linear_sech2exitii_112;
reg [31:0] main_linear_sech2exitii_113;
reg [31:0] main_linear_sech2exitii_113_reg;
reg  main_linear_sech2exitii_exitcond11;
reg  main_linear_sech2exitii_exitcond11_reg;
reg [31:0] main_101ii_114;
reg [31:0] main_101ii_114_reg;
reg [31:0] main_101ii_115;
reg [31:0] main_101ii_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_101ii_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_101ii_scevgep10;
reg [31:0] main_101ii_116;
reg [31:0] main_101ii_116_reg;
reg [31:0] main_101ii_117;
reg [31:0] main_101ii_117_reg;
reg  main_101ii_118;
reg  main_4i2ii_119;
reg  main_4i2ii_120;
reg  main_4i2ii_orcondi1ii;
reg  main_7i4ii_121;
reg  main_7i4ii_122;
reg  main_7i4ii_orcond1i3ii;
reg  main_10i6ii_123;
reg  main_10i6ii_124;
reg  main_10i6ii_orcond2i5ii;
reg  main_13i8ii_125;
reg  main_13i8ii_126;
reg  main_13i8ii_orcond3i7ii;
reg  main_16i10ii_127;
reg  main_16i10ii_128;
reg  main_16i10ii_orcond4i9ii;
reg  main_19i12ii_129;
reg  main_19i12ii_130;
reg  main_19i12ii_orcond5i11ii;
reg  main_22i14ii_131;
reg  main_22i14ii_132;
reg  main_22i14ii_orcond6i13ii;
reg  main_25i16ii_133;
reg  main_25i16ii_134;
reg  main_25i16ii_orcond7i15ii;
reg  main_28i18ii_135;
reg  main_28i18ii_136;
reg  main_28i18ii_orcond8i17ii;
reg  main_31i22ii_137;
reg  main_31i22ii_138;
reg  main_31i22ii_orcond9i19ii;
reg [31:0] main_31i22ii_i20ii;
reg [31:0] main_31i22ii_10i21ii;
reg [31:0] main_linear_tanhexit23ii_139;
reg [31:0] main_linear_tanhexit23ii_139_reg;
reg [31:0] main_linear_tanhexit23ii_140;
reg [31:0] main_linear_tanhexit23ii_140_reg;
reg [31:0] main_linear_tanhexit23ii_141;
reg [31:0] main_linear_tanhexit23ii_142;
reg [31:0] main_linear_tanhexit23ii_143;
reg [31:0] main_linear_tanhexit23ii_144;
reg [31:0] main_linear_tanhexit23ii_145;
reg [31:0] main_linear_tanhexit23ii_145_reg;
reg  main_linear_tanhexit23ii_exitcond8;
reg  main_linear_tanhexit23ii_exitcond8_reg;
reg [31:0] main_121ii_lcssa63;
reg [31:0] main_121ii_lcssa63_reg;
reg [31:0] main_rotateexiti_lcssa64;
reg [31:0] main_rotateexiti_lcssa64_reg;
reg [31:0] main_rotateexiti_146;
reg [31:0] main_rotateexiti_146_reg;
reg [31:0] main_rotateexiti_147;
reg [31:0] main_rotateexiti_148;
reg [31:0] main_rotateexiti_149;
reg [31:0] main_rotateexiti_150;
reg [31:0] main_rotateexiti_150_reg;
reg [31:0] main_rotateexiti_151;
reg [31:0] main_rotateexiti_151_reg;
reg [31:0] main_rotateexiti_152;
reg [31:0] main_rotateexiti_152_reg;
reg [31:0] main_rotateexiti_153;
reg [31:0] main_rotateexiti_153_reg;
reg [31:0] main_rotateexiti_154;
reg [31:0] main_rotateexiti_154_reg;
reg  main_rotateexiti_155;
reg [31:0] main_156_157;
reg [31:0] main_156_158;
reg  main_159_160;
reg  main_161_162;
reg [31:0] main_163_164;
reg [31:0] main_163_165;
reg [31:0] main_166_167;
reg [31:0] main_166_167_reg;
reg  main_166_168;
reg [31:0] main_169_ixii0;
reg [31:0] main_169_ixii0_reg;
reg [31:0] main_169_170;
reg [31:0] main_169_170_reg;
reg [31:0] main_169_171;
reg  main_169_172;
reg [31:0] main_173_174;
reg [31:0] main_173_175;
reg [31:0] main_176_iii0lcssa;
reg [31:0] main_176_iii0lcssa_reg;
reg [31:0] main_176_ixii0lcssa;
reg [31:0] main_176_ixii0lcssa_reg;
reg [31:0] main_176_177;
reg [31:0] main_176_178;
reg [31:0] main_179_mii0;
reg [31:0] main_179_mii0_reg;
reg [31:0] main_179_ixii1;
reg [31:0] main_179_ixii1_reg;
reg [31:0] main_179_180;
reg [31:0] main_179_180_reg;
reg [31:0] main_179_181;
reg [31:0] main_179_182;
reg [31:0] main_179_183;
reg  main_179_184;
reg [31:0] main_179_185;
reg [31:0] main_179_;
reg [31:0] main_179_186;
reg [31:0] main_187_sii0;
reg [31:0] main_187_sii0_reg;
reg [31:0] main_187_qii0;
reg [31:0] main_187_qii0_reg;
reg [31:0] main_187_ixii3;
reg [31:0] main_187_ixii3_reg;
reg [31:0] main_187_rii0;
reg [31:0] main_187_rii0_reg;
reg [31:0] main_187_188;
reg [31:0] main_187_188_reg;
reg  main_187_189;
reg [31:0] main_190_191;
reg [31:0] main_190_191_reg;
reg  main_190_192;
reg [31:0] main_193_194;
reg [31:0] main_193_195;
reg [31:0] main_193_196;
reg [31:0] main_197_sii1;
reg [31:0] main_197_sii1_reg;
reg [31:0] main_197_qii1;
reg [31:0] main_197_qii1_reg;
reg [31:0] main_197_ixii4;
reg [31:0] main_197_ixii4_reg;
reg [31:0] main_197_198;
reg [31:0] main_197_199;
reg [31:0] main_200_ixii3lcssa;
reg [31:0] main_200_ixii3lcssa_reg;
reg [31:0] main_200_qii0lcssa;
reg [31:0] main_200_qii0lcssa_reg;
reg [31:0] main_200_201;
reg [31:0] main_200_201_reg;
reg  main_200_202;
reg [31:0] main_203_204;
reg [31:0] main_203_205;
reg [31:0] main_206_qii2;
reg [31:0] main_206_qii2_reg;
reg [31:0] main_206_207;
reg [31:0] main_206_208;
reg [31:0] main_206_209;
reg [31:0] main_206_210;
reg [31:0] main_206_211;
reg [31:0] main_sqrtfexit_0;
reg [31:0] main_sqrtfexit_0_reg;
reg [31:0] main_sqrtfexit_212;
reg [31:0] main_sqrtfexit_213;
reg [31:0] main_sqrtfexit_214;
reg [31:0] main_sqrtfexit_215;
reg [31:0] main_sqrtfexit_215_reg;
reg [31:0] main_sqrtfexit_216;
reg [31:0] main_sqrtfexit_216_reg;
reg [31:0] main_sqrtfexit_217;
reg [31:0] main_sqrtfexit_217_reg;
reg  main_sqrtfexit_218;
reg  main_sqrtfexit_218_reg;
reg [31:0] main_sqrtfexit_219;
reg [31:0] main_sqrtfexit_219_reg;
reg [31:0] main_sqrtfexit_220;
reg [31:0] main_sqrtfexit_220_reg;
reg [31:0] main_sqrtfexit_221;
reg [31:0] main_sqrtfexit_221_reg;
reg [31:0] main_sqrtfexit_222;
reg [31:0] main_sqrtfexit_222_reg;
reg [31:0] main_7i1i_223;
reg [31:0] main_8i3i_sink1i2i;
reg [31:0] main_8i3i_sink1i2i_reg;
reg [31:0] main_8i3i_224;
reg  main_8i3i_225;
reg [31:0] main_11i5i_226;
reg [31:0] main_12i7i_sinki6i;
reg [31:0] main_12i7i_sinki6i_reg;
reg [31:0] main_12i7i_227;
reg [31:0] main_15i9i_228;
reg [31:0] main_16i11i_sink3i10i;
reg [31:0] main_16i11i_sink3i10i_reg;
reg [31:0] main_16i11i_229;
reg [31:0] main_16i11i_230;
reg [31:0] main_convergedexit13i_231;
reg [31:0] main_convergedexit13i_231_reg;
reg [63:0] main_convergedexit13i_232;
reg  main_convergedexit13i_233;
reg [31:0] main_convergedexit13i_i12i;
reg  main_convergedexit13i_234;
reg [31:0] main_fasticaexitloopexit_lcssa2;
reg [31:0] main_fasticaexitloopexit_lcssa2_reg;
reg [31:0] main_fasticaexitloopexit_lcssa1;
reg [31:0] main_fasticaexitloopexit_lcssa1_reg;
reg [31:0] main_fasticaexit_235;
reg [31:0] main_fasticaexit_235_reg;
reg [31:0] main_fasticaexit_236;
reg [31:0] main_fasticaexit_236_reg;
reg  legup_omp_rotate_omp_fn0_start;
wire  legup_omp_rotate_omp_fn0_memory_controller_enable_a;
wire  legup_omp_rotate_omp_fn0_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn0_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn0_memory_controller_in_a;
wire [1:0] legup_omp_rotate_omp_fn0_memory_controller_size_a;
wire  legup_omp_rotate_omp_fn0_memory_controller_enable_b;
wire  legup_omp_rotate_omp_fn0_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn0_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn0_memory_controller_in_b;
wire [1:0] legup_omp_rotate_omp_fn0_memory_controller_size_b;
reg  legup_omp_rotate_omp_fn0_finish_final;
reg  legup_omp_rotate_omp_fn0_finish_reg;
wire  legup_omp_rotate_omp_fn0_finish;
reg  legup_function_call;
reg  legup_omp_rotate_omp_fn1_start;
wire  legup_omp_rotate_omp_fn1_memory_controller_enable_a;
wire  legup_omp_rotate_omp_fn1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn1_memory_controller_in_a;
wire [1:0] legup_omp_rotate_omp_fn1_memory_controller_size_a;
wire  legup_omp_rotate_omp_fn1_memory_controller_enable_b;
wire  legup_omp_rotate_omp_fn1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn1_memory_controller_in_b;
wire [1:0] legup_omp_rotate_omp_fn1_memory_controller_size_b;
reg  legup_omp_rotate_omp_fn1_finish_final;
reg  legup_omp_rotate_omp_fn1_finish_reg;
wire  legup_omp_rotate_omp_fn1_finish;
reg  legup_omp_rotate_omp_fn2_start;
wire  legup_omp_rotate_omp_fn2_memory_controller_enable_a;
wire  legup_omp_rotate_omp_fn2_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn2_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn2_memory_controller_in_a;
wire [1:0] legup_omp_rotate_omp_fn2_memory_controller_size_a;
wire  legup_omp_rotate_omp_fn2_memory_controller_enable_b;
wire  legup_omp_rotate_omp_fn2_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_rotate_omp_fn2_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_rotate_omp_fn2_memory_controller_in_b;
wire [1:0] legup_omp_rotate_omp_fn2_memory_controller_size_b;
reg  legup_omp_rotate_omp_fn2_finish_final;
reg  legup_omp_rotate_omp_fn2_finish_reg;
wire  legup_omp_rotate_omp_fn2_finish;
reg  legup_omp_normalize_omp_fn3_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_normalize_omp_fn3_arg_omp_data_i;
wire  legup_omp_normalize_omp_fn3_memory_controller_enable_a;
wire  legup_omp_normalize_omp_fn3_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_normalize_omp_fn3_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_normalize_omp_fn3_memory_controller_in_a;
wire [1:0] legup_omp_normalize_omp_fn3_memory_controller_size_a;
wire  legup_omp_normalize_omp_fn3_memory_controller_enable_b;
wire  legup_omp_normalize_omp_fn3_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_omp_normalize_omp_fn3_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_omp_normalize_omp_fn3_memory_controller_in_b;
wire [1:0] legup_omp_normalize_omp_fn3_memory_controller_size_b;
reg  legup_omp_normalize_omp_fn3_finish_final;
reg  legup_omp_normalize_omp_fn3_finish_reg;
wire  legup_omp_normalize_omp_fn3_finish;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_entry_2_out;
reg  altfp_main_entry_2_en;
reg [31:0] main_altfp_multiply_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_entry_3_out;
reg  altfp_main_entry_3_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_7ii_13_out;
reg  altfp_main_7ii_13_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_extend_32_0_op0;
wire [63:0] altfp_extend_main_convergedexiti_22_out;
reg  altfp_main_convergedexiti_22_en;
reg [63:0] main_altfp_extend_32_0;
reg [31:0] main_altfp_divide_32_0_op0;
reg [31:0] main_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_main_163_165_out;
reg  altfp_main_163_165_en;
reg [31:0] main_altfp_divide_32_0;
wire  altfp_compare32_1_main_entry_8_out;
reg  altfp_main_entry_8_en;
wire  main_entry_8_unused;
wire  altfp_compare32_1_main_8ii_15_out;
reg  altfp_main_8ii_15_en;
wire  main_8ii_15_unused;
wire  altfp_compare64_1_main_convergedexiti_23_out;
reg  altfp_main_convergedexiti_23_en;
wire  main_convergedexiti_23_unused;
wire  altfp_compare32_1_main_10ii_51_out;
reg  altfp_main_10ii_51_en;
wire  main_10ii_51_unused;
wire  altfp_compare32_1_main_4iii_52_out;
reg  altfp_main_4iii_52_en;
wire  main_4iii_52_unused;
wire  altfp_compare32_1_main_4iii_53_out;
reg  altfp_main_4iii_53_en;
wire  main_4iii_53_unused;
wire  altfp_compare32_1_main_7iii_54_out;
reg  altfp_main_7iii_54_en;
wire  main_7iii_54_unused;
wire  altfp_compare32_1_main_7iii_55_out;
reg  altfp_main_7iii_55_en;
wire  main_7iii_55_unused;
wire  altfp_compare32_1_main_10iii_56_out;
reg  altfp_main_10iii_56_en;
wire  main_10iii_56_unused;
wire  altfp_compare32_1_main_10iii_57_out;
reg  altfp_main_10iii_57_en;
wire  main_10iii_57_unused;
wire  altfp_compare32_1_main_13iii_58_out;
reg  altfp_main_13iii_58_en;
wire  main_13iii_58_unused;
wire  altfp_compare32_1_main_13iii_59_out;
reg  altfp_main_13iii_59_en;
wire  main_13iii_59_unused;
wire  altfp_compare32_1_main_16iii_60_out;
reg  altfp_main_16iii_60_en;
wire  main_16iii_60_unused;
wire  altfp_compare32_1_main_16iii_61_out;
reg  altfp_main_16iii_61_en;
wire  main_16iii_61_unused;
wire  altfp_compare32_1_main_19iii_62_out;
reg  altfp_main_19iii_62_en;
wire  main_19iii_62_unused;
wire  altfp_compare32_1_main_19iii_63_out;
reg  altfp_main_19iii_63_en;
wire  main_19iii_63_unused;
wire  altfp_compare32_1_main_22iii_64_out;
reg  altfp_main_22iii_64_en;
wire  main_22iii_64_unused;
wire  altfp_compare32_1_main_22iii_65_out;
reg  altfp_main_22iii_65_en;
wire  main_22iii_65_unused;
wire  altfp_compare32_1_main_25iii_66_out;
reg  altfp_main_25iii_66_en;
wire  main_25iii_66_unused;
wire  altfp_compare32_1_main_25iii_67_out;
reg  altfp_main_25iii_67_en;
wire  main_25iii_67_unused;
wire  altfp_compare32_1_main_28iii_68_out;
reg  altfp_main_28iii_68_en;
wire  main_28iii_68_unused;
wire  altfp_compare32_1_main_28iii_69_out;
reg  altfp_main_28iii_69_en;
wire  main_28iii_69_unused;
wire  altfp_compare32_1_main_31iii_70_out;
reg  altfp_main_31iii_70_en;
wire  main_31iii_70_unused;
wire  altfp_compare32_1_main_31iii_71_out;
reg  altfp_main_31iii_71_en;
wire  main_31iii_71_unused;
wire  altfp_compare32_1_main_15i15i_82_out;
reg  altfp_main_15i15i_82_en;
wire  main_15i15i_82_unused;
wire  altfp_compare32_1_main_4i3ii_83_out;
reg  altfp_main_4i3ii_83_en;
wire  main_4i3ii_83_unused;
wire  altfp_compare32_1_main_4i3ii_84_out;
reg  altfp_main_4i3ii_84_en;
wire  main_4i3ii_84_unused;
wire  altfp_compare32_1_main_7i5ii_85_out;
reg  altfp_main_7i5ii_85_en;
wire  main_7i5ii_85_unused;
wire  altfp_compare32_1_main_7i5ii_86_out;
reg  altfp_main_7i5ii_86_en;
wire  main_7i5ii_86_unused;
wire  altfp_compare32_1_main_10i7ii_87_out;
reg  altfp_main_10i7ii_87_en;
wire  main_10i7ii_87_unused;
wire  altfp_compare32_1_main_10i7ii_88_out;
reg  altfp_main_10i7ii_88_en;
wire  main_10i7ii_88_unused;
wire  altfp_compare32_1_main_13i9ii_89_out;
reg  altfp_main_13i9ii_89_en;
wire  main_13i9ii_89_unused;
wire  altfp_compare32_1_main_13i9ii_90_out;
reg  altfp_main_13i9ii_90_en;
wire  main_13i9ii_90_unused;
wire  altfp_compare32_1_main_16i11ii_91_out;
reg  altfp_main_16i11ii_91_en;
wire  main_16i11ii_91_unused;
wire  altfp_compare64_1_main_16i11ii_93_out;
reg  altfp_main_16i11ii_93_en;
wire  main_16i11ii_93_unused;
wire  altfp_compare64_1_main_19i13ii_94_out;
reg  altfp_main_19i13ii_94_en;
wire  main_19i13ii_94_unused;
wire  altfp_compare32_1_main_19i13ii_95_out;
reg  altfp_main_19i13ii_95_en;
wire  main_19i13ii_95_unused;
wire  altfp_compare32_1_main_22i15ii_96_out;
reg  altfp_main_22i15ii_96_en;
wire  main_22i15ii_96_unused;
wire  altfp_compare64_1_main_22i15ii_97_out;
reg  altfp_main_22i15ii_97_en;
wire  main_22i15ii_97_unused;
wire  altfp_compare64_1_main_25i17ii_98_out;
reg  altfp_main_25i17ii_98_en;
wire  main_25i17ii_98_unused;
wire  altfp_compare32_1_main_25i17ii_99_out;
reg  altfp_main_25i17ii_99_en;
wire  main_25i17ii_99_unused;
wire  altfp_compare32_1_main_28i19ii_100_out;
reg  altfp_main_28i19ii_100_en;
wire  main_28i19ii_100_unused;
wire  altfp_compare32_1_main_28i19ii_101_out;
reg  altfp_main_28i19ii_101_en;
wire  main_28i19ii_101_unused;
wire  altfp_compare32_1_main_31i20ii_102_out;
reg  altfp_main_31i20ii_102_en;
wire  main_31i20ii_102_unused;
wire  altfp_compare32_1_main_31i20ii_103_out;
reg  altfp_main_31i20ii_103_en;
wire  main_31i20ii_103_unused;
wire  altfp_compare32_1_main_34iii_104_out;
reg  altfp_main_34iii_104_en;
wire  main_34iii_104_unused;
wire  altfp_compare32_1_main_34iii_105_out;
reg  altfp_main_34iii_105_en;
wire  main_34iii_105_unused;
wire  altfp_compare32_1_main_37iii_106_out;
reg  altfp_main_37iii_106_en;
wire  main_37iii_106_unused;
wire  altfp_compare32_1_main_37iii_107_out;
reg  altfp_main_37iii_107_en;
wire  main_37iii_107_unused;
wire  altfp_compare32_1_main_101ii_118_out;
reg  altfp_main_101ii_118_en;
wire  main_101ii_118_unused;
wire  altfp_compare32_1_main_4i2ii_119_out;
reg  altfp_main_4i2ii_119_en;
wire  main_4i2ii_119_unused;
wire  altfp_compare32_1_main_4i2ii_120_out;
reg  altfp_main_4i2ii_120_en;
wire  main_4i2ii_120_unused;
wire  altfp_compare32_1_main_7i4ii_121_out;
reg  altfp_main_7i4ii_121_en;
wire  main_7i4ii_121_unused;
wire  altfp_compare32_1_main_7i4ii_122_out;
reg  altfp_main_7i4ii_122_en;
wire  main_7i4ii_122_unused;
wire  altfp_compare32_1_main_10i6ii_123_out;
reg  altfp_main_10i6ii_123_en;
wire  main_10i6ii_123_unused;
wire  altfp_compare32_1_main_10i6ii_124_out;
reg  altfp_main_10i6ii_124_en;
wire  main_10i6ii_124_unused;
wire  altfp_compare32_1_main_13i8ii_125_out;
reg  altfp_main_13i8ii_125_en;
wire  main_13i8ii_125_unused;
wire  altfp_compare32_1_main_13i8ii_126_out;
reg  altfp_main_13i8ii_126_en;
wire  main_13i8ii_126_unused;
wire  altfp_compare32_1_main_16i10ii_127_out;
reg  altfp_main_16i10ii_127_en;
wire  main_16i10ii_127_unused;
wire  altfp_compare32_1_main_16i10ii_128_out;
reg  altfp_main_16i10ii_128_en;
wire  main_16i10ii_128_unused;
wire  altfp_compare32_1_main_19i12ii_129_out;
reg  altfp_main_19i12ii_129_en;
wire  main_19i12ii_129_unused;
wire  altfp_compare32_1_main_19i12ii_130_out;
reg  altfp_main_19i12ii_130_en;
wire  main_19i12ii_130_unused;
wire  altfp_compare32_1_main_22i14ii_131_out;
reg  altfp_main_22i14ii_131_en;
wire  main_22i14ii_131_unused;
wire  altfp_compare32_1_main_22i14ii_132_out;
reg  altfp_main_22i14ii_132_en;
wire  main_22i14ii_132_unused;
wire  altfp_compare32_1_main_25i16ii_133_out;
reg  altfp_main_25i16ii_133_en;
wire  main_25i16ii_133_unused;
wire  altfp_compare32_1_main_25i16ii_134_out;
reg  altfp_main_25i16ii_134_en;
wire  main_25i16ii_134_unused;
wire  altfp_compare32_1_main_28i18ii_135_out;
reg  altfp_main_28i18ii_135_en;
wire  main_28i18ii_135_unused;
wire  altfp_compare32_1_main_28i18ii_136_out;
reg  altfp_main_28i18ii_136_en;
wire  main_28i18ii_136_unused;
wire  altfp_compare32_1_main_31i22ii_137_out;
reg  altfp_main_31i22ii_137_en;
wire  main_31i22ii_137_unused;
wire  altfp_compare32_1_main_31i22ii_138_out;
reg  altfp_main_31i22ii_138_en;
wire  main_31i22ii_138_unused;
wire  altfp_compare32_1_main_sqrtfexit_218_out;
reg  altfp_main_sqrtfexit_218_en;
wire  main_sqrtfexit_218_unused;
wire  altfp_compare32_1_main_8i3i_225_out;
reg  altfp_main_8i3i_225_en;
wire  main_8i3i_225_unused;
wire  altfp_compare64_1_main_convergedexit13i_233_out;
reg  altfp_main_convergedexit13i_233_en;
wire  main_convergedexit13i_233_unused;

/*   %2 = fmul float %0, %1*/
altfp_multiplier_11 altfp_multiplier_11_main_entry_2 (
	.result (altfp_multiplier_main_entry_2_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_entry_2_en)
);


/*   %3 = fadd float %2, 0.000000e+00*/
altfp_adder_14 altfp_adder_14_main_entry_3 (
	.result (altfp_adder_main_entry_3_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_entry_3_en)
);


/*   %13 = fsub float -0.000000e+00, %7*/
altfp_subtractor_14 altfp_subtractor_14_main_7ii_13 (
	.result (altfp_subtractor_main_7ii_13_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_7ii_13_en)
);


/*   %22 = fpext float %21 to double*/
altfp_extend_2 altfp_extend_2_main_convergedexiti_22 (
	.result (altfp_extend_main_convergedexiti_22_out),
	.dataa (main_altfp_extend_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_convergedexiti_22_en)
);


/*   %165 = fdiv float %164, %164*/
altfp_divider_33 altfp_divider_33_main_163_165 (
	.result (altfp_divider_main_163_165_out),
	.dataa (main_altfp_divide_32_0_op0),
	.datab (main_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_163_165_en)
);


/*   %8 = fcmp ogt float %7, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_entry_8 (
	.dataa (main_entry_7),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_entry_8_en),
	.aeb (main_entry_8_unused),
	.aneb (main_entry_8_unused),
	.alb (main_entry_8_unused),
	.aleb (main_entry_8_unused),
	.agb (altfp_compare32_1_main_entry_8_out),
	.ageb (main_entry_8_unused),
	.unordered (main_entry_8_unused)
);


/*   %15 = fcmp ogt float %14, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_8ii_15 (
	.dataa (main_8ii_14),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_8ii_15_en),
	.aeb (main_8ii_15_unused),
	.aneb (main_8ii_15_unused),
	.alb (main_8ii_15_unused),
	.aleb (main_8ii_15_unused),
	.agb (altfp_compare32_1_main_8ii_15_out),
	.ageb (main_8ii_15_unused),
	.unordered (main_8ii_15_unused)
);


/*   %23 = fcmp olt double %22, 1.000000e-06*/
altfp_compare64_1 altfp_compare64_1_main_convergedexiti_23 (
	.dataa (main_convergedexiti_22),
	.datab (64'h3EB0C6F7A0B5ED8D),
	.clock (clk),
	.clk_en (altfp_main_convergedexiti_23_en),
	.aeb (main_convergedexiti_23_unused),
	.aneb (main_convergedexiti_23_unused),
	.alb (altfp_compare64_1_main_convergedexiti_23_out),
	.aleb (main_convergedexiti_23_unused),
	.agb (main_convergedexiti_23_unused),
	.ageb (main_convergedexiti_23_unused),
	.unordered (main_convergedexiti_23_unused)
);


/*   %51 = fcmp olt float %50, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10ii_51 (
	.dataa (main_10ii_50),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_10ii_51_en),
	.aeb (main_10ii_51_unused),
	.aneb (main_10ii_51_unused),
	.alb (altfp_compare32_1_main_10ii_51_out),
	.aleb (main_10ii_51_unused),
	.agb (main_10ii_51_unused),
	.ageb (main_10ii_51_unused),
	.unordered (main_10ii_51_unused)
);


/*   %52 = fcmp oge float %50, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4iii_52 (
	.dataa (main_10ii_50_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_4iii_52_en),
	.aeb (main_4iii_52_unused),
	.aneb (main_4iii_52_unused),
	.alb (main_4iii_52_unused),
	.aleb (main_4iii_52_unused),
	.agb (main_4iii_52_unused),
	.ageb (altfp_compare32_1_main_4iii_52_out),
	.unordered (main_4iii_52_unused)
);


/*   %53 = fcmp olt float %50, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4iii_53 (
	.dataa (main_10ii_50_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_4iii_53_en),
	.aeb (main_4iii_53_unused),
	.aneb (main_4iii_53_unused),
	.alb (altfp_compare32_1_main_4iii_53_out),
	.aleb (main_4iii_53_unused),
	.agb (main_4iii_53_unused),
	.ageb (main_4iii_53_unused),
	.unordered (main_4iii_53_unused)
);


/*   %54 = fcmp oge float %50, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7iii_54 (
	.dataa (main_10ii_50_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_7iii_54_en),
	.aeb (main_7iii_54_unused),
	.aneb (main_7iii_54_unused),
	.alb (main_7iii_54_unused),
	.aleb (main_7iii_54_unused),
	.agb (main_7iii_54_unused),
	.ageb (altfp_compare32_1_main_7iii_54_out),
	.unordered (main_7iii_54_unused)
);


/*   %55 = fcmp olt float %50, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7iii_55 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_7iii_55_en),
	.aeb (main_7iii_55_unused),
	.aneb (main_7iii_55_unused),
	.alb (altfp_compare32_1_main_7iii_55_out),
	.aleb (main_7iii_55_unused),
	.agb (main_7iii_55_unused),
	.ageb (main_7iii_55_unused),
	.unordered (main_7iii_55_unused)
);


/*   %56 = fcmp oge float %50, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10iii_56 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_10iii_56_en),
	.aeb (main_10iii_56_unused),
	.aneb (main_10iii_56_unused),
	.alb (main_10iii_56_unused),
	.aleb (main_10iii_56_unused),
	.agb (main_10iii_56_unused),
	.ageb (altfp_compare32_1_main_10iii_56_out),
	.unordered (main_10iii_56_unused)
);


/*   %57 = fcmp olt float %50, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10iii_57 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_10iii_57_en),
	.aeb (main_10iii_57_unused),
	.aneb (main_10iii_57_unused),
	.alb (altfp_compare32_1_main_10iii_57_out),
	.aleb (main_10iii_57_unused),
	.agb (main_10iii_57_unused),
	.ageb (main_10iii_57_unused),
	.unordered (main_10iii_57_unused)
);


/*   %58 = fcmp oge float %50, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_13iii_58 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_13iii_58_en),
	.aeb (main_13iii_58_unused),
	.aneb (main_13iii_58_unused),
	.alb (main_13iii_58_unused),
	.aleb (main_13iii_58_unused),
	.agb (main_13iii_58_unused),
	.ageb (altfp_compare32_1_main_13iii_58_out),
	.unordered (main_13iii_58_unused)
);


/*   %59 = fcmp olt float %50, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_13iii_59 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_13iii_59_en),
	.aeb (main_13iii_59_unused),
	.aneb (main_13iii_59_unused),
	.alb (altfp_compare32_1_main_13iii_59_out),
	.aleb (main_13iii_59_unused),
	.agb (main_13iii_59_unused),
	.ageb (main_13iii_59_unused),
	.unordered (main_13iii_59_unused)
);


/*   %60 = fcmp oge float %50, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_16iii_60 (
	.dataa (main_10ii_50_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_16iii_60_en),
	.aeb (main_16iii_60_unused),
	.aneb (main_16iii_60_unused),
	.alb (main_16iii_60_unused),
	.aleb (main_16iii_60_unused),
	.agb (main_16iii_60_unused),
	.ageb (altfp_compare32_1_main_16iii_60_out),
	.unordered (main_16iii_60_unused)
);


/*   %61 = fcmp olt float %50, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_16iii_61 (
	.dataa (main_10ii_50_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_16iii_61_en),
	.aeb (main_16iii_61_unused),
	.aneb (main_16iii_61_unused),
	.alb (altfp_compare32_1_main_16iii_61_out),
	.aleb (main_16iii_61_unused),
	.agb (main_16iii_61_unused),
	.ageb (main_16iii_61_unused),
	.unordered (main_16iii_61_unused)
);


/*   %62 = fcmp oge float %50, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_19iii_62 (
	.dataa (main_10ii_50_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_19iii_62_en),
	.aeb (main_19iii_62_unused),
	.aneb (main_19iii_62_unused),
	.alb (main_19iii_62_unused),
	.aleb (main_19iii_62_unused),
	.agb (main_19iii_62_unused),
	.ageb (altfp_compare32_1_main_19iii_62_out),
	.unordered (main_19iii_62_unused)
);


/*   %63 = fcmp olt float %50, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_19iii_63 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_19iii_63_en),
	.aeb (main_19iii_63_unused),
	.aneb (main_19iii_63_unused),
	.alb (altfp_compare32_1_main_19iii_63_out),
	.aleb (main_19iii_63_unused),
	.agb (main_19iii_63_unused),
	.ageb (main_19iii_63_unused),
	.unordered (main_19iii_63_unused)
);


/*   %64 = fcmp oge float %50, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_22iii_64 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_22iii_64_en),
	.aeb (main_22iii_64_unused),
	.aneb (main_22iii_64_unused),
	.alb (main_22iii_64_unused),
	.aleb (main_22iii_64_unused),
	.agb (main_22iii_64_unused),
	.ageb (altfp_compare32_1_main_22iii_64_out),
	.unordered (main_22iii_64_unused)
);


/*   %65 = fcmp olt float %50, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_22iii_65 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_22iii_65_en),
	.aeb (main_22iii_65_unused),
	.aneb (main_22iii_65_unused),
	.alb (altfp_compare32_1_main_22iii_65_out),
	.aleb (main_22iii_65_unused),
	.agb (main_22iii_65_unused),
	.ageb (main_22iii_65_unused),
	.unordered (main_22iii_65_unused)
);


/*   %66 = fcmp oge float %50, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_25iii_66 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_25iii_66_en),
	.aeb (main_25iii_66_unused),
	.aneb (main_25iii_66_unused),
	.alb (main_25iii_66_unused),
	.aleb (main_25iii_66_unused),
	.agb (main_25iii_66_unused),
	.ageb (altfp_compare32_1_main_25iii_66_out),
	.unordered (main_25iii_66_unused)
);


/*   %67 = fcmp olt float %50, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_25iii_67 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_25iii_67_en),
	.aeb (main_25iii_67_unused),
	.aneb (main_25iii_67_unused),
	.alb (altfp_compare32_1_main_25iii_67_out),
	.aleb (main_25iii_67_unused),
	.agb (main_25iii_67_unused),
	.ageb (main_25iii_67_unused),
	.unordered (main_25iii_67_unused)
);


/*   %68 = fcmp oge float %50, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_28iii_68 (
	.dataa (main_10ii_50_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_28iii_68_en),
	.aeb (main_28iii_68_unused),
	.aneb (main_28iii_68_unused),
	.alb (main_28iii_68_unused),
	.aleb (main_28iii_68_unused),
	.agb (main_28iii_68_unused),
	.ageb (altfp_compare32_1_main_28iii_68_out),
	.unordered (main_28iii_68_unused)
);


/*   %69 = fcmp olt float %50, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_28iii_69 (
	.dataa (main_10ii_50_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_28iii_69_en),
	.aeb (main_28iii_69_unused),
	.aneb (main_28iii_69_unused),
	.alb (altfp_compare32_1_main_28iii_69_out),
	.aleb (main_28iii_69_unused),
	.agb (main_28iii_69_unused),
	.ageb (main_28iii_69_unused),
	.unordered (main_28iii_69_unused)
);


/*   %70 = fcmp oge float %50, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31iii_70 (
	.dataa (main_10ii_50_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_31iii_70_en),
	.aeb (main_31iii_70_unused),
	.aneb (main_31iii_70_unused),
	.alb (main_31iii_70_unused),
	.aleb (main_31iii_70_unused),
	.agb (main_31iii_70_unused),
	.ageb (altfp_compare32_1_main_31iii_70_out),
	.unordered (main_31iii_70_unused)
);


/*   %71 = fcmp olt float %50, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31iii_71 (
	.dataa (main_10ii_50_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_31iii_71_en),
	.aeb (main_31iii_71_unused),
	.aneb (main_31iii_71_unused),
	.alb (altfp_compare32_1_main_31iii_71_out),
	.aleb (main_31iii_71_unused),
	.agb (main_31iii_71_unused),
	.ageb (main_31iii_71_unused),
	.unordered (main_31iii_71_unused)
);


/*   %82 = fcmp olt float %81, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_15i15i_82 (
	.dataa (main_15i15i_81),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_15i15i_82_en),
	.aeb (main_15i15i_82_unused),
	.aneb (main_15i15i_82_unused),
	.alb (altfp_compare32_1_main_15i15i_82_out),
	.aleb (main_15i15i_82_unused),
	.agb (main_15i15i_82_unused),
	.ageb (main_15i15i_82_unused),
	.unordered (main_15i15i_82_unused)
);


/*   %83 = fcmp oge float %81, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4i3ii_83 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_4i3ii_83_en),
	.aeb (main_4i3ii_83_unused),
	.aneb (main_4i3ii_83_unused),
	.alb (main_4i3ii_83_unused),
	.aleb (main_4i3ii_83_unused),
	.agb (main_4i3ii_83_unused),
	.ageb (altfp_compare32_1_main_4i3ii_83_out),
	.unordered (main_4i3ii_83_unused)
);


/*   %84 = fcmp olt float %81, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4i3ii_84 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_4i3ii_84_en),
	.aeb (main_4i3ii_84_unused),
	.aneb (main_4i3ii_84_unused),
	.alb (altfp_compare32_1_main_4i3ii_84_out),
	.aleb (main_4i3ii_84_unused),
	.agb (main_4i3ii_84_unused),
	.ageb (main_4i3ii_84_unused),
	.unordered (main_4i3ii_84_unused)
);


/*   %85 = fcmp oge float %81, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7i5ii_85 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_7i5ii_85_en),
	.aeb (main_7i5ii_85_unused),
	.aneb (main_7i5ii_85_unused),
	.alb (main_7i5ii_85_unused),
	.aleb (main_7i5ii_85_unused),
	.agb (main_7i5ii_85_unused),
	.ageb (altfp_compare32_1_main_7i5ii_85_out),
	.unordered (main_7i5ii_85_unused)
);


/*   %86 = fcmp olt float %81, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7i5ii_86 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_7i5ii_86_en),
	.aeb (main_7i5ii_86_unused),
	.aneb (main_7i5ii_86_unused),
	.alb (altfp_compare32_1_main_7i5ii_86_out),
	.aleb (main_7i5ii_86_unused),
	.agb (main_7i5ii_86_unused),
	.ageb (main_7i5ii_86_unused),
	.unordered (main_7i5ii_86_unused)
);


/*   %87 = fcmp oge float %81, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10i7ii_87 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_10i7ii_87_en),
	.aeb (main_10i7ii_87_unused),
	.aneb (main_10i7ii_87_unused),
	.alb (main_10i7ii_87_unused),
	.aleb (main_10i7ii_87_unused),
	.agb (main_10i7ii_87_unused),
	.ageb (altfp_compare32_1_main_10i7ii_87_out),
	.unordered (main_10i7ii_87_unused)
);


/*   %88 = fcmp olt float %81, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10i7ii_88 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_10i7ii_88_en),
	.aeb (main_10i7ii_88_unused),
	.aneb (main_10i7ii_88_unused),
	.alb (altfp_compare32_1_main_10i7ii_88_out),
	.aleb (main_10i7ii_88_unused),
	.agb (main_10i7ii_88_unused),
	.ageb (main_10i7ii_88_unused),
	.unordered (main_10i7ii_88_unused)
);


/*   %89 = fcmp oge float %81, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_13i9ii_89 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_13i9ii_89_en),
	.aeb (main_13i9ii_89_unused),
	.aneb (main_13i9ii_89_unused),
	.alb (main_13i9ii_89_unused),
	.aleb (main_13i9ii_89_unused),
	.agb (main_13i9ii_89_unused),
	.ageb (altfp_compare32_1_main_13i9ii_89_out),
	.unordered (main_13i9ii_89_unused)
);


/*   %90 = fcmp olt float %81, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_13i9ii_90 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_13i9ii_90_en),
	.aeb (main_13i9ii_90_unused),
	.aneb (main_13i9ii_90_unused),
	.alb (altfp_compare32_1_main_13i9ii_90_out),
	.aleb (main_13i9ii_90_unused),
	.agb (main_13i9ii_90_unused),
	.ageb (main_13i9ii_90_unused),
	.unordered (main_13i9ii_90_unused)
);


/*   %91 = fcmp oge float %81, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_16i11ii_91 (
	.dataa (main_15i15i_81_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_16i11ii_91_en),
	.aeb (main_16i11ii_91_unused),
	.aneb (main_16i11ii_91_unused),
	.alb (main_16i11ii_91_unused),
	.aleb (main_16i11ii_91_unused),
	.agb (main_16i11ii_91_unused),
	.ageb (altfp_compare32_1_main_16i11ii_91_out),
	.unordered (main_16i11ii_91_unused)
);


/*   %93 = fcmp olt double %92, -2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_16i11ii_93 (
	.dataa (main_16i11ii_92),
	.datab (64'hBFC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_16i11ii_93_en),
	.aeb (main_16i11ii_93_unused),
	.aneb (main_16i11ii_93_unused),
	.alb (altfp_compare64_1_main_16i11ii_93_out),
	.aleb (main_16i11ii_93_unused),
	.agb (main_16i11ii_93_unused),
	.ageb (main_16i11ii_93_unused),
	.unordered (main_16i11ii_93_unused)
);


/*   %94 = fcmp oge double %92, -2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_19i13ii_94 (
	.dataa (main_16i11ii_92_reg),
	.datab (64'hBFC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_19i13ii_94_en),
	.aeb (main_19i13ii_94_unused),
	.aneb (main_19i13ii_94_unused),
	.alb (main_19i13ii_94_unused),
	.aleb (main_19i13ii_94_unused),
	.agb (main_19i13ii_94_unused),
	.ageb (altfp_compare64_1_main_19i13ii_94_out),
	.unordered (main_19i13ii_94_unused)
);


/*   %95 = fcmp olt float %81, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_19i13ii_95 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_19i13ii_95_en),
	.aeb (main_19i13ii_95_unused),
	.aneb (main_19i13ii_95_unused),
	.alb (altfp_compare32_1_main_19i13ii_95_out),
	.aleb (main_19i13ii_95_unused),
	.agb (main_19i13ii_95_unused),
	.ageb (main_19i13ii_95_unused),
	.unordered (main_19i13ii_95_unused)
);


/*   %96 = fcmp oge float %81, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_22i15ii_96 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_22i15ii_96_en),
	.aeb (main_22i15ii_96_unused),
	.aneb (main_22i15ii_96_unused),
	.alb (main_22i15ii_96_unused),
	.aleb (main_22i15ii_96_unused),
	.agb (main_22i15ii_96_unused),
	.ageb (altfp_compare32_1_main_22i15ii_96_out),
	.unordered (main_22i15ii_96_unused)
);


/*   %97 = fcmp olt double %92, 2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_22i15ii_97 (
	.dataa (main_16i11ii_92_reg),
	.datab (64'h3FC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_22i15ii_97_en),
	.aeb (main_22i15ii_97_unused),
	.aneb (main_22i15ii_97_unused),
	.alb (altfp_compare64_1_main_22i15ii_97_out),
	.aleb (main_22i15ii_97_unused),
	.agb (main_22i15ii_97_unused),
	.ageb (main_22i15ii_97_unused),
	.unordered (main_22i15ii_97_unused)
);


/*   %98 = fcmp oge double %92, 2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_25i17ii_98 (
	.dataa (main_16i11ii_92_reg),
	.datab (64'h3FC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_25i17ii_98_en),
	.aeb (main_25i17ii_98_unused),
	.aneb (main_25i17ii_98_unused),
	.alb (main_25i17ii_98_unused),
	.aleb (main_25i17ii_98_unused),
	.agb (main_25i17ii_98_unused),
	.ageb (altfp_compare64_1_main_25i17ii_98_out),
	.unordered (main_25i17ii_98_unused)
);


/*   %99 = fcmp olt float %81, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_25i17ii_99 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_25i17ii_99_en),
	.aeb (main_25i17ii_99_unused),
	.aneb (main_25i17ii_99_unused),
	.alb (altfp_compare32_1_main_25i17ii_99_out),
	.aleb (main_25i17ii_99_unused),
	.agb (main_25i17ii_99_unused),
	.ageb (main_25i17ii_99_unused),
	.unordered (main_25i17ii_99_unused)
);


/*   %100 = fcmp oge float %81, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_28i19ii_100 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_28i19ii_100_en),
	.aeb (main_28i19ii_100_unused),
	.aneb (main_28i19ii_100_unused),
	.alb (main_28i19ii_100_unused),
	.aleb (main_28i19ii_100_unused),
	.agb (main_28i19ii_100_unused),
	.ageb (altfp_compare32_1_main_28i19ii_100_out),
	.unordered (main_28i19ii_100_unused)
);


/*   %101 = fcmp olt float %81, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_28i19ii_101 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_28i19ii_101_en),
	.aeb (main_28i19ii_101_unused),
	.aneb (main_28i19ii_101_unused),
	.alb (altfp_compare32_1_main_28i19ii_101_out),
	.aleb (main_28i19ii_101_unused),
	.agb (main_28i19ii_101_unused),
	.ageb (main_28i19ii_101_unused),
	.unordered (main_28i19ii_101_unused)
);


/*   %102 = fcmp oge float %81, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31i20ii_102 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_31i20ii_102_en),
	.aeb (main_31i20ii_102_unused),
	.aneb (main_31i20ii_102_unused),
	.alb (main_31i20ii_102_unused),
	.aleb (main_31i20ii_102_unused),
	.agb (main_31i20ii_102_unused),
	.ageb (altfp_compare32_1_main_31i20ii_102_out),
	.unordered (main_31i20ii_102_unused)
);


/*   %103 = fcmp olt float %81, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31i20ii_103 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_31i20ii_103_en),
	.aeb (main_31i20ii_103_unused),
	.aneb (main_31i20ii_103_unused),
	.alb (altfp_compare32_1_main_31i20ii_103_out),
	.aleb (main_31i20ii_103_unused),
	.agb (main_31i20ii_103_unused),
	.ageb (main_31i20ii_103_unused),
	.unordered (main_31i20ii_103_unused)
);


/*   %104 = fcmp oge float %81, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_34iii_104 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_34iii_104_en),
	.aeb (main_34iii_104_unused),
	.aneb (main_34iii_104_unused),
	.alb (main_34iii_104_unused),
	.aleb (main_34iii_104_unused),
	.agb (main_34iii_104_unused),
	.ageb (altfp_compare32_1_main_34iii_104_out),
	.unordered (main_34iii_104_unused)
);


/*   %105 = fcmp olt float %81, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_34iii_105 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_34iii_105_en),
	.aeb (main_34iii_105_unused),
	.aneb (main_34iii_105_unused),
	.alb (altfp_compare32_1_main_34iii_105_out),
	.aleb (main_34iii_105_unused),
	.agb (main_34iii_105_unused),
	.ageb (main_34iii_105_unused),
	.unordered (main_34iii_105_unused)
);


/*   %106 = fcmp oge float %81, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_37iii_106 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_37iii_106_en),
	.aeb (main_37iii_106_unused),
	.aneb (main_37iii_106_unused),
	.alb (main_37iii_106_unused),
	.aleb (main_37iii_106_unused),
	.agb (main_37iii_106_unused),
	.ageb (altfp_compare32_1_main_37iii_106_out),
	.unordered (main_37iii_106_unused)
);


/*   %107 = fcmp olt float %81, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_37iii_107 (
	.dataa (main_15i15i_81_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_37iii_107_en),
	.aeb (main_37iii_107_unused),
	.aneb (main_37iii_107_unused),
	.alb (altfp_compare32_1_main_37iii_107_out),
	.aleb (main_37iii_107_unused),
	.agb (main_37iii_107_unused),
	.ageb (main_37iii_107_unused),
	.unordered (main_37iii_107_unused)
);


/*   %118 = fcmp olt float %117, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_101ii_118 (
	.dataa (main_101ii_117),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_101ii_118_en),
	.aeb (main_101ii_118_unused),
	.aneb (main_101ii_118_unused),
	.alb (altfp_compare32_1_main_101ii_118_out),
	.aleb (main_101ii_118_unused),
	.agb (main_101ii_118_unused),
	.ageb (main_101ii_118_unused),
	.unordered (main_101ii_118_unused)
);


/*   %119 = fcmp oge float %117, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4i2ii_119 (
	.dataa (main_101ii_117_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_4i2ii_119_en),
	.aeb (main_4i2ii_119_unused),
	.aneb (main_4i2ii_119_unused),
	.alb (main_4i2ii_119_unused),
	.aleb (main_4i2ii_119_unused),
	.agb (main_4i2ii_119_unused),
	.ageb (altfp_compare32_1_main_4i2ii_119_out),
	.unordered (main_4i2ii_119_unused)
);


/*   %120 = fcmp olt float %117, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_4i2ii_120 (
	.dataa (main_101ii_117_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_4i2ii_120_en),
	.aeb (main_4i2ii_120_unused),
	.aneb (main_4i2ii_120_unused),
	.alb (altfp_compare32_1_main_4i2ii_120_out),
	.aleb (main_4i2ii_120_unused),
	.agb (main_4i2ii_120_unused),
	.ageb (main_4i2ii_120_unused),
	.unordered (main_4i2ii_120_unused)
);


/*   %121 = fcmp oge float %117, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7i4ii_121 (
	.dataa (main_101ii_117_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_7i4ii_121_en),
	.aeb (main_7i4ii_121_unused),
	.aneb (main_7i4ii_121_unused),
	.alb (main_7i4ii_121_unused),
	.aleb (main_7i4ii_121_unused),
	.agb (main_7i4ii_121_unused),
	.ageb (altfp_compare32_1_main_7i4ii_121_out),
	.unordered (main_7i4ii_121_unused)
);


/*   %122 = fcmp olt float %117, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_7i4ii_122 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_7i4ii_122_en),
	.aeb (main_7i4ii_122_unused),
	.aneb (main_7i4ii_122_unused),
	.alb (altfp_compare32_1_main_7i4ii_122_out),
	.aleb (main_7i4ii_122_unused),
	.agb (main_7i4ii_122_unused),
	.ageb (main_7i4ii_122_unused),
	.unordered (main_7i4ii_122_unused)
);


/*   %123 = fcmp oge float %117, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10i6ii_123 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_10i6ii_123_en),
	.aeb (main_10i6ii_123_unused),
	.aneb (main_10i6ii_123_unused),
	.alb (main_10i6ii_123_unused),
	.aleb (main_10i6ii_123_unused),
	.agb (main_10i6ii_123_unused),
	.ageb (altfp_compare32_1_main_10i6ii_123_out),
	.unordered (main_10i6ii_123_unused)
);


/*   %124 = fcmp olt float %117, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_10i6ii_124 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_10i6ii_124_en),
	.aeb (main_10i6ii_124_unused),
	.aneb (main_10i6ii_124_unused),
	.alb (altfp_compare32_1_main_10i6ii_124_out),
	.aleb (main_10i6ii_124_unused),
	.agb (main_10i6ii_124_unused),
	.ageb (main_10i6ii_124_unused),
	.unordered (main_10i6ii_124_unused)
);


/*   %125 = fcmp oge float %117, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_13i8ii_125 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_13i8ii_125_en),
	.aeb (main_13i8ii_125_unused),
	.aneb (main_13i8ii_125_unused),
	.alb (main_13i8ii_125_unused),
	.aleb (main_13i8ii_125_unused),
	.agb (main_13i8ii_125_unused),
	.ageb (altfp_compare32_1_main_13i8ii_125_out),
	.unordered (main_13i8ii_125_unused)
);


/*   %126 = fcmp olt float %117, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_13i8ii_126 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_13i8ii_126_en),
	.aeb (main_13i8ii_126_unused),
	.aneb (main_13i8ii_126_unused),
	.alb (altfp_compare32_1_main_13i8ii_126_out),
	.aleb (main_13i8ii_126_unused),
	.agb (main_13i8ii_126_unused),
	.ageb (main_13i8ii_126_unused),
	.unordered (main_13i8ii_126_unused)
);


/*   %127 = fcmp oge float %117, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_16i10ii_127 (
	.dataa (main_101ii_117_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_16i10ii_127_en),
	.aeb (main_16i10ii_127_unused),
	.aneb (main_16i10ii_127_unused),
	.alb (main_16i10ii_127_unused),
	.aleb (main_16i10ii_127_unused),
	.agb (main_16i10ii_127_unused),
	.ageb (altfp_compare32_1_main_16i10ii_127_out),
	.unordered (main_16i10ii_127_unused)
);


/*   %128 = fcmp olt float %117, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_16i10ii_128 (
	.dataa (main_101ii_117_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_16i10ii_128_en),
	.aeb (main_16i10ii_128_unused),
	.aneb (main_16i10ii_128_unused),
	.alb (altfp_compare32_1_main_16i10ii_128_out),
	.aleb (main_16i10ii_128_unused),
	.agb (main_16i10ii_128_unused),
	.ageb (main_16i10ii_128_unused),
	.unordered (main_16i10ii_128_unused)
);


/*   %129 = fcmp oge float %117, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_19i12ii_129 (
	.dataa (main_101ii_117_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_19i12ii_129_en),
	.aeb (main_19i12ii_129_unused),
	.aneb (main_19i12ii_129_unused),
	.alb (main_19i12ii_129_unused),
	.aleb (main_19i12ii_129_unused),
	.agb (main_19i12ii_129_unused),
	.ageb (altfp_compare32_1_main_19i12ii_129_out),
	.unordered (main_19i12ii_129_unused)
);


/*   %130 = fcmp olt float %117, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_19i12ii_130 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_19i12ii_130_en),
	.aeb (main_19i12ii_130_unused),
	.aneb (main_19i12ii_130_unused),
	.alb (altfp_compare32_1_main_19i12ii_130_out),
	.aleb (main_19i12ii_130_unused),
	.agb (main_19i12ii_130_unused),
	.ageb (main_19i12ii_130_unused),
	.unordered (main_19i12ii_130_unused)
);


/*   %131 = fcmp oge float %117, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_22i14ii_131 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_22i14ii_131_en),
	.aeb (main_22i14ii_131_unused),
	.aneb (main_22i14ii_131_unused),
	.alb (main_22i14ii_131_unused),
	.aleb (main_22i14ii_131_unused),
	.agb (main_22i14ii_131_unused),
	.ageb (altfp_compare32_1_main_22i14ii_131_out),
	.unordered (main_22i14ii_131_unused)
);


/*   %132 = fcmp olt float %117, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_22i14ii_132 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_22i14ii_132_en),
	.aeb (main_22i14ii_132_unused),
	.aneb (main_22i14ii_132_unused),
	.alb (altfp_compare32_1_main_22i14ii_132_out),
	.aleb (main_22i14ii_132_unused),
	.agb (main_22i14ii_132_unused),
	.ageb (main_22i14ii_132_unused),
	.unordered (main_22i14ii_132_unused)
);


/*   %133 = fcmp oge float %117, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_25i16ii_133 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_25i16ii_133_en),
	.aeb (main_25i16ii_133_unused),
	.aneb (main_25i16ii_133_unused),
	.alb (main_25i16ii_133_unused),
	.aleb (main_25i16ii_133_unused),
	.agb (main_25i16ii_133_unused),
	.ageb (altfp_compare32_1_main_25i16ii_133_out),
	.unordered (main_25i16ii_133_unused)
);


/*   %134 = fcmp olt float %117, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_25i16ii_134 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_25i16ii_134_en),
	.aeb (main_25i16ii_134_unused),
	.aneb (main_25i16ii_134_unused),
	.alb (altfp_compare32_1_main_25i16ii_134_out),
	.aleb (main_25i16ii_134_unused),
	.agb (main_25i16ii_134_unused),
	.ageb (main_25i16ii_134_unused),
	.unordered (main_25i16ii_134_unused)
);


/*   %135 = fcmp oge float %117, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_28i18ii_135 (
	.dataa (main_101ii_117_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_28i18ii_135_en),
	.aeb (main_28i18ii_135_unused),
	.aneb (main_28i18ii_135_unused),
	.alb (main_28i18ii_135_unused),
	.aleb (main_28i18ii_135_unused),
	.agb (main_28i18ii_135_unused),
	.ageb (altfp_compare32_1_main_28i18ii_135_out),
	.unordered (main_28i18ii_135_unused)
);


/*   %136 = fcmp olt float %117, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_28i18ii_136 (
	.dataa (main_101ii_117_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_28i18ii_136_en),
	.aeb (main_28i18ii_136_unused),
	.aneb (main_28i18ii_136_unused),
	.alb (altfp_compare32_1_main_28i18ii_136_out),
	.aleb (main_28i18ii_136_unused),
	.agb (main_28i18ii_136_unused),
	.ageb (main_28i18ii_136_unused),
	.unordered (main_28i18ii_136_unused)
);


/*   %137 = fcmp oge float %117, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31i22ii_137 (
	.dataa (main_101ii_117_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_31i22ii_137_en),
	.aeb (main_31i22ii_137_unused),
	.aneb (main_31i22ii_137_unused),
	.alb (main_31i22ii_137_unused),
	.aleb (main_31i22ii_137_unused),
	.agb (main_31i22ii_137_unused),
	.ageb (altfp_compare32_1_main_31i22ii_137_out),
	.unordered (main_31i22ii_137_unused)
);


/*   %138 = fcmp olt float %117, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_31i22ii_138 (
	.dataa (main_101ii_117_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_31i22ii_138_en),
	.aeb (main_31i22ii_138_unused),
	.aneb (main_31i22ii_138_unused),
	.alb (altfp_compare32_1_main_31i22ii_138_out),
	.aleb (main_31i22ii_138_unused),
	.agb (main_31i22ii_138_unused),
	.ageb (main_31i22ii_138_unused),
	.unordered (main_31i22ii_138_unused)
);


/*   %218 = fcmp ogt float %217, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_sqrtfexit_218 (
	.dataa (main_sqrtfexit_217),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_sqrtfexit_218_en),
	.aeb (main_sqrtfexit_218_unused),
	.aneb (main_sqrtfexit_218_unused),
	.alb (main_sqrtfexit_218_unused),
	.aleb (main_sqrtfexit_218_unused),
	.agb (altfp_compare32_1_main_sqrtfexit_218_out),
	.ageb (main_sqrtfexit_218_unused),
	.unordered (main_sqrtfexit_218_unused)
);


/*   %225 = fcmp ogt float %224, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_8i3i_225 (
	.dataa (main_8i3i_224),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_8i3i_225_en),
	.aeb (main_8i3i_225_unused),
	.aneb (main_8i3i_225_unused),
	.alb (main_8i3i_225_unused),
	.aleb (main_8i3i_225_unused),
	.agb (altfp_compare32_1_main_8i3i_225_out),
	.ageb (main_8i3i_225_unused),
	.unordered (main_8i3i_225_unused)
);


/*   %233 = fcmp olt double %232, 1.000000e-06*/
altfp_compare64_1 altfp_compare64_1_main_convergedexit13i_233 (
	.dataa (main_convergedexit13i_232),
	.datab (64'h3EB0C6F7A0B5ED8D),
	.clock (clk),
	.clk_en (altfp_main_convergedexit13i_233_en),
	.aeb (main_convergedexit13i_233_unused),
	.aneb (main_convergedexit13i_233_unused),
	.alb (altfp_compare64_1_main_convergedexit13i_233_out),
	.aleb (main_convergedexit13i_233_unused),
	.agb (main_convergedexit13i_233_unused),
	.ageb (main_convergedexit13i_233_unused),
	.unordered (main_convergedexit13i_233_unused)
);



legup_omp_rotate_omp_fn0 legup_omp_rotate_omp_fn0 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_omp_rotate_omp_fn0_memory_controller_enable_a),
	.memory_controller_address_a (legup_omp_rotate_omp_fn0_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_omp_rotate_omp_fn0_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_omp_rotate_omp_fn0_memory_controller_in_a),
	.memory_controller_size_a (legup_omp_rotate_omp_fn0_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_omp_rotate_omp_fn0_memory_controller_enable_b),
	.memory_controller_address_b (legup_omp_rotate_omp_fn0_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_omp_rotate_omp_fn0_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_omp_rotate_omp_fn0_memory_controller_in_b),
	.memory_controller_size_b (legup_omp_rotate_omp_fn0_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_omp_rotate_omp_fn0_start),
	.finish (legup_omp_rotate_omp_fn0_finish)
);

defparam
	legup_omp_rotate_omp_fn0.tag_offset = tag_offset;


legup_omp_rotate_omp_fn1 legup_omp_rotate_omp_fn1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_omp_rotate_omp_fn1_memory_controller_enable_a),
	.memory_controller_address_a (legup_omp_rotate_omp_fn1_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_omp_rotate_omp_fn1_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_omp_rotate_omp_fn1_memory_controller_in_a),
	.memory_controller_size_a (legup_omp_rotate_omp_fn1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_omp_rotate_omp_fn1_memory_controller_enable_b),
	.memory_controller_address_b (legup_omp_rotate_omp_fn1_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_omp_rotate_omp_fn1_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_omp_rotate_omp_fn1_memory_controller_in_b),
	.memory_controller_size_b (legup_omp_rotate_omp_fn1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_omp_rotate_omp_fn1_start),
	.finish (legup_omp_rotate_omp_fn1_finish)
);

defparam
	legup_omp_rotate_omp_fn1.tag_offset = tag_offset;


legup_omp_rotate_omp_fn2 legup_omp_rotate_omp_fn2 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_omp_rotate_omp_fn2_memory_controller_enable_a),
	.memory_controller_address_a (legup_omp_rotate_omp_fn2_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_omp_rotate_omp_fn2_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_omp_rotate_omp_fn2_memory_controller_in_a),
	.memory_controller_size_a (legup_omp_rotate_omp_fn2_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_omp_rotate_omp_fn2_memory_controller_enable_b),
	.memory_controller_address_b (legup_omp_rotate_omp_fn2_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_omp_rotate_omp_fn2_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_omp_rotate_omp_fn2_memory_controller_in_b),
	.memory_controller_size_b (legup_omp_rotate_omp_fn2_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_omp_rotate_omp_fn2_start),
	.finish (legup_omp_rotate_omp_fn2_finish)
);

defparam
	legup_omp_rotate_omp_fn2.tag_offset = tag_offset;


legup_omp_normalize_omp_fn3 legup_omp_normalize_omp_fn3 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_omp_normalize_omp_fn3_memory_controller_enable_a),
	.memory_controller_address_a (legup_omp_normalize_omp_fn3_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_omp_normalize_omp_fn3_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_omp_normalize_omp_fn3_memory_controller_in_a),
	.memory_controller_size_a (legup_omp_normalize_omp_fn3_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_omp_normalize_omp_fn3_memory_controller_enable_b),
	.memory_controller_address_b (legup_omp_normalize_omp_fn3_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_omp_normalize_omp_fn3_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_omp_normalize_omp_fn3_memory_controller_in_b),
	.memory_controller_size_b (legup_omp_normalize_omp_fn3_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_omp_normalize_omp_fn3_start),
	.finish (legup_omp_normalize_omp_fn3_finish),
	.arg_omp_data_i (legup_omp_normalize_omp_fn3_arg_omp_data_i)
);

defparam
	legup_omp_normalize_omp_fn3.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %"3.i"*/
	/*   %32 = tail call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([46 x i8]* @.cst1, i32 0, i32 0), i32 %31, i32 %27, i32 %28, i32 %29, i32 %30) #0*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		$write("iteration %d : w = [%d %d], w_next = [%d %d]\n", $signed(main_3i_31_reg), main_3i_27_reg, main_3i_28_reg, main_3i_29_reg, main_3i_30_reg);
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_3i_31_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_27_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_28_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_29_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_30_reg) === 1'bX) finish <= 0;
	end
	/* main: %"3.i"*/
	/*   %35 = tail call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([18 x i8]* @.cst, i32 0, i32 0), i32 0, i32 %34) #0*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		$write("(w_next[%d]: %d)\n", $signed(32'd0), main_3i_34_reg);
		// to fix quartus warning
		if (reset == 1'b0 && ^(32'd0) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_34_reg) === 1'bX) finish <= 0;
	end
	/* main: %"3.i"*/
	/*   %38 = tail call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([18 x i8]* @.cst, i32 0, i32 0), i32 1, i32 %37) #0*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		$write("(w_next[%d]: %d)\n", $signed(32'd1), main_3i_37_reg);
		// to fix quartus warning
		if (reset == 1'b0 && ^(32'd1) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3i_37_reg) === 1'bX) finish <= 0;
	end
	/* main: %fastica.exit*/
	/*   %237 = tail call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([34 x i8]* @.cst2, i32 0, i32 0), i32 %235, i32 %236) #0*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_727)) begin
		$write("The unmixing vector is : [%d %d]\n", main_fasticaexit_235_reg, main_fasticaexit_236_reg);
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_fasticaexit_235_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_fasticaexit_236_reg) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_entry_1;
LEGUP_F_main_BB__101ii_354:
		next_state = LEGUP_F_main_BB__101ii_355;
LEGUP_F_main_BB__101ii_355:
		next_state = LEGUP_F_main_BB__101ii_356;
LEGUP_F_main_BB__101ii_356:
		next_state = LEGUP_F_main_BB__101ii_357;
LEGUP_F_main_BB__101ii_357:
	if ((main_101ii_118 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_101ii_118 == 1'd0))
		next_state = LEGUP_F_main_BB__4i2ii_358;
LEGUP_F_main_BB__10i6ii_362:
		next_state = LEGUP_F_main_BB__10i6ii_363;
LEGUP_F_main_BB__10i6ii_363:
	if ((main_10i6ii_orcond2i5ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_10i6ii_orcond2i5ii == 1'd0))
		next_state = LEGUP_F_main_BB__13i8ii_364;
LEGUP_F_main_BB__10i7ii_292:
		next_state = LEGUP_F_main_BB__10i7ii_293;
LEGUP_F_main_BB__10i7ii_293:
	if ((main_10i7ii_orcond2i6ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_10i7ii_orcond2i6ii == 1'd0))
		next_state = LEGUP_F_main_BB__13i9ii_294;
LEGUP_F_main_BB__10ii_207:
		next_state = LEGUP_F_main_BB__10ii_208;
LEGUP_F_main_BB__10ii_208:
		next_state = LEGUP_F_main_BB__10ii_209;
LEGUP_F_main_BB__10ii_209:
		next_state = LEGUP_F_main_BB__10ii_210;
LEGUP_F_main_BB__10ii_210:
	if ((main_10ii_51 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_10ii_51 == 1'd0))
		next_state = LEGUP_F_main_BB__4iii_211;
LEGUP_F_main_BB__10iii_215:
		next_state = LEGUP_F_main_BB__10iii_216;
LEGUP_F_main_BB__10iii_216:
	if ((main_10iii_orcond2iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_10iii_orcond2iii == 1'd0))
		next_state = LEGUP_F_main_BB__13iii_217;
LEGUP_F_main_BB__11i5i_647:
		next_state = LEGUP_F_main_BB__11i5i_648;
LEGUP_F_main_BB__11i5i_648:
		next_state = LEGUP_F_main_BB__11i5i_649;
LEGUP_F_main_BB__11i5i_649:
		next_state = LEGUP_F_main_BB__11i5i_650;
LEGUP_F_main_BB__11i5i_650:
		next_state = LEGUP_F_main_BB__11i5i_651;
LEGUP_F_main_BB__11i5i_651:
		next_state = LEGUP_F_main_BB__11i5i_652;
LEGUP_F_main_BB__11i5i_652:
		next_state = LEGUP_F_main_BB__11i5i_653;
LEGUP_F_main_BB__11i5i_653:
		next_state = LEGUP_F_main_BB__11i5i_654;
LEGUP_F_main_BB__11i5i_654:
		next_state = LEGUP_F_main_BB__11i5i_655;
LEGUP_F_main_BB__11i5i_655:
		next_state = LEGUP_F_main_BB__11i5i_656;
LEGUP_F_main_BB__11i5i_656:
		next_state = LEGUP_F_main_BB__11i5i_657;
LEGUP_F_main_BB__11i5i_657:
		next_state = LEGUP_F_main_BB__11i5i_658;
LEGUP_F_main_BB__11i5i_658:
		next_state = LEGUP_F_main_BB__11i5i_659;
LEGUP_F_main_BB__11i5i_659:
		next_state = LEGUP_F_main_BB__11i5i_660;
LEGUP_F_main_BB__11i5i_660:
		next_state = LEGUP_F_main_BB__11i5i_661;
LEGUP_F_main_BB__11i5i_661:
		next_state = LEGUP_F_main_BB__12i7i_662;
LEGUP_F_main_BB__11ii_76:
		next_state = LEGUP_F_main_BB__11ii_77;
LEGUP_F_main_BB__11ii_77:
		next_state = LEGUP_F_main_BB__11ii_78;
LEGUP_F_main_BB__11ii_78:
		next_state = LEGUP_F_main_BB__11ii_79;
LEGUP_F_main_BB__11ii_79:
		next_state = LEGUP_F_main_BB__11ii_80;
LEGUP_F_main_BB__11ii_80:
		next_state = LEGUP_F_main_BB__11ii_81;
LEGUP_F_main_BB__11ii_81:
		next_state = LEGUP_F_main_BB__11ii_82;
LEGUP_F_main_BB__11ii_82:
		next_state = LEGUP_F_main_BB__11ii_83;
LEGUP_F_main_BB__11ii_83:
		next_state = LEGUP_F_main_BB__11ii_84;
LEGUP_F_main_BB__11ii_84:
		next_state = LEGUP_F_main_BB__11ii_85;
LEGUP_F_main_BB__11ii_85:
		next_state = LEGUP_F_main_BB__11ii_86;
LEGUP_F_main_BB__11ii_86:
		next_state = LEGUP_F_main_BB__11ii_87;
LEGUP_F_main_BB__11ii_87:
		next_state = LEGUP_F_main_BB__11ii_88;
LEGUP_F_main_BB__11ii_88:
		next_state = LEGUP_F_main_BB__11ii_89;
LEGUP_F_main_BB__11ii_89:
		next_state = LEGUP_F_main_BB__11ii_90;
LEGUP_F_main_BB__11ii_90:
		next_state = LEGUP_F_main_BB__12ii_91;
LEGUP_F_main_BB__121ii_429:
		next_state = LEGUP_F_main_BB__121ii_430;
LEGUP_F_main_BB__121ii_430:
		next_state = LEGUP_F_main_BB__15i15i_284;
LEGUP_F_main_BB__12i14i_282:
		next_state = LEGUP_F_main_BB__12i14i_283;
LEGUP_F_main_BB__12i14i_283:
		next_state = LEGUP_F_main_BB__101ii_354;
LEGUP_F_main_BB__12i7i_662:
		next_state = LEGUP_F_main_BB__12i7i_663;
LEGUP_F_main_BB__12i7i_663:
		next_state = LEGUP_F_main_BB__12i7i_664;
LEGUP_F_main_BB__12i7i_664:
		next_state = LEGUP_F_main_BB__12i7i_665;
LEGUP_F_main_BB__12i7i_665:
		next_state = LEGUP_F_main_BB__12i7i_666;
LEGUP_F_main_BB__12i7i_666:
		next_state = LEGUP_F_main_BB__12i7i_667;
LEGUP_F_main_BB__12i7i_667:
		next_state = LEGUP_F_main_BB__12i7i_668;
LEGUP_F_main_BB__12i7i_668:
		next_state = LEGUP_F_main_BB__12i7i_669;
LEGUP_F_main_BB__12i7i_669:
		next_state = LEGUP_F_main_BB__12i7i_670;
LEGUP_F_main_BB__12i7i_670:
		next_state = LEGUP_F_main_BB__12i7i_671;
LEGUP_F_main_BB__12i7i_671:
		next_state = LEGUP_F_main_BB__12i7i_672;
LEGUP_F_main_BB__12i7i_672:
		next_state = LEGUP_F_main_BB__12i7i_673;
LEGUP_F_main_BB__12i7i_673:
		next_state = LEGUP_F_main_BB__12i7i_674;
LEGUP_F_main_BB__12i7i_674:
		next_state = LEGUP_F_main_BB__12i7i_675;
LEGUP_F_main_BB__12i7i_675:
		next_state = LEGUP_F_main_BB__12i7i_676;
LEGUP_F_main_BB__12i7i_676:
		next_state = LEGUP_F_main_BB_convergedexit13i_722;
LEGUP_F_main_BB__12ii_100:
		next_state = LEGUP_F_main_BB__12ii_101;
LEGUP_F_main_BB__12ii_101:
		next_state = LEGUP_F_main_BB__12ii_102;
LEGUP_F_main_BB__12ii_102:
		next_state = LEGUP_F_main_BB__12ii_103;
LEGUP_F_main_BB__12ii_103:
		next_state = LEGUP_F_main_BB__12ii_104;
LEGUP_F_main_BB__12ii_104:
		next_state = LEGUP_F_main_BB__12ii_105;
LEGUP_F_main_BB__12ii_105:
		next_state = LEGUP_F_main_BB_convergedexiti_151;
LEGUP_F_main_BB__12ii_91:
		next_state = LEGUP_F_main_BB__12ii_92;
LEGUP_F_main_BB__12ii_92:
		next_state = LEGUP_F_main_BB__12ii_93;
LEGUP_F_main_BB__12ii_93:
		next_state = LEGUP_F_main_BB__12ii_94;
LEGUP_F_main_BB__12ii_94:
		next_state = LEGUP_F_main_BB__12ii_95;
LEGUP_F_main_BB__12ii_95:
		next_state = LEGUP_F_main_BB__12ii_96;
LEGUP_F_main_BB__12ii_96:
		next_state = LEGUP_F_main_BB__12ii_97;
LEGUP_F_main_BB__12ii_97:
		next_state = LEGUP_F_main_BB__12ii_98;
LEGUP_F_main_BB__12ii_98:
		next_state = LEGUP_F_main_BB__12ii_99;
LEGUP_F_main_BB__12ii_99:
		next_state = LEGUP_F_main_BB__12ii_100;
LEGUP_F_main_BB__13i8i_677:
	if ((main_sqrtfexit_218_reg == 1'd1))
		next_state = LEGUP_F_main_BB__16i11i_693;
	else if ((main_sqrtfexit_218_reg == 1'd0))
		next_state = LEGUP_F_main_BB__15i9i_678;
LEGUP_F_main_BB__13i8ii_364:
		next_state = LEGUP_F_main_BB__13i8ii_365;
LEGUP_F_main_BB__13i8ii_365:
	if ((main_13i8ii_orcond3i7ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_13i8ii_orcond3i7ii == 1'd0))
		next_state = LEGUP_F_main_BB__16i10ii_366;
LEGUP_F_main_BB__13i9ii_294:
		next_state = LEGUP_F_main_BB__13i9ii_295;
LEGUP_F_main_BB__13i9ii_295:
	if ((main_13i9ii_orcond3i8ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_13i9ii_orcond3i8ii == 1'd0))
		next_state = LEGUP_F_main_BB__16i11ii_296;
LEGUP_F_main_BB__13ii_106:
	if ((main_entry_8_reg == 1'd1))
		next_state = LEGUP_F_main_BB__16ii_122;
	else if ((main_entry_8_reg == 1'd0))
		next_state = LEGUP_F_main_BB__15ii_107;
LEGUP_F_main_BB__13iii_217:
		next_state = LEGUP_F_main_BB__13iii_218;
LEGUP_F_main_BB__13iii_218:
	if ((main_13iii_orcond3iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_13iii_orcond3iii == 1'd0))
		next_state = LEGUP_F_main_BB__16iii_219;
LEGUP_F_main_BB__156_480:
		next_state = LEGUP_F_main_BB__156_481;
LEGUP_F_main_BB__156_481:
		next_state = LEGUP_F_main_BB__156_482;
LEGUP_F_main_BB__156_482:
		next_state = LEGUP_F_main_BB__156_483;
LEGUP_F_main_BB__156_483:
		next_state = LEGUP_F_main_BB__156_484;
LEGUP_F_main_BB__156_484:
		next_state = LEGUP_F_main_BB__156_485;
LEGUP_F_main_BB__156_485:
		next_state = LEGUP_F_main_BB__156_486;
LEGUP_F_main_BB__156_486:
		next_state = LEGUP_F_main_BB__156_487;
LEGUP_F_main_BB__156_487:
		next_state = LEGUP_F_main_BB__156_488;
LEGUP_F_main_BB__156_488:
		next_state = LEGUP_F_main_BB__156_489;
LEGUP_F_main_BB__156_489:
		next_state = LEGUP_F_main_BB__156_490;
LEGUP_F_main_BB__156_490:
		next_state = LEGUP_F_main_BB__156_491;
LEGUP_F_main_BB__156_491:
		next_state = LEGUP_F_main_BB__156_492;
LEGUP_F_main_BB__156_492:
		next_state = LEGUP_F_main_BB__156_493;
LEGUP_F_main_BB__156_493:
		next_state = LEGUP_F_main_BB__156_494;
LEGUP_F_main_BB__156_494:
		next_state = LEGUP_F_main_BB__156_495;
LEGUP_F_main_BB__156_495:
		next_state = LEGUP_F_main_BB__156_496;
LEGUP_F_main_BB__156_496:
		next_state = LEGUP_F_main_BB__156_497;
LEGUP_F_main_BB__156_497:
		next_state = LEGUP_F_main_BB__156_498;
LEGUP_F_main_BB__156_498:
		next_state = LEGUP_F_main_BB__156_499;
LEGUP_F_main_BB__156_499:
		next_state = LEGUP_F_main_BB__156_500;
LEGUP_F_main_BB__156_500:
		next_state = LEGUP_F_main_BB__156_501;
LEGUP_F_main_BB__156_501:
		next_state = LEGUP_F_main_BB__156_502;
LEGUP_F_main_BB__156_502:
		next_state = LEGUP_F_main_BB__156_503;
LEGUP_F_main_BB__156_503:
		next_state = LEGUP_F_main_BB__156_504;
LEGUP_F_main_BB__156_504:
		next_state = LEGUP_F_main_BB__156_505;
LEGUP_F_main_BB__156_505:
		next_state = LEGUP_F_main_BB_sqrtfexit_569;
LEGUP_F_main_BB__159_506:
	if ((main_159_160 == 1'd1))
		next_state = LEGUP_F_main_BB_sqrtfexit_569;
	else if ((main_159_160 == 1'd0))
		next_state = LEGUP_F_main_BB__161_507;
LEGUP_F_main_BB__15i15i_284:
		next_state = LEGUP_F_main_BB__15i15i_285;
LEGUP_F_main_BB__15i15i_285:
		next_state = LEGUP_F_main_BB__15i15i_286;
LEGUP_F_main_BB__15i15i_286:
		next_state = LEGUP_F_main_BB__15i15i_287;
LEGUP_F_main_BB__15i15i_287:
	if ((main_15i15i_82 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_15i15i_82 == 1'd0))
		next_state = LEGUP_F_main_BB__4i3ii_288;
LEGUP_F_main_BB__15i9i_678:
		next_state = LEGUP_F_main_BB__15i9i_679;
LEGUP_F_main_BB__15i9i_679:
		next_state = LEGUP_F_main_BB__15i9i_680;
LEGUP_F_main_BB__15i9i_680:
		next_state = LEGUP_F_main_BB__15i9i_681;
LEGUP_F_main_BB__15i9i_681:
		next_state = LEGUP_F_main_BB__15i9i_682;
LEGUP_F_main_BB__15i9i_682:
		next_state = LEGUP_F_main_BB__15i9i_683;
LEGUP_F_main_BB__15i9i_683:
		next_state = LEGUP_F_main_BB__15i9i_684;
LEGUP_F_main_BB__15i9i_684:
		next_state = LEGUP_F_main_BB__15i9i_685;
LEGUP_F_main_BB__15i9i_685:
		next_state = LEGUP_F_main_BB__15i9i_686;
LEGUP_F_main_BB__15i9i_686:
		next_state = LEGUP_F_main_BB__15i9i_687;
LEGUP_F_main_BB__15i9i_687:
		next_state = LEGUP_F_main_BB__15i9i_688;
LEGUP_F_main_BB__15i9i_688:
		next_state = LEGUP_F_main_BB__15i9i_689;
LEGUP_F_main_BB__15i9i_689:
		next_state = LEGUP_F_main_BB__15i9i_690;
LEGUP_F_main_BB__15i9i_690:
		next_state = LEGUP_F_main_BB__15i9i_691;
LEGUP_F_main_BB__15i9i_691:
		next_state = LEGUP_F_main_BB__15i9i_692;
LEGUP_F_main_BB__15i9i_692:
		next_state = LEGUP_F_main_BB__16i11i_693;
LEGUP_F_main_BB__15ii_107:
		next_state = LEGUP_F_main_BB__15ii_108;
LEGUP_F_main_BB__15ii_108:
		next_state = LEGUP_F_main_BB__15ii_109;
LEGUP_F_main_BB__15ii_109:
		next_state = LEGUP_F_main_BB__15ii_110;
LEGUP_F_main_BB__15ii_110:
		next_state = LEGUP_F_main_BB__15ii_111;
LEGUP_F_main_BB__15ii_111:
		next_state = LEGUP_F_main_BB__15ii_112;
LEGUP_F_main_BB__15ii_112:
		next_state = LEGUP_F_main_BB__15ii_113;
LEGUP_F_main_BB__15ii_113:
		next_state = LEGUP_F_main_BB__15ii_114;
LEGUP_F_main_BB__15ii_114:
		next_state = LEGUP_F_main_BB__15ii_115;
LEGUP_F_main_BB__15ii_115:
		next_state = LEGUP_F_main_BB__15ii_116;
LEGUP_F_main_BB__15ii_116:
		next_state = LEGUP_F_main_BB__15ii_117;
LEGUP_F_main_BB__15ii_117:
		next_state = LEGUP_F_main_BB__15ii_118;
LEGUP_F_main_BB__15ii_118:
		next_state = LEGUP_F_main_BB__15ii_119;
LEGUP_F_main_BB__15ii_119:
		next_state = LEGUP_F_main_BB__15ii_120;
LEGUP_F_main_BB__15ii_120:
		next_state = LEGUP_F_main_BB__15ii_121;
LEGUP_F_main_BB__15ii_121:
		next_state = LEGUP_F_main_BB__16ii_122;
LEGUP_F_main_BB__161_507:
	if ((main_161_162 == 1'd1))
		next_state = LEGUP_F_main_BB__163_508;
	else if ((main_161_162 == 1'd0))
		next_state = LEGUP_F_main_BB__166_556;
LEGUP_F_main_BB__163_508:
		next_state = LEGUP_F_main_BB__163_509;
LEGUP_F_main_BB__163_509:
		next_state = LEGUP_F_main_BB__163_510;
LEGUP_F_main_BB__163_510:
		next_state = LEGUP_F_main_BB__163_511;
LEGUP_F_main_BB__163_511:
		next_state = LEGUP_F_main_BB__163_512;
LEGUP_F_main_BB__163_512:
		next_state = LEGUP_F_main_BB__163_513;
LEGUP_F_main_BB__163_513:
		next_state = LEGUP_F_main_BB__163_514;
LEGUP_F_main_BB__163_514:
		next_state = LEGUP_F_main_BB__163_515;
LEGUP_F_main_BB__163_515:
		next_state = LEGUP_F_main_BB__163_516;
LEGUP_F_main_BB__163_516:
		next_state = LEGUP_F_main_BB__163_517;
LEGUP_F_main_BB__163_517:
		next_state = LEGUP_F_main_BB__163_518;
LEGUP_F_main_BB__163_518:
		next_state = LEGUP_F_main_BB__163_519;
LEGUP_F_main_BB__163_519:
		next_state = LEGUP_F_main_BB__163_520;
LEGUP_F_main_BB__163_520:
		next_state = LEGUP_F_main_BB__163_521;
LEGUP_F_main_BB__163_521:
		next_state = LEGUP_F_main_BB__163_522;
LEGUP_F_main_BB__163_522:
		next_state = LEGUP_F_main_BB__163_523;
LEGUP_F_main_BB__163_523:
		next_state = LEGUP_F_main_BB__163_524;
LEGUP_F_main_BB__163_524:
		next_state = LEGUP_F_main_BB__163_525;
LEGUP_F_main_BB__163_525:
		next_state = LEGUP_F_main_BB__163_526;
LEGUP_F_main_BB__163_526:
		next_state = LEGUP_F_main_BB__163_527;
LEGUP_F_main_BB__163_527:
		next_state = LEGUP_F_main_BB__163_528;
LEGUP_F_main_BB__163_528:
		next_state = LEGUP_F_main_BB__163_529;
LEGUP_F_main_BB__163_529:
		next_state = LEGUP_F_main_BB__163_530;
LEGUP_F_main_BB__163_530:
		next_state = LEGUP_F_main_BB__163_531;
LEGUP_F_main_BB__163_531:
		next_state = LEGUP_F_main_BB__163_532;
LEGUP_F_main_BB__163_532:
		next_state = LEGUP_F_main_BB__163_533;
LEGUP_F_main_BB__163_533:
		next_state = LEGUP_F_main_BB__163_534;
LEGUP_F_main_BB__163_534:
		next_state = LEGUP_F_main_BB__163_535;
LEGUP_F_main_BB__163_535:
		next_state = LEGUP_F_main_BB__163_536;
LEGUP_F_main_BB__163_536:
		next_state = LEGUP_F_main_BB__163_537;
LEGUP_F_main_BB__163_537:
		next_state = LEGUP_F_main_BB__163_538;
LEGUP_F_main_BB__163_538:
		next_state = LEGUP_F_main_BB__163_539;
LEGUP_F_main_BB__163_539:
		next_state = LEGUP_F_main_BB__163_540;
LEGUP_F_main_BB__163_540:
		next_state = LEGUP_F_main_BB__163_541;
LEGUP_F_main_BB__163_541:
		next_state = LEGUP_F_main_BB__163_542;
LEGUP_F_main_BB__163_542:
		next_state = LEGUP_F_main_BB__163_543;
LEGUP_F_main_BB__163_543:
		next_state = LEGUP_F_main_BB__163_544;
LEGUP_F_main_BB__163_544:
		next_state = LEGUP_F_main_BB__163_545;
LEGUP_F_main_BB__163_545:
		next_state = LEGUP_F_main_BB__163_546;
LEGUP_F_main_BB__163_546:
		next_state = LEGUP_F_main_BB__163_547;
LEGUP_F_main_BB__163_547:
		next_state = LEGUP_F_main_BB__163_548;
LEGUP_F_main_BB__163_548:
		next_state = LEGUP_F_main_BB__163_549;
LEGUP_F_main_BB__163_549:
		next_state = LEGUP_F_main_BB__163_550;
LEGUP_F_main_BB__163_550:
		next_state = LEGUP_F_main_BB__163_551;
LEGUP_F_main_BB__163_551:
		next_state = LEGUP_F_main_BB__163_552;
LEGUP_F_main_BB__163_552:
		next_state = LEGUP_F_main_BB__163_553;
LEGUP_F_main_BB__163_553:
		next_state = LEGUP_F_main_BB__163_554;
LEGUP_F_main_BB__163_554:
		next_state = LEGUP_F_main_BB__163_555;
LEGUP_F_main_BB__163_555:
		next_state = LEGUP_F_main_BB_sqrtfexit_569;
LEGUP_F_main_BB__166_556:
	if ((main_166_168 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_557;
	else if ((main_166_168 == 1'd0))
		next_state = LEGUP_F_main_BB__179_561;
LEGUP_F_main_BB__169_558:
	if ((main_169_172 == 1'd1))
		next_state = LEGUP_F_main_BB__173_559;
	else if ((main_169_172 == 1'd0))
		next_state = LEGUP_F_main_BB__176_560;
LEGUP_F_main_BB__16i10ii_366:
		next_state = LEGUP_F_main_BB__16i10ii_367;
LEGUP_F_main_BB__16i10ii_367:
	if ((main_16i10ii_orcond4i9ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_16i10ii_orcond4i9ii == 1'd0))
		next_state = LEGUP_F_main_BB__19i12ii_368;
LEGUP_F_main_BB__16i11i_693:
		next_state = LEGUP_F_main_BB__16i11i_694;
LEGUP_F_main_BB__16i11i_694:
		next_state = LEGUP_F_main_BB__16i11i_695;
LEGUP_F_main_BB__16i11i_695:
		next_state = LEGUP_F_main_BB__16i11i_696;
LEGUP_F_main_BB__16i11i_696:
		next_state = LEGUP_F_main_BB__16i11i_697;
LEGUP_F_main_BB__16i11i_697:
		next_state = LEGUP_F_main_BB__16i11i_698;
LEGUP_F_main_BB__16i11i_698:
		next_state = LEGUP_F_main_BB__16i11i_699;
LEGUP_F_main_BB__16i11i_699:
		next_state = LEGUP_F_main_BB__16i11i_700;
LEGUP_F_main_BB__16i11i_700:
		next_state = LEGUP_F_main_BB__16i11i_701;
LEGUP_F_main_BB__16i11i_701:
		next_state = LEGUP_F_main_BB__16i11i_702;
LEGUP_F_main_BB__16i11i_702:
		next_state = LEGUP_F_main_BB__16i11i_703;
LEGUP_F_main_BB__16i11i_703:
		next_state = LEGUP_F_main_BB__16i11i_704;
LEGUP_F_main_BB__16i11i_704:
		next_state = LEGUP_F_main_BB__16i11i_705;
LEGUP_F_main_BB__16i11i_705:
		next_state = LEGUP_F_main_BB__16i11i_706;
LEGUP_F_main_BB__16i11i_706:
		next_state = LEGUP_F_main_BB__16i11i_707;
LEGUP_F_main_BB__16i11i_707:
		next_state = LEGUP_F_main_BB__16i11i_708;
LEGUP_F_main_BB__16i11i_708:
		next_state = LEGUP_F_main_BB__16i11i_709;
LEGUP_F_main_BB__16i11i_709:
		next_state = LEGUP_F_main_BB__16i11i_710;
LEGUP_F_main_BB__16i11i_710:
		next_state = LEGUP_F_main_BB__16i11i_711;
LEGUP_F_main_BB__16i11i_711:
		next_state = LEGUP_F_main_BB__16i11i_712;
LEGUP_F_main_BB__16i11i_712:
		next_state = LEGUP_F_main_BB__16i11i_713;
LEGUP_F_main_BB__16i11i_713:
		next_state = LEGUP_F_main_BB__16i11i_714;
LEGUP_F_main_BB__16i11i_714:
		next_state = LEGUP_F_main_BB__16i11i_715;
LEGUP_F_main_BB__16i11i_715:
		next_state = LEGUP_F_main_BB__16i11i_716;
LEGUP_F_main_BB__16i11i_716:
		next_state = LEGUP_F_main_BB__16i11i_717;
LEGUP_F_main_BB__16i11i_717:
		next_state = LEGUP_F_main_BB__16i11i_718;
LEGUP_F_main_BB__16i11i_718:
		next_state = LEGUP_F_main_BB__16i11i_719;
LEGUP_F_main_BB__16i11i_719:
		next_state = LEGUP_F_main_BB__16i11i_720;
LEGUP_F_main_BB__16i11i_720:
		next_state = LEGUP_F_main_BB__16i11i_721;
LEGUP_F_main_BB__16i11i_721:
		next_state = LEGUP_F_main_BB_convergedexit13i_722;
LEGUP_F_main_BB__16i11ii_296:
		next_state = LEGUP_F_main_BB__16i11ii_297;
LEGUP_F_main_BB__16i11ii_297:
		next_state = LEGUP_F_main_BB__16i11ii_298;
LEGUP_F_main_BB__16i11ii_298:
		next_state = LEGUP_F_main_BB__16i11ii_299;
LEGUP_F_main_BB__16i11ii_299:
	if ((main_16i11ii_orcond5i10ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_16i11ii_orcond5i10ii == 1'd0))
		next_state = LEGUP_F_main_BB__19i13ii_300;
LEGUP_F_main_BB__16ii_122:
		next_state = LEGUP_F_main_BB__16ii_123;
LEGUP_F_main_BB__16ii_123:
		next_state = LEGUP_F_main_BB__16ii_124;
LEGUP_F_main_BB__16ii_124:
		next_state = LEGUP_F_main_BB__16ii_125;
LEGUP_F_main_BB__16ii_125:
		next_state = LEGUP_F_main_BB__16ii_126;
LEGUP_F_main_BB__16ii_126:
		next_state = LEGUP_F_main_BB__16ii_127;
LEGUP_F_main_BB__16ii_127:
		next_state = LEGUP_F_main_BB__16ii_128;
LEGUP_F_main_BB__16ii_128:
		next_state = LEGUP_F_main_BB__16ii_129;
LEGUP_F_main_BB__16ii_129:
		next_state = LEGUP_F_main_BB__16ii_130;
LEGUP_F_main_BB__16ii_130:
		next_state = LEGUP_F_main_BB__16ii_131;
LEGUP_F_main_BB__16ii_131:
		next_state = LEGUP_F_main_BB__16ii_132;
LEGUP_F_main_BB__16ii_132:
		next_state = LEGUP_F_main_BB__16ii_133;
LEGUP_F_main_BB__16ii_133:
		next_state = LEGUP_F_main_BB__16ii_134;
LEGUP_F_main_BB__16ii_134:
		next_state = LEGUP_F_main_BB__16ii_135;
LEGUP_F_main_BB__16ii_135:
		next_state = LEGUP_F_main_BB__16ii_136;
LEGUP_F_main_BB__16ii_136:
		next_state = LEGUP_F_main_BB__16ii_137;
LEGUP_F_main_BB__16ii_137:
		next_state = LEGUP_F_main_BB__16ii_138;
LEGUP_F_main_BB__16ii_138:
		next_state = LEGUP_F_main_BB__16ii_139;
LEGUP_F_main_BB__16ii_139:
		next_state = LEGUP_F_main_BB__16ii_140;
LEGUP_F_main_BB__16ii_140:
		next_state = LEGUP_F_main_BB__16ii_141;
LEGUP_F_main_BB__16ii_141:
		next_state = LEGUP_F_main_BB__16ii_142;
LEGUP_F_main_BB__16ii_142:
		next_state = LEGUP_F_main_BB__16ii_143;
LEGUP_F_main_BB__16ii_143:
		next_state = LEGUP_F_main_BB__16ii_144;
LEGUP_F_main_BB__16ii_144:
		next_state = LEGUP_F_main_BB__16ii_145;
LEGUP_F_main_BB__16ii_145:
		next_state = LEGUP_F_main_BB__16ii_146;
LEGUP_F_main_BB__16ii_146:
		next_state = LEGUP_F_main_BB__16ii_147;
LEGUP_F_main_BB__16ii_147:
		next_state = LEGUP_F_main_BB__16ii_148;
LEGUP_F_main_BB__16ii_148:
		next_state = LEGUP_F_main_BB__16ii_149;
LEGUP_F_main_BB__16ii_149:
		next_state = LEGUP_F_main_BB__16ii_150;
LEGUP_F_main_BB__16ii_150:
		next_state = LEGUP_F_main_BB_convergedexiti_151;
LEGUP_F_main_BB__16iii_219:
		next_state = LEGUP_F_main_BB__16iii_220;
LEGUP_F_main_BB__16iii_220:
	if ((main_16iii_orcond4iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_16iii_orcond4iii == 1'd0))
		next_state = LEGUP_F_main_BB__19iii_221;
LEGUP_F_main_BB__173_559:
		next_state = LEGUP_F_main_BB__169_558;
LEGUP_F_main_BB__176_560:
		next_state = LEGUP_F_main_BB__179_561;
LEGUP_F_main_BB__179_561:
		next_state = LEGUP_F_main_BB__187_562;
LEGUP_F_main_BB__187_562:
	if ((main_187_189 == 1'd1))
		next_state = LEGUP_F_main_BB__190_563;
	else if ((main_187_189 == 1'd0))
		next_state = LEGUP_F_main_BB__200_566;
LEGUP_F_main_BB__190_563:
	if ((main_190_192 == 1'd1))
		next_state = LEGUP_F_main_BB__193_564;
	else if ((main_190_192 == 1'd0))
		next_state = LEGUP_F_main_BB__197_565;
LEGUP_F_main_BB__193_564:
		next_state = LEGUP_F_main_BB__197_565;
LEGUP_F_main_BB__197_565:
		next_state = LEGUP_F_main_BB__187_562;
LEGUP_F_main_BB__19i12ii_368:
		next_state = LEGUP_F_main_BB__19i12ii_369;
LEGUP_F_main_BB__19i12ii_369:
	if ((main_19i12ii_orcond5i11ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_19i12ii_orcond5i11ii == 1'd0))
		next_state = LEGUP_F_main_BB__22i14ii_370;
LEGUP_F_main_BB__19i13ii_300:
		next_state = LEGUP_F_main_BB__19i13ii_301;
LEGUP_F_main_BB__19i13ii_301:
	if ((main_19i13ii_orcond6i12ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_19i13ii_orcond6i12ii == 1'd0))
		next_state = LEGUP_F_main_BB__22i15ii_302;
LEGUP_F_main_BB__19iii_221:
		next_state = LEGUP_F_main_BB__19iii_222;
LEGUP_F_main_BB__19iii_222:
	if ((main_19iii_orcond5iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_19iii_orcond5iii == 1'd0))
		next_state = LEGUP_F_main_BB__22iii_223;
LEGUP_F_main_BB__200_566:
	if ((main_200_202 == 1'd1))
		next_state = LEGUP_F_main_BB__203_567;
	else if ((main_200_202 == 1'd0))
		next_state = LEGUP_F_main_BB__206_568;
LEGUP_F_main_BB__203_567:
		next_state = LEGUP_F_main_BB__206_568;
LEGUP_F_main_BB__206_568:
		next_state = LEGUP_F_main_BB_sqrtfexit_569;
LEGUP_F_main_BB__22i14ii_370:
		next_state = LEGUP_F_main_BB__22i14ii_371;
LEGUP_F_main_BB__22i14ii_371:
	if ((main_22i14ii_orcond6i13ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_22i14ii_orcond6i13ii == 1'd0))
		next_state = LEGUP_F_main_BB__25i16ii_372;
LEGUP_F_main_BB__22i15ii_302:
		next_state = LEGUP_F_main_BB__22i15ii_303;
LEGUP_F_main_BB__22i15ii_303:
	if ((main_22i15ii_orcond8i14ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_22i15ii_orcond8i14ii == 1'd0))
		next_state = LEGUP_F_main_BB__25i17ii_304;
LEGUP_F_main_BB__22iii_223:
		next_state = LEGUP_F_main_BB__22iii_224;
LEGUP_F_main_BB__22iii_224:
	if ((main_22iii_orcond6iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_22iii_orcond6iii == 1'd0))
		next_state = LEGUP_F_main_BB__25iii_225;
LEGUP_F_main_BB__25i16ii_372:
		next_state = LEGUP_F_main_BB__25i16ii_373;
LEGUP_F_main_BB__25i16ii_373:
	if ((main_25i16ii_orcond7i15ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_25i16ii_orcond7i15ii == 1'd0))
		next_state = LEGUP_F_main_BB__28i18ii_374;
LEGUP_F_main_BB__25i17ii_304:
		next_state = LEGUP_F_main_BB__25i17ii_305;
LEGUP_F_main_BB__25i17ii_305:
	if ((main_25i17ii_orcond9i16ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_25i17ii_orcond9i16ii == 1'd0))
		next_state = LEGUP_F_main_BB__28i19ii_306;
LEGUP_F_main_BB__25iii_225:
		next_state = LEGUP_F_main_BB__25iii_226;
LEGUP_F_main_BB__25iii_226:
	if ((main_25iii_orcond7iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_25iii_orcond7iii == 1'd0))
		next_state = LEGUP_F_main_BB__28iii_227;
LEGUP_F_main_BB__28i18ii_374:
		next_state = LEGUP_F_main_BB__28i18ii_375;
LEGUP_F_main_BB__28i18ii_375:
	if ((main_28i18ii_orcond8i17ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_28i18ii_orcond8i17ii == 1'd0))
		next_state = LEGUP_F_main_BB__31i22ii_376;
LEGUP_F_main_BB__28i19ii_306:
		next_state = LEGUP_F_main_BB__28i19ii_307;
LEGUP_F_main_BB__28i19ii_307:
	if ((main_28i19ii_orcond10iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_28i19ii_orcond10iii == 1'd0))
		next_state = LEGUP_F_main_BB__31i20ii_308;
LEGUP_F_main_BB__28iii_227:
		next_state = LEGUP_F_main_BB__28iii_228;
LEGUP_F_main_BB__28iii_228:
	if ((main_28iii_orcond8iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_28iii_orcond8iii == 1'd0))
		next_state = LEGUP_F_main_BB__31iii_229;
LEGUP_F_main_BB__31i20ii_308:
		next_state = LEGUP_F_main_BB__31i20ii_309;
LEGUP_F_main_BB__31i20ii_309:
	if ((main_31i20ii_orcond11iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_31i20ii_orcond11iii == 1'd0))
		next_state = LEGUP_F_main_BB__34iii_310;
LEGUP_F_main_BB__31i22ii_376:
		next_state = LEGUP_F_main_BB__31i22ii_377;
LEGUP_F_main_BB__31i22ii_377:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
LEGUP_F_main_BB__31iii_229:
		next_state = LEGUP_F_main_BB__31iii_230;
LEGUP_F_main_BB__31iii_230:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
LEGUP_F_main_BB__34iii_310:
		next_state = LEGUP_F_main_BB__34iii_311;
LEGUP_F_main_BB__34iii_311:
	if ((main_34iii_orcond12iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_34iii_orcond12iii == 1'd0))
		next_state = LEGUP_F_main_BB__37iii_312;
LEGUP_F_main_BB__37iii_312:
		next_state = LEGUP_F_main_BB__37iii_313;
LEGUP_F_main_BB__37iii_313:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
LEGUP_F_main_BB__3i_156:
		next_state = LEGUP_F_main_BB__3i_157;
LEGUP_F_main_BB__3i_157:
		next_state = LEGUP_F_main_BB__3i_158;
LEGUP_F_main_BB__3i_158:
		next_state = LEGUP_F_main_BB__3i_159;
LEGUP_F_main_BB__3i_159:
		next_state = LEGUP_F_main_BB__3i_160;
LEGUP_F_main_BB__3i_160:
		next_state = LEGUP_F_main_BB__3i_161;
LEGUP_F_main_BB__3i_161:
		next_state = LEGUP_F_main_BB__3ii_162;
LEGUP_F_main_BB__3ii_162:
		next_state = LEGUP_F_main_BB__3ii_163;
LEGUP_F_main_BB__3ii_163:
		next_state = LEGUP_F_main_BB__3ii_164;
LEGUP_F_main_BB__3ii_164:
		next_state = LEGUP_F_main_BB__3ii_165;
LEGUP_F_main_BB__3ii_165:
		next_state = LEGUP_F_main_BB__3ii_166;
LEGUP_F_main_BB__3ii_166:
		next_state = LEGUP_F_main_BB__3ii_167;
LEGUP_F_main_BB__3ii_167:
		next_state = LEGUP_F_main_BB__3ii_168;
LEGUP_F_main_BB__3ii_168:
		next_state = LEGUP_F_main_BB__3ii_169;
LEGUP_F_main_BB__3ii_169:
		next_state = LEGUP_F_main_BB__3ii_170;
LEGUP_F_main_BB__3ii_170:
		next_state = LEGUP_F_main_BB__3ii_171;
LEGUP_F_main_BB__3ii_171:
		next_state = LEGUP_F_main_BB__3ii_172;
LEGUP_F_main_BB__3ii_172:
		next_state = LEGUP_F_main_BB__3ii_173;
LEGUP_F_main_BB__3ii_173:
		next_state = LEGUP_F_main_BB__3ii_174;
LEGUP_F_main_BB__3ii_174:
		next_state = LEGUP_F_main_BB__3ii_175;
LEGUP_F_main_BB__3ii_175:
		next_state = LEGUP_F_main_BB__3ii_176;
LEGUP_F_main_BB__3ii_176:
		next_state = LEGUP_F_main_BB__3ii_177;
LEGUP_F_main_BB__3ii_177:
		next_state = LEGUP_F_main_BB__3ii_178;
LEGUP_F_main_BB__3ii_178:
		next_state = LEGUP_F_main_BB__3ii_179;
LEGUP_F_main_BB__3ii_179:
		next_state = LEGUP_F_main_BB__3ii_180;
LEGUP_F_main_BB__3ii_180:
		next_state = LEGUP_F_main_BB__3ii_181;
LEGUP_F_main_BB__3ii_181:
		next_state = LEGUP_F_main_BB__3ii_182;
LEGUP_F_main_BB__3ii_182:
		next_state = LEGUP_F_main_BB__3ii_183;
LEGUP_F_main_BB__3ii_183:
		next_state = LEGUP_F_main_BB__3ii_184;
LEGUP_F_main_BB__3ii_184:
		next_state = LEGUP_F_main_BB__3ii_185;
LEGUP_F_main_BB__3ii_185:
		next_state = LEGUP_F_main_BB__3ii_186;
LEGUP_F_main_BB__3ii_186:
		next_state = LEGUP_F_main_BB__3ii_187;
LEGUP_F_main_BB__3ii_187:
		next_state = LEGUP_F_main_BB__3ii_188;
LEGUP_F_main_BB__3ii_188:
		next_state = LEGUP_F_main_BB__3ii_189;
LEGUP_F_main_BB__3ii_189:
		next_state = LEGUP_F_main_BB__3ii_190;
LEGUP_F_main_BB__3ii_190:
		next_state = LEGUP_F_main_BB__3ii_191;
LEGUP_F_main_BB__3ii_191:
		next_state = LEGUP_F_main_BB__3ii_192;
LEGUP_F_main_BB__3ii_192:
		next_state = LEGUP_F_main_BB__3ii_193;
LEGUP_F_main_BB__3ii_193:
		next_state = LEGUP_F_main_BB__3ii_194;
LEGUP_F_main_BB__3ii_194:
		next_state = LEGUP_F_main_BB__3ii_195;
LEGUP_F_main_BB__3ii_195:
		next_state = LEGUP_F_main_BB__3ii_196;
LEGUP_F_main_BB__3ii_196:
		next_state = LEGUP_F_main_BB__3ii_197;
LEGUP_F_main_BB__3ii_197:
		next_state = LEGUP_F_main_BB__3ii_198;
LEGUP_F_main_BB__3ii_198:
		next_state = LEGUP_F_main_BB__3ii_199;
LEGUP_F_main_BB__3ii_199:
		next_state = LEGUP_F_main_BB__3ii_200;
LEGUP_F_main_BB__3ii_200:
		next_state = LEGUP_F_main_BB__3ii_201;
LEGUP_F_main_BB__3ii_201:
		next_state = LEGUP_F_main_BB__3ii_202;
LEGUP_F_main_BB__3ii_202:
		next_state = LEGUP_F_main_BB__3ii_203;
LEGUP_F_main_BB__3ii_203:
		next_state = LEGUP_F_main_BB__3ii_204;
LEGUP_F_main_BB__3ii_204:
	if ((main_3ii_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__9preheaderii_205;
	else if ((main_3ii_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__3ii_162;
LEGUP_F_main_BB__3ipreheader_155:
		next_state = LEGUP_F_main_BB__3i_156;
LEGUP_F_main_BB__4i2ii_358:
		next_state = LEGUP_F_main_BB__4i2ii_359;
LEGUP_F_main_BB__4i2ii_359:
	if ((main_4i2ii_orcondi1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_4i2ii_orcondi1ii == 1'd0))
		next_state = LEGUP_F_main_BB__7i4ii_360;
LEGUP_F_main_BB__4i3ii_288:
		next_state = LEGUP_F_main_BB__4i3ii_289;
LEGUP_F_main_BB__4i3ii_289:
	if ((main_4i3ii_orcondi2ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_4i3ii_orcondi2ii == 1'd0))
		next_state = LEGUP_F_main_BB__7i5ii_290;
LEGUP_F_main_BB__4iii_211:
		next_state = LEGUP_F_main_BB__4iii_212;
LEGUP_F_main_BB__4iii_212:
	if ((main_4iii_orcondiii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_4iii_orcondiii == 1'd0))
		next_state = LEGUP_F_main_BB__7iii_213;
LEGUP_F_main_BB__7i1i_615:
		next_state = LEGUP_F_main_BB__7i1i_616;
LEGUP_F_main_BB__7i1i_616:
		next_state = LEGUP_F_main_BB__7i1i_617;
LEGUP_F_main_BB__7i1i_617:
		next_state = LEGUP_F_main_BB__7i1i_618;
LEGUP_F_main_BB__7i1i_618:
		next_state = LEGUP_F_main_BB__7i1i_619;
LEGUP_F_main_BB__7i1i_619:
		next_state = LEGUP_F_main_BB__7i1i_620;
LEGUP_F_main_BB__7i1i_620:
		next_state = LEGUP_F_main_BB__7i1i_621;
LEGUP_F_main_BB__7i1i_621:
		next_state = LEGUP_F_main_BB__7i1i_622;
LEGUP_F_main_BB__7i1i_622:
		next_state = LEGUP_F_main_BB__7i1i_623;
LEGUP_F_main_BB__7i1i_623:
		next_state = LEGUP_F_main_BB__7i1i_624;
LEGUP_F_main_BB__7i1i_624:
		next_state = LEGUP_F_main_BB__7i1i_625;
LEGUP_F_main_BB__7i1i_625:
		next_state = LEGUP_F_main_BB__7i1i_626;
LEGUP_F_main_BB__7i1i_626:
		next_state = LEGUP_F_main_BB__7i1i_627;
LEGUP_F_main_BB__7i1i_627:
		next_state = LEGUP_F_main_BB__7i1i_628;
LEGUP_F_main_BB__7i1i_628:
		next_state = LEGUP_F_main_BB__7i1i_629;
LEGUP_F_main_BB__7i1i_629:
		next_state = LEGUP_F_main_BB__8i3i_630;
LEGUP_F_main_BB__7i4ii_360:
		next_state = LEGUP_F_main_BB__7i4ii_361;
LEGUP_F_main_BB__7i4ii_361:
	if ((main_7i4ii_orcond1i3ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_378;
	else if ((main_7i4ii_orcond1i3ii == 1'd0))
		next_state = LEGUP_F_main_BB__10i6ii_362;
LEGUP_F_main_BB__7i5ii_290:
		next_state = LEGUP_F_main_BB__7i5ii_291;
LEGUP_F_main_BB__7i5ii_291:
	if ((main_7i5ii_orcond1i4ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
	else if ((main_7i5ii_orcond1i4ii == 1'd0))
		next_state = LEGUP_F_main_BB__10i7ii_292;
LEGUP_F_main_BB__7ii_44:
		next_state = LEGUP_F_main_BB__7ii_45;
LEGUP_F_main_BB__7ii_45:
		next_state = LEGUP_F_main_BB__7ii_46;
LEGUP_F_main_BB__7ii_46:
		next_state = LEGUP_F_main_BB__7ii_47;
LEGUP_F_main_BB__7ii_47:
		next_state = LEGUP_F_main_BB__7ii_48;
LEGUP_F_main_BB__7ii_48:
		next_state = LEGUP_F_main_BB__7ii_49;
LEGUP_F_main_BB__7ii_49:
		next_state = LEGUP_F_main_BB__7ii_50;
LEGUP_F_main_BB__7ii_50:
		next_state = LEGUP_F_main_BB__7ii_51;
LEGUP_F_main_BB__7ii_51:
		next_state = LEGUP_F_main_BB__7ii_52;
LEGUP_F_main_BB__7ii_52:
		next_state = LEGUP_F_main_BB__7ii_53;
LEGUP_F_main_BB__7ii_53:
		next_state = LEGUP_F_main_BB__7ii_54;
LEGUP_F_main_BB__7ii_54:
		next_state = LEGUP_F_main_BB__7ii_55;
LEGUP_F_main_BB__7ii_55:
		next_state = LEGUP_F_main_BB__7ii_56;
LEGUP_F_main_BB__7ii_56:
		next_state = LEGUP_F_main_BB__7ii_57;
LEGUP_F_main_BB__7ii_57:
		next_state = LEGUP_F_main_BB__7ii_58;
LEGUP_F_main_BB__7ii_58:
		next_state = LEGUP_F_main_BB__8ii_59;
LEGUP_F_main_BB__7iii_213:
		next_state = LEGUP_F_main_BB__7iii_214;
LEGUP_F_main_BB__7iii_214:
	if ((main_7iii_orcond1iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
	else if ((main_7iii_orcond1iii == 1'd0))
		next_state = LEGUP_F_main_BB__10iii_215;
LEGUP_F_main_BB__8i3i_630:
		next_state = LEGUP_F_main_BB__8i3i_631;
LEGUP_F_main_BB__8i3i_631:
		next_state = LEGUP_F_main_BB__8i3i_632;
LEGUP_F_main_BB__8i3i_632:
		next_state = LEGUP_F_main_BB__8i3i_633;
LEGUP_F_main_BB__8i3i_633:
		next_state = LEGUP_F_main_BB__8i3i_634;
LEGUP_F_main_BB__8i3i_634:
		next_state = LEGUP_F_main_BB__8i3i_635;
LEGUP_F_main_BB__8i3i_635:
		next_state = LEGUP_F_main_BB__8i3i_636;
LEGUP_F_main_BB__8i3i_636:
		next_state = LEGUP_F_main_BB__8i3i_637;
LEGUP_F_main_BB__8i3i_637:
		next_state = LEGUP_F_main_BB__8i3i_638;
LEGUP_F_main_BB__8i3i_638:
		next_state = LEGUP_F_main_BB__8i3i_639;
LEGUP_F_main_BB__8i3i_639:
		next_state = LEGUP_F_main_BB__8i3i_640;
LEGUP_F_main_BB__8i3i_640:
		next_state = LEGUP_F_main_BB__8i3i_641;
LEGUP_F_main_BB__8i3i_641:
		next_state = LEGUP_F_main_BB__8i3i_642;
LEGUP_F_main_BB__8i3i_642:
		next_state = LEGUP_F_main_BB__8i3i_643;
LEGUP_F_main_BB__8i3i_643:
		next_state = LEGUP_F_main_BB__8i3i_644;
LEGUP_F_main_BB__8i3i_644:
		next_state = LEGUP_F_main_BB__8i3i_645;
LEGUP_F_main_BB__8i3i_645:
	if ((main_8i3i_225 == 1'd1))
		next_state = LEGUP_F_main_BB__9i4i_646;
	else if ((main_8i3i_225 == 1'd0))
		next_state = LEGUP_F_main_BB__13i8i_677;
LEGUP_F_main_BB__8ii_59:
		next_state = LEGUP_F_main_BB__8ii_60;
LEGUP_F_main_BB__8ii_60:
		next_state = LEGUP_F_main_BB__8ii_61;
LEGUP_F_main_BB__8ii_61:
		next_state = LEGUP_F_main_BB__8ii_62;
LEGUP_F_main_BB__8ii_62:
		next_state = LEGUP_F_main_BB__8ii_63;
LEGUP_F_main_BB__8ii_63:
		next_state = LEGUP_F_main_BB__8ii_64;
LEGUP_F_main_BB__8ii_64:
		next_state = LEGUP_F_main_BB__8ii_65;
LEGUP_F_main_BB__8ii_65:
		next_state = LEGUP_F_main_BB__8ii_66;
LEGUP_F_main_BB__8ii_66:
		next_state = LEGUP_F_main_BB__8ii_67;
LEGUP_F_main_BB__8ii_67:
		next_state = LEGUP_F_main_BB__8ii_68;
LEGUP_F_main_BB__8ii_68:
		next_state = LEGUP_F_main_BB__8ii_69;
LEGUP_F_main_BB__8ii_69:
		next_state = LEGUP_F_main_BB__8ii_70;
LEGUP_F_main_BB__8ii_70:
		next_state = LEGUP_F_main_BB__8ii_71;
LEGUP_F_main_BB__8ii_71:
		next_state = LEGUP_F_main_BB__8ii_72;
LEGUP_F_main_BB__8ii_72:
		next_state = LEGUP_F_main_BB__8ii_73;
LEGUP_F_main_BB__8ii_73:
		next_state = LEGUP_F_main_BB__8ii_74;
LEGUP_F_main_BB__8ii_74:
	if ((main_8ii_15 == 1'd1))
		next_state = LEGUP_F_main_BB__9ii_75;
	else if ((main_8ii_15 == 1'd0))
		next_state = LEGUP_F_main_BB__13ii_106;
LEGUP_F_main_BB__9i4i_646:
	if ((main_sqrtfexit_218_reg == 1'd1))
		next_state = LEGUP_F_main_BB__12i7i_662;
	else if ((main_sqrtfexit_218_reg == 1'd0))
		next_state = LEGUP_F_main_BB__11i5i_647;
LEGUP_F_main_BB__9ii_75:
	if ((main_entry_8_reg == 1'd1))
		next_state = LEGUP_F_main_BB__12ii_91;
	else if ((main_entry_8_reg == 1'd0))
		next_state = LEGUP_F_main_BB__11ii_76;
LEGUP_F_main_BB__9preheaderii_205:
		next_state = LEGUP_F_main_BB__9preheaderii_206;
LEGUP_F_main_BB__9preheaderii_206:
		next_state = LEGUP_F_main_BB__10ii_207;
LEGUP_F_main_BB_convergedexit13i_722:
		next_state = LEGUP_F_main_BB_convergedexit13i_723;
LEGUP_F_main_BB_convergedexit13i_723:
		next_state = LEGUP_F_main_BB_convergedexit13i_724;
LEGUP_F_main_BB_convergedexit13i_724:
		next_state = LEGUP_F_main_BB_convergedexit13i_725;
LEGUP_F_main_BB_convergedexit13i_725:
	if ((main_convergedexit13i_234 == 1'd1))
		next_state = LEGUP_F_main_BB__3i_156;
	else if ((main_convergedexit13i_234 == 1'd0))
		next_state = LEGUP_F_main_BB_fasticaexitloopexit_726;
LEGUP_F_main_BB_convergedexiti_151:
		next_state = LEGUP_F_main_BB_convergedexiti_152;
LEGUP_F_main_BB_convergedexiti_152:
		next_state = LEGUP_F_main_BB_convergedexiti_153;
LEGUP_F_main_BB_convergedexiti_153:
		next_state = LEGUP_F_main_BB_convergedexiti_154;
LEGUP_F_main_BB_convergedexiti_154:
	if ((main_convergedexiti_24 == 1'd1))
		next_state = LEGUP_F_main_BB__3ipreheader_155;
	else if ((main_convergedexiti_24 == 1'd0))
		next_state = LEGUP_F_main_BB_fasticaexit_727;
LEGUP_F_main_BB_entry_1:
		next_state = LEGUP_F_main_BB_entry_2;
LEGUP_F_main_BB_entry_10:
		next_state = LEGUP_F_main_BB_entry_11;
LEGUP_F_main_BB_entry_11:
		next_state = LEGUP_F_main_BB_entry_12;
LEGUP_F_main_BB_entry_12:
		next_state = LEGUP_F_main_BB_entry_13;
LEGUP_F_main_BB_entry_13:
		next_state = LEGUP_F_main_BB_entry_14;
LEGUP_F_main_BB_entry_14:
		next_state = LEGUP_F_main_BB_entry_15;
LEGUP_F_main_BB_entry_15:
		next_state = LEGUP_F_main_BB_entry_16;
LEGUP_F_main_BB_entry_16:
		next_state = LEGUP_F_main_BB_entry_17;
LEGUP_F_main_BB_entry_17:
		next_state = LEGUP_F_main_BB_entry_18;
LEGUP_F_main_BB_entry_18:
		next_state = LEGUP_F_main_BB_entry_19;
LEGUP_F_main_BB_entry_19:
		next_state = LEGUP_F_main_BB_entry_20;
LEGUP_F_main_BB_entry_2:
		next_state = LEGUP_F_main_BB_entry_3;
LEGUP_F_main_BB_entry_20:
		next_state = LEGUP_F_main_BB_entry_21;
LEGUP_F_main_BB_entry_21:
		next_state = LEGUP_F_main_BB_entry_22;
LEGUP_F_main_BB_entry_22:
		next_state = LEGUP_F_main_BB_entry_23;
LEGUP_F_main_BB_entry_23:
		next_state = LEGUP_F_main_BB_entry_24;
LEGUP_F_main_BB_entry_24:
		next_state = LEGUP_F_main_BB_entry_25;
LEGUP_F_main_BB_entry_25:
		next_state = LEGUP_F_main_BB_entry_26;
LEGUP_F_main_BB_entry_26:
		next_state = LEGUP_F_main_BB_entry_27;
LEGUP_F_main_BB_entry_27:
		next_state = LEGUP_F_main_BB_entry_28;
LEGUP_F_main_BB_entry_28:
		next_state = LEGUP_F_main_BB_entry_29;
LEGUP_F_main_BB_entry_29:
		next_state = LEGUP_F_main_BB_entry_30;
LEGUP_F_main_BB_entry_3:
		next_state = LEGUP_F_main_BB_entry_4;
LEGUP_F_main_BB_entry_30:
		next_state = LEGUP_F_main_BB_entry_31;
LEGUP_F_main_BB_entry_31:
		next_state = LEGUP_F_main_BB_entry_32;
LEGUP_F_main_BB_entry_32:
		next_state = LEGUP_F_main_BB_entry_33;
LEGUP_F_main_BB_entry_33:
		next_state = LEGUP_F_main_BB_entry_34;
LEGUP_F_main_BB_entry_34:
		next_state = LEGUP_F_main_BB_entry_35;
LEGUP_F_main_BB_entry_35:
		next_state = LEGUP_F_main_BB_entry_36;
LEGUP_F_main_BB_entry_36:
		next_state = LEGUP_F_main_BB_entry_37;
LEGUP_F_main_BB_entry_37:
		next_state = LEGUP_F_main_BB_entry_38;
LEGUP_F_main_BB_entry_38:
		next_state = LEGUP_F_main_BB_entry_39;
LEGUP_F_main_BB_entry_39:
		next_state = LEGUP_F_main_BB_entry_40;
LEGUP_F_main_BB_entry_4:
		next_state = LEGUP_F_main_BB_entry_5;
LEGUP_F_main_BB_entry_40:
		next_state = LEGUP_F_main_BB_entry_41;
LEGUP_F_main_BB_entry_41:
		next_state = LEGUP_F_main_BB_entry_42;
LEGUP_F_main_BB_entry_42:
		next_state = LEGUP_F_main_BB_entry_43;
LEGUP_F_main_BB_entry_43:
	if ((main_entry_8 == 1'd1))
		next_state = LEGUP_F_main_BB__8ii_59;
	else if ((main_entry_8 == 1'd0))
		next_state = LEGUP_F_main_BB__7ii_44;
LEGUP_F_main_BB_entry_5:
		next_state = LEGUP_F_main_BB_entry_6;
LEGUP_F_main_BB_entry_6:
		next_state = LEGUP_F_main_BB_entry_7;
LEGUP_F_main_BB_entry_7:
		next_state = LEGUP_F_main_BB_entry_8;
LEGUP_F_main_BB_entry_8:
		next_state = LEGUP_F_main_BB_entry_9;
LEGUP_F_main_BB_entry_9:
		next_state = LEGUP_F_main_BB_entry_10;
LEGUP_F_main_BB_fasticaexit_727:
		next_state = LEGUP_0;
LEGUP_F_main_BB_fasticaexitloopexit_726:
		next_state = LEGUP_F_main_BB_fasticaexit_727;
LEGUP_F_main_BB_linear_sech2exitii_314:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_315;
LEGUP_F_main_BB_linear_sech2exitii_315:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_316;
LEGUP_F_main_BB_linear_sech2exitii_316:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_317;
LEGUP_F_main_BB_linear_sech2exitii_317:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_318;
LEGUP_F_main_BB_linear_sech2exitii_318:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_319;
LEGUP_F_main_BB_linear_sech2exitii_319:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_320;
LEGUP_F_main_BB_linear_sech2exitii_320:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_321;
LEGUP_F_main_BB_linear_sech2exitii_321:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_322;
LEGUP_F_main_BB_linear_sech2exitii_322:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_323;
LEGUP_F_main_BB_linear_sech2exitii_323:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_324;
LEGUP_F_main_BB_linear_sech2exitii_324:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_325;
LEGUP_F_main_BB_linear_sech2exitii_325:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_326;
LEGUP_F_main_BB_linear_sech2exitii_326:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_327;
LEGUP_F_main_BB_linear_sech2exitii_327:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_328;
LEGUP_F_main_BB_linear_sech2exitii_328:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_329;
LEGUP_F_main_BB_linear_sech2exitii_329:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_330;
LEGUP_F_main_BB_linear_sech2exitii_330:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_331;
LEGUP_F_main_BB_linear_sech2exitii_331:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_332;
LEGUP_F_main_BB_linear_sech2exitii_332:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_333;
LEGUP_F_main_BB_linear_sech2exitii_333:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_334;
LEGUP_F_main_BB_linear_sech2exitii_334:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_335;
LEGUP_F_main_BB_linear_sech2exitii_335:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_336;
LEGUP_F_main_BB_linear_sech2exitii_336:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_337;
LEGUP_F_main_BB_linear_sech2exitii_337:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_338;
LEGUP_F_main_BB_linear_sech2exitii_338:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_339;
LEGUP_F_main_BB_linear_sech2exitii_339:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_340;
LEGUP_F_main_BB_linear_sech2exitii_340:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_341;
LEGUP_F_main_BB_linear_sech2exitii_341:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_342;
LEGUP_F_main_BB_linear_sech2exitii_342:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_343;
LEGUP_F_main_BB_linear_sech2exitii_343:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_344;
LEGUP_F_main_BB_linear_sech2exitii_344:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_345;
LEGUP_F_main_BB_linear_sech2exitii_345:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_346;
LEGUP_F_main_BB_linear_sech2exitii_346:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_347;
LEGUP_F_main_BB_linear_sech2exitii_347:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_348;
LEGUP_F_main_BB_linear_sech2exitii_348:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_349;
LEGUP_F_main_BB_linear_sech2exitii_349:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_350;
LEGUP_F_main_BB_linear_sech2exitii_350:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_351;
LEGUP_F_main_BB_linear_sech2exitii_351:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_352;
LEGUP_F_main_BB_linear_sech2exitii_352:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_353;
LEGUP_F_main_BB_linear_sech2exitii_353:
	if ((main_linear_sech2exitii_exitcond11_reg == 1'd1))
		next_state = LEGUP_F_main_BB_rotateexiti_431;
	else if ((main_linear_sech2exitii_exitcond11_reg == 1'd0))
		next_state = LEGUP_F_main_BB__15i15i_284;
LEGUP_F_main_BB_linear_tanhexit23ii_378:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_379;
LEGUP_F_main_BB_linear_tanhexit23ii_379:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_380;
LEGUP_F_main_BB_linear_tanhexit23ii_380:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_381;
LEGUP_F_main_BB_linear_tanhexit23ii_381:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_382;
LEGUP_F_main_BB_linear_tanhexit23ii_382:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_383;
LEGUP_F_main_BB_linear_tanhexit23ii_383:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_384;
LEGUP_F_main_BB_linear_tanhexit23ii_384:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_385;
LEGUP_F_main_BB_linear_tanhexit23ii_385:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_386;
LEGUP_F_main_BB_linear_tanhexit23ii_386:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_387;
LEGUP_F_main_BB_linear_tanhexit23ii_387:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_388;
LEGUP_F_main_BB_linear_tanhexit23ii_388:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_389;
LEGUP_F_main_BB_linear_tanhexit23ii_389:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_390;
LEGUP_F_main_BB_linear_tanhexit23ii_390:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_391;
LEGUP_F_main_BB_linear_tanhexit23ii_391:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_392;
LEGUP_F_main_BB_linear_tanhexit23ii_392:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_393;
LEGUP_F_main_BB_linear_tanhexit23ii_393:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_394;
LEGUP_F_main_BB_linear_tanhexit23ii_394:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_395;
LEGUP_F_main_BB_linear_tanhexit23ii_395:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_396;
LEGUP_F_main_BB_linear_tanhexit23ii_396:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_397;
LEGUP_F_main_BB_linear_tanhexit23ii_397:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_398;
LEGUP_F_main_BB_linear_tanhexit23ii_398:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_399;
LEGUP_F_main_BB_linear_tanhexit23ii_399:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_400;
LEGUP_F_main_BB_linear_tanhexit23ii_400:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_401;
LEGUP_F_main_BB_linear_tanhexit23ii_401:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_402;
LEGUP_F_main_BB_linear_tanhexit23ii_402:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_403;
LEGUP_F_main_BB_linear_tanhexit23ii_403:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_404;
LEGUP_F_main_BB_linear_tanhexit23ii_404:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_405;
LEGUP_F_main_BB_linear_tanhexit23ii_405:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_406;
LEGUP_F_main_BB_linear_tanhexit23ii_406:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_407;
LEGUP_F_main_BB_linear_tanhexit23ii_407:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_408;
LEGUP_F_main_BB_linear_tanhexit23ii_408:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_409;
LEGUP_F_main_BB_linear_tanhexit23ii_409:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_410;
LEGUP_F_main_BB_linear_tanhexit23ii_410:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_411;
LEGUP_F_main_BB_linear_tanhexit23ii_411:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_412;
LEGUP_F_main_BB_linear_tanhexit23ii_412:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_413;
LEGUP_F_main_BB_linear_tanhexit23ii_413:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_414;
LEGUP_F_main_BB_linear_tanhexit23ii_414:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_415;
LEGUP_F_main_BB_linear_tanhexit23ii_415:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_416;
LEGUP_F_main_BB_linear_tanhexit23ii_416:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_417;
LEGUP_F_main_BB_linear_tanhexit23ii_417:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_418;
LEGUP_F_main_BB_linear_tanhexit23ii_418:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_419;
LEGUP_F_main_BB_linear_tanhexit23ii_419:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_420;
LEGUP_F_main_BB_linear_tanhexit23ii_420:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_421;
LEGUP_F_main_BB_linear_tanhexit23ii_421:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_422;
LEGUP_F_main_BB_linear_tanhexit23ii_422:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_423;
LEGUP_F_main_BB_linear_tanhexit23ii_423:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_424;
LEGUP_F_main_BB_linear_tanhexit23ii_424:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_425;
LEGUP_F_main_BB_linear_tanhexit23ii_425:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_426;
LEGUP_F_main_BB_linear_tanhexit23ii_426:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_427;
LEGUP_F_main_BB_linear_tanhexit23ii_427:
		next_state = LEGUP_F_main_BB_linear_tanhexit23ii_428;
LEGUP_F_main_BB_linear_tanhexit23ii_428:
	if ((main_linear_tanhexit23ii_exitcond8_reg == 1'd1))
		next_state = LEGUP_F_main_BB__121ii_429;
	else if ((main_linear_tanhexit23ii_exitcond8_reg == 1'd0))
		next_state = LEGUP_F_main_BB__101ii_354;
LEGUP_F_main_BB_linear_tanhexitii_231:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_232;
LEGUP_F_main_BB_linear_tanhexitii_232:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_233;
LEGUP_F_main_BB_linear_tanhexitii_233:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_234;
LEGUP_F_main_BB_linear_tanhexitii_234:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_235;
LEGUP_F_main_BB_linear_tanhexitii_235:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_236;
LEGUP_F_main_BB_linear_tanhexitii_236:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_237;
LEGUP_F_main_BB_linear_tanhexitii_237:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_238;
LEGUP_F_main_BB_linear_tanhexitii_238:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_239;
LEGUP_F_main_BB_linear_tanhexitii_239:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_240;
LEGUP_F_main_BB_linear_tanhexitii_240:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_241;
LEGUP_F_main_BB_linear_tanhexitii_241:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_242;
LEGUP_F_main_BB_linear_tanhexitii_242:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_243;
LEGUP_F_main_BB_linear_tanhexitii_243:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_244;
LEGUP_F_main_BB_linear_tanhexitii_244:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_245;
LEGUP_F_main_BB_linear_tanhexitii_245:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_246;
LEGUP_F_main_BB_linear_tanhexitii_246:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_247;
LEGUP_F_main_BB_linear_tanhexitii_247:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_248;
LEGUP_F_main_BB_linear_tanhexitii_248:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_249;
LEGUP_F_main_BB_linear_tanhexitii_249:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_250;
LEGUP_F_main_BB_linear_tanhexitii_250:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_251;
LEGUP_F_main_BB_linear_tanhexitii_251:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_252;
LEGUP_F_main_BB_linear_tanhexitii_252:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_253;
LEGUP_F_main_BB_linear_tanhexitii_253:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_254;
LEGUP_F_main_BB_linear_tanhexitii_254:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_255;
LEGUP_F_main_BB_linear_tanhexitii_255:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_256;
LEGUP_F_main_BB_linear_tanhexitii_256:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_257;
LEGUP_F_main_BB_linear_tanhexitii_257:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_258;
LEGUP_F_main_BB_linear_tanhexitii_258:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_259;
LEGUP_F_main_BB_linear_tanhexitii_259:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_260;
LEGUP_F_main_BB_linear_tanhexitii_260:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_261;
LEGUP_F_main_BB_linear_tanhexitii_261:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_262;
LEGUP_F_main_BB_linear_tanhexitii_262:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_263;
LEGUP_F_main_BB_linear_tanhexitii_263:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_264;
LEGUP_F_main_BB_linear_tanhexitii_264:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_265;
LEGUP_F_main_BB_linear_tanhexitii_265:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_266;
LEGUP_F_main_BB_linear_tanhexitii_266:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_267;
LEGUP_F_main_BB_linear_tanhexitii_267:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_268;
LEGUP_F_main_BB_linear_tanhexitii_268:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_269;
LEGUP_F_main_BB_linear_tanhexitii_269:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_270;
LEGUP_F_main_BB_linear_tanhexitii_270:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_271;
LEGUP_F_main_BB_linear_tanhexitii_271:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_272;
LEGUP_F_main_BB_linear_tanhexitii_272:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_273;
LEGUP_F_main_BB_linear_tanhexitii_273:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_274;
LEGUP_F_main_BB_linear_tanhexitii_274:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_275;
LEGUP_F_main_BB_linear_tanhexitii_275:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_276;
LEGUP_F_main_BB_linear_tanhexitii_276:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_277;
LEGUP_F_main_BB_linear_tanhexitii_277:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_278;
LEGUP_F_main_BB_linear_tanhexitii_278:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_279;
LEGUP_F_main_BB_linear_tanhexitii_279:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_280;
LEGUP_F_main_BB_linear_tanhexitii_280:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_281;
LEGUP_F_main_BB_linear_tanhexitii_281:
	if ((main_linear_tanhexitii_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB__12i14i_282;
	else if ((main_linear_tanhexitii_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB__10ii_207;
LEGUP_F_main_BB_preheader_557:
		next_state = LEGUP_F_main_BB__169_558;
LEGUP_F_main_BB_rotateexiti_431:
		next_state = LEGUP_F_main_BB_rotateexiti_432;
LEGUP_F_main_BB_rotateexiti_432:
		next_state = LEGUP_function_call_433;
LEGUP_F_main_BB_rotateexiti_434:
		next_state = LEGUP_function_call_435;
LEGUP_F_main_BB_rotateexiti_436:
		next_state = LEGUP_function_call_437;
LEGUP_F_main_BB_rotateexiti_438:
		next_state = LEGUP_F_main_BB_rotateexiti_439;
LEGUP_F_main_BB_rotateexiti_439:
		next_state = LEGUP_F_main_BB_rotateexiti_440;
LEGUP_F_main_BB_rotateexiti_440:
		next_state = LEGUP_F_main_BB_rotateexiti_441;
LEGUP_F_main_BB_rotateexiti_441:
		next_state = LEGUP_F_main_BB_rotateexiti_442;
LEGUP_F_main_BB_rotateexiti_442:
		next_state = LEGUP_F_main_BB_rotateexiti_443;
LEGUP_F_main_BB_rotateexiti_443:
		next_state = LEGUP_F_main_BB_rotateexiti_444;
LEGUP_F_main_BB_rotateexiti_444:
		next_state = LEGUP_F_main_BB_rotateexiti_445;
LEGUP_F_main_BB_rotateexiti_445:
		next_state = LEGUP_F_main_BB_rotateexiti_446;
LEGUP_F_main_BB_rotateexiti_446:
		next_state = LEGUP_F_main_BB_rotateexiti_447;
LEGUP_F_main_BB_rotateexiti_447:
		next_state = LEGUP_F_main_BB_rotateexiti_448;
LEGUP_F_main_BB_rotateexiti_448:
		next_state = LEGUP_F_main_BB_rotateexiti_449;
LEGUP_F_main_BB_rotateexiti_449:
		next_state = LEGUP_F_main_BB_rotateexiti_450;
LEGUP_F_main_BB_rotateexiti_450:
		next_state = LEGUP_F_main_BB_rotateexiti_451;
LEGUP_F_main_BB_rotateexiti_451:
		next_state = LEGUP_F_main_BB_rotateexiti_452;
LEGUP_F_main_BB_rotateexiti_452:
		next_state = LEGUP_F_main_BB_rotateexiti_453;
LEGUP_F_main_BB_rotateexiti_453:
		next_state = LEGUP_F_main_BB_rotateexiti_454;
LEGUP_F_main_BB_rotateexiti_454:
		next_state = LEGUP_F_main_BB_rotateexiti_455;
LEGUP_F_main_BB_rotateexiti_455:
		next_state = LEGUP_F_main_BB_rotateexiti_456;
LEGUP_F_main_BB_rotateexiti_456:
		next_state = LEGUP_F_main_BB_rotateexiti_457;
LEGUP_F_main_BB_rotateexiti_457:
		next_state = LEGUP_F_main_BB_rotateexiti_458;
LEGUP_F_main_BB_rotateexiti_458:
		next_state = LEGUP_F_main_BB_rotateexiti_459;
LEGUP_F_main_BB_rotateexiti_459:
		next_state = LEGUP_F_main_BB_rotateexiti_460;
LEGUP_F_main_BB_rotateexiti_460:
		next_state = LEGUP_F_main_BB_rotateexiti_461;
LEGUP_F_main_BB_rotateexiti_461:
		next_state = LEGUP_F_main_BB_rotateexiti_462;
LEGUP_F_main_BB_rotateexiti_462:
		next_state = LEGUP_F_main_BB_rotateexiti_463;
LEGUP_F_main_BB_rotateexiti_463:
		next_state = LEGUP_F_main_BB_rotateexiti_464;
LEGUP_F_main_BB_rotateexiti_464:
		next_state = LEGUP_F_main_BB_rotateexiti_465;
LEGUP_F_main_BB_rotateexiti_465:
		next_state = LEGUP_F_main_BB_rotateexiti_466;
LEGUP_F_main_BB_rotateexiti_466:
		next_state = LEGUP_F_main_BB_rotateexiti_467;
LEGUP_F_main_BB_rotateexiti_467:
		next_state = LEGUP_F_main_BB_rotateexiti_468;
LEGUP_F_main_BB_rotateexiti_468:
		next_state = LEGUP_F_main_BB_rotateexiti_469;
LEGUP_F_main_BB_rotateexiti_469:
		next_state = LEGUP_F_main_BB_rotateexiti_470;
LEGUP_F_main_BB_rotateexiti_470:
		next_state = LEGUP_F_main_BB_rotateexiti_471;
LEGUP_F_main_BB_rotateexiti_471:
		next_state = LEGUP_F_main_BB_rotateexiti_472;
LEGUP_F_main_BB_rotateexiti_472:
		next_state = LEGUP_F_main_BB_rotateexiti_473;
LEGUP_F_main_BB_rotateexiti_473:
		next_state = LEGUP_F_main_BB_rotateexiti_474;
LEGUP_F_main_BB_rotateexiti_474:
		next_state = LEGUP_F_main_BB_rotateexiti_475;
LEGUP_F_main_BB_rotateexiti_475:
		next_state = LEGUP_F_main_BB_rotateexiti_476;
LEGUP_F_main_BB_rotateexiti_476:
		next_state = LEGUP_F_main_BB_rotateexiti_477;
LEGUP_F_main_BB_rotateexiti_477:
		next_state = LEGUP_F_main_BB_rotateexiti_478;
LEGUP_F_main_BB_rotateexiti_478:
		next_state = LEGUP_F_main_BB_rotateexiti_479;
LEGUP_F_main_BB_rotateexiti_479:
	if ((main_rotateexiti_155 == 1'd1))
		next_state = LEGUP_F_main_BB__159_506;
	else if ((main_rotateexiti_155 == 1'd0))
		next_state = LEGUP_F_main_BB__156_480;
LEGUP_F_main_BB_sqrtfexit_569:
		next_state = LEGUP_F_main_BB_sqrtfexit_570;
LEGUP_F_main_BB_sqrtfexit_570:
		next_state = LEGUP_function_call_571;
LEGUP_F_main_BB_sqrtfexit_572:
		next_state = LEGUP_F_main_BB_sqrtfexit_573;
LEGUP_F_main_BB_sqrtfexit_573:
		next_state = LEGUP_F_main_BB_sqrtfexit_574;
LEGUP_F_main_BB_sqrtfexit_574:
		next_state = LEGUP_F_main_BB_sqrtfexit_575;
LEGUP_F_main_BB_sqrtfexit_575:
		next_state = LEGUP_F_main_BB_sqrtfexit_576;
LEGUP_F_main_BB_sqrtfexit_576:
		next_state = LEGUP_F_main_BB_sqrtfexit_577;
LEGUP_F_main_BB_sqrtfexit_577:
		next_state = LEGUP_F_main_BB_sqrtfexit_578;
LEGUP_F_main_BB_sqrtfexit_578:
		next_state = LEGUP_F_main_BB_sqrtfexit_579;
LEGUP_F_main_BB_sqrtfexit_579:
		next_state = LEGUP_F_main_BB_sqrtfexit_580;
LEGUP_F_main_BB_sqrtfexit_580:
		next_state = LEGUP_F_main_BB_sqrtfexit_581;
LEGUP_F_main_BB_sqrtfexit_581:
		next_state = LEGUP_F_main_BB_sqrtfexit_582;
LEGUP_F_main_BB_sqrtfexit_582:
		next_state = LEGUP_F_main_BB_sqrtfexit_583;
LEGUP_F_main_BB_sqrtfexit_583:
		next_state = LEGUP_F_main_BB_sqrtfexit_584;
LEGUP_F_main_BB_sqrtfexit_584:
		next_state = LEGUP_F_main_BB_sqrtfexit_585;
LEGUP_F_main_BB_sqrtfexit_585:
		next_state = LEGUP_F_main_BB_sqrtfexit_586;
LEGUP_F_main_BB_sqrtfexit_586:
		next_state = LEGUP_F_main_BB_sqrtfexit_587;
LEGUP_F_main_BB_sqrtfexit_587:
		next_state = LEGUP_F_main_BB_sqrtfexit_588;
LEGUP_F_main_BB_sqrtfexit_588:
		next_state = LEGUP_F_main_BB_sqrtfexit_589;
LEGUP_F_main_BB_sqrtfexit_589:
		next_state = LEGUP_F_main_BB_sqrtfexit_590;
LEGUP_F_main_BB_sqrtfexit_590:
		next_state = LEGUP_F_main_BB_sqrtfexit_591;
LEGUP_F_main_BB_sqrtfexit_591:
		next_state = LEGUP_F_main_BB_sqrtfexit_592;
LEGUP_F_main_BB_sqrtfexit_592:
		next_state = LEGUP_F_main_BB_sqrtfexit_593;
LEGUP_F_main_BB_sqrtfexit_593:
		next_state = LEGUP_F_main_BB_sqrtfexit_594;
LEGUP_F_main_BB_sqrtfexit_594:
		next_state = LEGUP_F_main_BB_sqrtfexit_595;
LEGUP_F_main_BB_sqrtfexit_595:
		next_state = LEGUP_F_main_BB_sqrtfexit_596;
LEGUP_F_main_BB_sqrtfexit_596:
		next_state = LEGUP_F_main_BB_sqrtfexit_597;
LEGUP_F_main_BB_sqrtfexit_597:
		next_state = LEGUP_F_main_BB_sqrtfexit_598;
LEGUP_F_main_BB_sqrtfexit_598:
		next_state = LEGUP_F_main_BB_sqrtfexit_599;
LEGUP_F_main_BB_sqrtfexit_599:
		next_state = LEGUP_F_main_BB_sqrtfexit_600;
LEGUP_F_main_BB_sqrtfexit_600:
		next_state = LEGUP_F_main_BB_sqrtfexit_601;
LEGUP_F_main_BB_sqrtfexit_601:
		next_state = LEGUP_F_main_BB_sqrtfexit_602;
LEGUP_F_main_BB_sqrtfexit_602:
		next_state = LEGUP_F_main_BB_sqrtfexit_603;
LEGUP_F_main_BB_sqrtfexit_603:
		next_state = LEGUP_F_main_BB_sqrtfexit_604;
LEGUP_F_main_BB_sqrtfexit_604:
		next_state = LEGUP_F_main_BB_sqrtfexit_605;
LEGUP_F_main_BB_sqrtfexit_605:
		next_state = LEGUP_F_main_BB_sqrtfexit_606;
LEGUP_F_main_BB_sqrtfexit_606:
		next_state = LEGUP_F_main_BB_sqrtfexit_607;
LEGUP_F_main_BB_sqrtfexit_607:
		next_state = LEGUP_F_main_BB_sqrtfexit_608;
LEGUP_F_main_BB_sqrtfexit_608:
		next_state = LEGUP_F_main_BB_sqrtfexit_609;
LEGUP_F_main_BB_sqrtfexit_609:
		next_state = LEGUP_F_main_BB_sqrtfexit_610;
LEGUP_F_main_BB_sqrtfexit_610:
		next_state = LEGUP_F_main_BB_sqrtfexit_611;
LEGUP_F_main_BB_sqrtfexit_611:
		next_state = LEGUP_F_main_BB_sqrtfexit_612;
LEGUP_F_main_BB_sqrtfexit_612:
		next_state = LEGUP_F_main_BB_sqrtfexit_613;
LEGUP_F_main_BB_sqrtfexit_613:
		next_state = LEGUP_F_main_BB_sqrtfexit_614;
LEGUP_F_main_BB_sqrtfexit_614:
	if ((main_sqrtfexit_218 == 1'd1))
		next_state = LEGUP_F_main_BB__8i3i_630;
	else if ((main_sqrtfexit_218 == 1'd0))
		next_state = LEGUP_F_main_BB__7i1i_615;
LEGUP_function_call_433:
	if ((legup_omp_rotate_omp_fn0_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_rotateexiti_434;
LEGUP_function_call_435:
	if ((legup_omp_rotate_omp_fn1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_rotateexiti_436;
LEGUP_function_call_437:
	if ((legup_omp_rotate_omp_fn2_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_rotateexiti_438;
LEGUP_function_call_571:
	if ((legup_omp_normalize_omp_fn3_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_sqrtfexit_572;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %entry*/
	/*   %0 = load float* @w.0, align 4, !tbaa !1*/
		main_entry_0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
		main_entry_1 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_entry_2 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_entry_3 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %entry*/
	/*   %4 = load float* @w.1, align 4, !tbaa !1*/
		main_entry_4 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %entry*/
	/*   %5 = load float* @w_next.1, align 4, !tbaa !1*/
		main_entry_5 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_entry_6 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %6 = fmul float %4, %5*/
	if ((cur_state == LEGUP_F_main_BB_entry_15)) begin
		main_entry_6_reg <= main_entry_6;
		if (start == 1'b0 && ^(main_entry_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_6_reg"); $finish; end
	end
	/* main: %entry*/
	/*   %6 = fmul float %4, %5*/
	if ((cur_state == LEGUP_F_main_BB_entry_15)) begin
		main_entry_6_reg <= main_entry_6;
		if (start == 1'b0 && ^(main_entry_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_6_reg"); $finish; end
	end
	/* main: %"3.i.i"*/
	/*   %44 = fmul float %.pre5.i.i, %43*/
	if ((cur_state == LEGUP_F_main_BB__3ii_176)) begin
		main_entry_6_reg <= main_3ii_44;
		if (start == 1'b0 && ^(main_3ii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_6_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %216 = fmul float %.pre5.i.i, %215*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_586)) begin
		main_entry_6_reg <= main_sqrtfexit_216;
		if (start == 1'b0 && ^(main_sqrtfexit_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_6_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %151 = fmul float %150, %150*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_452)) begin
		main_entry_6_reg <= main_rotateexiti_151;
		if (start == 1'b0 && ^(main_rotateexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_6_reg"); $finish; end
	end
end
always @(*) begin
	main_entry_7 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %7 = fadd float %3, %6*/
	if ((cur_state == LEGUP_F_main_BB_entry_42)) begin
		main_entry_7_reg <= main_entry_7;
		if (start == 1'b0 && ^(main_entry_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_7_reg"); $finish; end
	end
	/* main: %entry*/
	/*   %7 = fadd float %3, %6*/
	if ((cur_state == LEGUP_F_main_BB_entry_42)) begin
		main_entry_7_reg <= main_entry_7;
		if (start == 1'b0 && ^(main_entry_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_7_reg"); $finish; end
	end
	/* main: %"3.i.i"*/
	/*   %45 = fadd float %42, %44*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		main_entry_7_reg <= main_3ii_45;
		if (start == 1'b0 && ^(main_3ii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_7_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %217 = fadd float %214, %216*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_613)) begin
		main_entry_7_reg <= main_sqrtfexit_217;
		if (start == 1'b0 && ^(main_sqrtfexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_7_reg"); $finish; end
	end
end
always @(*) begin
	main_entry_8 = altfp_compare32_1_main_entry_8_out;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %8 = fcmp ogt float %7, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_entry_43)) begin
		main_entry_8_reg <= main_entry_8;
		if (start == 1'b0 && ^(main_entry_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_8_reg"); $finish; end
	end
	/* main: %entry*/
	/*   %8 = fcmp ogt float %7, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_entry_43)) begin
		main_entry_8_reg <= main_entry_8;
		if (start == 1'b0 && ^(main_entry_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %9 = bitcast float %5 to i32*/
		main_entry_9 = main_entry_5;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %9 = bitcast float %5 to i32*/
	if ((cur_state == LEGUP_F_main_BB_entry_4)) begin
		main_entry_9_reg <= main_entry_9;
		if (start == 1'b0 && ^(main_entry_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %10 = bitcast float %1 to i32*/
		main_entry_10 = main_entry_1;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %10 = bitcast float %1 to i32*/
	if ((cur_state == LEGUP_F_main_BB_entry_3)) begin
		main_entry_10_reg <= main_entry_10;
		if (start == 1'b0 && ^(main_entry_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %11 = bitcast float %4 to i32*/
		main_entry_11 = main_entry_4;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %11 = bitcast float %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB_entry_4)) begin
		main_entry_11_reg <= main_entry_11;
		if (start == 1'b0 && ^(main_entry_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %12 = bitcast float %0 to i32*/
		main_entry_12 = main_entry_0;
end
always @(posedge clk) begin
	/* main: %entry*/
	/*   %12 = bitcast float %0 to i32*/
	if ((cur_state == LEGUP_F_main_BB_entry_3)) begin
		main_entry_12_reg <= main_entry_12;
		if (start == 1'b0 && ^(main_entry_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_entry_12_reg"); $finish; end
	end
end
always @(*) begin
	main_7ii_13 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"8.i.i"*/
	/*   %.sink1.i.i = phi float [ %13, %"7.i.i" ], [ %7, %entry ]*/
	if ((((cur_state == LEGUP_F_main_BB_entry_43) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8 == 1'd1))) begin
		main_8ii_sink1ii = main_entry_7_reg;
	end
	/* main: %"8.i.i"*/
	/*   %.sink1.i.i = phi float [ %13, %"7.i.i" ], [ %7, %entry ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__7ii_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_8ii_sink1ii = main_7ii_13;
	end
end
always @(posedge clk) begin
	/* main: %"8.i.i"*/
	/*   %.sink1.i.i = phi float [ %13, %"7.i.i" ], [ %7, %entry ]*/
	if ((((cur_state == LEGUP_F_main_BB_entry_43) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8 == 1'd1))) begin
		main_8ii_sink1ii_reg <= main_8ii_sink1ii;
		if (start == 1'b0 && ^(main_8ii_sink1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8ii_sink1ii_reg"); $finish; end
	end
	/* main: %"8.i.i"*/
	/*   %.sink1.i.i = phi float [ %13, %"7.i.i" ], [ %7, %entry ]*/
	if (((cur_state == LEGUP_F_main_BB__7ii_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_8ii_sink1ii_reg <= main_8ii_sink1ii;
		if (start == 1'b0 && ^(main_8ii_sink1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8ii_sink1ii_reg"); $finish; end
	end
end
always @(*) begin
	main_8ii_14 = main_altfp_add_32_0;
end
always @(*) begin
	main_8ii_15 = altfp_compare32_1_main_8ii_15_out;
end
always @(*) begin
	main_11ii_16 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"12.i.i"*/
	/*   %.sink.i.i = phi float [ %16, %"11.i.i" ], [ %7, %"9.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__9ii_75) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8_reg == 1'd1))) begin
		main_12ii_sinkii = main_entry_7_reg;
	end
	/* main: %"12.i.i"*/
	/*   %.sink.i.i = phi float [ %16, %"11.i.i" ], [ %7, %"9.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__11ii_90) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_12ii_sinkii = main_11ii_16;
	end
end
always @(posedge clk) begin
	/* main: %"12.i.i"*/
	/*   %.sink.i.i = phi float [ %16, %"11.i.i" ], [ %7, %"9.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__9ii_75) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8_reg == 1'd1))) begin
		main_12ii_sinkii_reg <= main_12ii_sinkii;
		if (start == 1'b0 && ^(main_12ii_sinkii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12ii_sinkii_reg"); $finish; end
	end
	/* main: %"12.i.i"*/
	/*   %.sink.i.i = phi float [ %16, %"11.i.i" ], [ %7, %"9.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__11ii_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_12ii_sinkii_reg <= main_12ii_sinkii;
		if (start == 1'b0 && ^(main_12ii_sinkii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12ii_sinkii_reg"); $finish; end
	end
end
always @(*) begin
	main_12ii_17 = main_altfp_add_32_0;
end
always @(*) begin
	main_15ii_18 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"16.i.i"*/
	/*   %.sink3.i.i = phi float [ %18, %"15.i.i" ], [ %7, %"13.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13ii_106) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8_reg == 1'd1))) begin
		main_16ii_sink3ii = main_entry_7_reg;
	end
	/* main: %"16.i.i"*/
	/*   %.sink3.i.i = phi float [ %18, %"15.i.i" ], [ %7, %"13.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__15ii_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_16ii_sink3ii = main_15ii_18;
	end
end
always @(posedge clk) begin
	/* main: %"16.i.i"*/
	/*   %.sink3.i.i = phi float [ %18, %"15.i.i" ], [ %7, %"13.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13ii_106) & (memory_controller_waitrequest == 1'd0)) & (main_entry_8_reg == 1'd1))) begin
		main_16ii_sink3ii_reg <= main_16ii_sink3ii;
		if (start == 1'b0 && ^(main_16ii_sink3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16ii_sink3ii_reg"); $finish; end
	end
	/* main: %"16.i.i"*/
	/*   %.sink3.i.i = phi float [ %18, %"15.i.i" ], [ %7, %"13.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__15ii_121) & (memory_controller_waitrequest == 1'd0))) begin
		main_16ii_sink3ii_reg <= main_16ii_sink3ii;
		if (start == 1'b0 && ^(main_16ii_sink3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16ii_sink3ii_reg"); $finish; end
	end
end
always @(*) begin
	main_16ii_19 = main_altfp_add_32_0;
end
always @(*) begin
	main_16ii_20 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %21 = phi float [ %20, %"16.i.i" ], [ %17, %"12.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__12ii_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_21 = main_12ii_17;
	end
	/* main: %converged.exit.i*/
	/*   %21 = phi float [ %20, %"16.i.i" ], [ %17, %"12.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__16ii_150) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_convergedexiti_21 = main_16ii_20;
	end
end
always @(posedge clk) begin
	/* main: %converged.exit.i*/
	/*   %21 = phi float [ %20, %"16.i.i" ], [ %17, %"12.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__12ii_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_21_reg <= main_convergedexiti_21;
		if (start == 1'b0 && ^(main_convergedexiti_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_21_reg"); $finish; end
	end
	/* main: %converged.exit.i*/
	/*   %21 = phi float [ %20, %"16.i.i" ], [ %17, %"12.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__16ii_150) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_21_reg <= main_convergedexiti_21;
		if (start == 1'b0 && ^(main_convergedexiti_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_21_reg"); $finish; end
	end
end
always @(*) begin
	main_convergedexiti_22 = main_altfp_extend_32_0;
end
always @(posedge clk) begin
	/* main: %converged.exit.i*/
	/*   %22 = fpext float %21 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_153)) begin
		main_convergedexiti_22_reg <= main_convergedexiti_22;
		if (start == 1'b0 && ^(main_convergedexiti_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_22_reg"); $finish; end
	end
	/* main: %converged.exit.i*/
	/*   %22 = fpext float %21 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_153)) begin
		main_convergedexiti_22_reg <= main_convergedexiti_22;
		if (start == 1'b0 && ^(main_convergedexiti_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_22_reg"); $finish; end
	end
	/* main: %converged.exit13.i*/
	/*   %232 = fpext float %231 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexit13i_724)) begin
		main_convergedexiti_22_reg <= main_convergedexit13i_232;
		if (start == 1'b0 && ^(main_convergedexit13i_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_22_reg"); $finish; end
	end
	/* main: %"16.i11.i.i"*/
	/*   %92 = fpext float %81 to double*/
	if ((cur_state == LEGUP_F_main_BB__16i11ii_298)) begin
		main_convergedexiti_22_reg <= main_16i11ii_92;
		if (start == 1'b0 && ^(main_16i11ii_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_22_reg"); $finish; end
	end
end
always @(*) begin
	main_convergedexiti_23 = altfp_compare64_1_main_convergedexiti_23_out;
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %..i.i = zext i1 %23 to i32*/
		main_convergedexiti_ii = main_convergedexiti_23;
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %24 = icmp eq i32 %..i.i, 0*/
		main_convergedexiti_24 = (main_convergedexiti_ii == 32'd0);
end
always @(*) begin
	/* main: %"3.i.preheader"*/
	/*   %25 = bitcast %struct..omp_data_s.12* %.omp_data_o.13.i.i to i8**/
if (reset) begin main_3ipreheader_25 = 0; end
		main_3ipreheader_25 = `TAG_main_entry_omp_data_o13ii_a;
end
always @(posedge clk) begin
	/* main: %"3.i.preheader"*/
	/*   %25 = bitcast %struct..omp_data_s.12* %.omp_data_o.13.i.i to i8**/
	if ((cur_state == LEGUP_F_main_BB__3ipreheader_155)) begin
		main_3ipreheader_25_reg <= main_3ipreheader_25;
		if (start == 1'b0 && ^(main_3ipreheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ipreheader_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i.preheader"*/
	/*   %26 = getelementptr inbounds %struct..omp_data_s.12* %.omp_data_o.13.i.i, i32 0, i32 0*/
if (reset) begin main_3ipreheader_26 = 0; end
		main_3ipreheader_26 = `TAG_main_entry_omp_data_o13ii_a;
end
always @(posedge clk) begin
	/* main: %"3.i.preheader"*/
	/*   %26 = getelementptr inbounds %struct..omp_data_s.12* %.omp_data_o.13.i.i, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__3ipreheader_155)) begin
		main_3ipreheader_26_reg <= main_3ipreheader_26;
		if (start == 1'b0 && ^(main_3ipreheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ipreheader_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %27 = phi i32 [ %222, %converged.exit13.i ], [ %12, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_27 = main_entry_12_reg;
	end
	/* main: %"3.i"*/
	/*   %27 = phi i32 [ %222, %converged.exit13.i ], [ %12, %"3.i.preheader" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) */ begin
		main_3i_27 = main_sqrtfexit_222_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %27 = phi i32 [ %222, %converged.exit13.i ], [ %12, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_27_reg <= main_3i_27;
		if (start == 1'b0 && ^(main_3i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_27_reg"); $finish; end
	end
	/* main: %"3.i"*/
	/*   %27 = phi i32 [ %222, %converged.exit13.i ], [ %12, %"3.i.preheader" ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) begin
		main_3i_27_reg <= main_3i_27;
		if (start == 1'b0 && ^(main_3i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %28 = phi i32 [ %221, %converged.exit13.i ], [ %11, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_28 = main_entry_11_reg;
	end
	/* main: %"3.i"*/
	/*   %28 = phi i32 [ %221, %converged.exit13.i ], [ %11, %"3.i.preheader" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) */ begin
		main_3i_28 = main_sqrtfexit_221_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %28 = phi i32 [ %221, %converged.exit13.i ], [ %11, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_28_reg <= main_3i_28;
		if (start == 1'b0 && ^(main_3i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_28_reg"); $finish; end
	end
	/* main: %"3.i"*/
	/*   %28 = phi i32 [ %221, %converged.exit13.i ], [ %11, %"3.i.preheader" ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) begin
		main_3i_28_reg <= main_3i_28;
		if (start == 1'b0 && ^(main_3i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %29 = phi i32 [ %220, %converged.exit13.i ], [ %10, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_29 = main_entry_10_reg;
	end
	/* main: %"3.i"*/
	/*   %29 = phi i32 [ %220, %converged.exit13.i ], [ %10, %"3.i.preheader" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) */ begin
		main_3i_29 = main_sqrtfexit_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %29 = phi i32 [ %220, %converged.exit13.i ], [ %10, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_29_reg <= main_3i_29;
		if (start == 1'b0 && ^(main_3i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_29_reg"); $finish; end
	end
	/* main: %"3.i"*/
	/*   %29 = phi i32 [ %220, %converged.exit13.i ], [ %10, %"3.i.preheader" ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) begin
		main_3i_29_reg <= main_3i_29;
		if (start == 1'b0 && ^(main_3i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %30 = phi i32 [ %219, %converged.exit13.i ], [ %9, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_30 = main_entry_9_reg;
	end
	/* main: %"3.i"*/
	/*   %30 = phi i32 [ %219, %converged.exit13.i ], [ %9, %"3.i.preheader" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) */ begin
		main_3i_30 = main_sqrtfexit_219_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %30 = phi i32 [ %219, %converged.exit13.i ], [ %9, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_30_reg <= main_3i_30;
		if (start == 1'b0 && ^(main_3i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_30_reg"); $finish; end
	end
	/* main: %"3.i"*/
	/*   %30 = phi i32 [ %219, %converged.exit13.i ], [ %9, %"3.i.preheader" ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) begin
		main_3i_30_reg <= main_3i_30;
		if (start == 1'b0 && ^(main_3i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %31 = phi i32 [ %146, %converged.exit13.i ], [ 0, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_31 = 32'd0;
	end
	/* main: %"3.i"*/
	/*   %31 = phi i32 [ %146, %converged.exit13.i ], [ 0, %"3.i.preheader" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) */ begin
		main_3i_31 = main_rotateexiti_146_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %31 = phi i32 [ %146, %converged.exit13.i ], [ 0, %"3.i.preheader" ]*/
	if (((cur_state == LEGUP_F_main_BB__3ipreheader_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_3i_31_reg <= main_3i_31;
		if (start == 1'b0 && ^(main_3i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_31_reg"); $finish; end
	end
	/* main: %"3.i"*/
	/*   %31 = phi i32 [ %146, %converged.exit13.i ], [ 0, %"3.i.preheader" ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd1))) begin
		main_3i_31_reg <= main_3i_31;
		if (start == 1'b0 && ^(main_3i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %33 = load float* @w_next.0, align 4, !tbaa !1*/
		main_3i_33 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %34 = bitcast float %33 to i32*/
		main_3i_34 = main_3i_33;
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %34 = bitcast float %33 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		main_3i_34_reg <= main_3i_34;
		if (start == 1'b0 && ^(main_3i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %36 = load float* @w_next.1, align 4, !tbaa !1*/
		main_3i_36 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %37 = bitcast float %36 to i32*/
		main_3i_37 = main_3i_36;
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %37 = bitcast float %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		main_3i_37_reg <= main_3i_37;
		if (start == 1'b0 && ^(main_3i_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
		main_3i_preii = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_161)) begin
		main_3i_preii_reg <= main_3i_preii;
		if (start == 1'b0 && ^(main_3i_preii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_preii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
		main_3i_pre5ii = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_161)) begin
		main_3i_pre5ii_reg <= main_3i_pre5ii;
		if (start == 1'b0 && ^(main_3i_pre5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3i_pre5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %39 = phi i32 [ 0, %"3.i" ], [ %46, %"3.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__3i_161) & (memory_controller_waitrequest == 1'd0))) begin
		main_3ii_39 = 32'd0;
	end
	/* main: %"3.i.i"*/
	/*   %39 = phi i32 [ 0, %"3.i" ], [ %46, %"3.i.i" ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__3ii_204) & (memory_controller_waitrequest == 1'd0)) & (main_3ii_exitcond_reg == 1'd0))) */ begin
		main_3ii_39 = main_3ii_46_reg;
	end
end
always @(posedge clk) begin
	/* main: %"3.i.i"*/
	/*   %39 = phi i32 [ 0, %"3.i" ], [ %46, %"3.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__3i_161) & (memory_controller_waitrequest == 1'd0))) begin
		main_3ii_39_reg <= main_3ii_39;
		if (start == 1'b0 && ^(main_3ii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_39_reg"); $finish; end
	end
	/* main: %"3.i.i"*/
	/*   %39 = phi i32 [ 0, %"3.i" ], [ %46, %"3.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__3ii_204) & (memory_controller_waitrequest == 1'd0)) & (main_3ii_exitcond_reg == 1'd0))) begin
		main_3ii_39_reg <= main_3ii_39;
		if (start == 1'b0 && ^(main_3ii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %scevgep = getelementptr [2 x [50 x float]]* @whitened_signals, i32 0, i32 1, i32 %39*/
		main_3ii_scevgep = (`TAG_g_whitened_signals_a + ((200 * 32'd1) + (4 * main_3ii_39_reg)));
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %scevgep3 = getelementptr [2 x [50 x float]]* @whitened_signals, i32 0, i32 0, i32 %39*/
		main_3ii_scevgep3 = (`TAG_g_whitened_signals_a + (4 * main_3ii_39_reg));
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %scevgep4 = getelementptr [50 x float]* @product_1, i32 0, i32 %39*/
		main_3ii_scevgep4 = (`TAG_g_product_1_a + (4 * main_3ii_39_reg));
end
always @(posedge clk) begin
	/* main: %"3.i.i"*/
	/*   %scevgep4 = getelementptr [50 x float]* @product_1, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		main_3ii_scevgep4_reg <= main_3ii_scevgep4;
		if (start == 1'b0 && ^(main_3ii_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %40 = load float* %scevgep3, align 4, !tbaa !1*/
		main_3ii_40 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_3ii_41 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_3ii_42 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
		main_3ii_43 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_164)) begin
		main_3ii_43_reg <= main_3ii_43;
		if (start == 1'b0 && ^(main_3ii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_43_reg"); $finish; end
	end
end
always @(*) begin
	main_3ii_44 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %"3.i.i"*/
/*   %44 = fmul float %.pre5.i.i, %43*/
	main_3ii_44_reg = main_entry_6_reg;
end
always @(*) begin
	main_3ii_45 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %46 = add nsw i32 %39, 1*/
		main_3ii_46 = (main_3ii_39_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %"3.i.i"*/
	/*   %46 = add nsw i32 %39, 1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		main_3ii_46_reg <= main_3ii_46;
		if (start == 1'b0 && ^(main_3ii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"3.i.i"*/
	/*   %exitcond = icmp eq i32 %46, 50*/
		main_3ii_exitcond = (main_3ii_46 == 32'd50);
end
always @(posedge clk) begin
	/* main: %"3.i.i"*/
	/*   %exitcond = icmp eq i32 %46, 50*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		main_3ii_exitcond_reg <= main_3ii_exitcond;
		if (start == 1'b0 && ^(main_3ii_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3ii_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %47 = phi float [ 0.000000e+00, %"9.preheader.i.i" ], [ %77, %linear_tanh.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__9preheaderii_206) & (memory_controller_waitrequest == 1'd0))) begin
		main_10ii_47 = 32'h0;
	end
	/* main: %"10.i.i"*/
	/*   %47 = phi float [ 0.000000e+00, %"9.preheader.i.i" ], [ %77, %linear_tanh.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_281) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond5_reg == 1'd0))) */ begin
		main_10ii_47 = main_linear_tanhexitii_77;
	end
end
always @(posedge clk) begin
	/* main: %"10.i.i"*/
	/*   %47 = phi float [ 0.000000e+00, %"9.preheader.i.i" ], [ %77, %linear_tanh.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__9preheaderii_206) & (memory_controller_waitrequest == 1'd0))) begin
		main_10ii_47_reg <= main_10ii_47;
		if (start == 1'b0 && ^(main_10ii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_47_reg"); $finish; end
	end
	/* main: %"10.i.i"*/
	/*   %47 = phi float [ 0.000000e+00, %"9.preheader.i.i" ], [ %77, %linear_tanh.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_281) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond5_reg == 1'd0))) begin
		main_10ii_47_reg <= main_10ii_47;
		if (start == 1'b0 && ^(main_10ii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %48 = phi i32 [ 0, %"9.preheader.i.i" ], [ %78, %linear_tanh.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__9preheaderii_206) & (memory_controller_waitrequest == 1'd0))) begin
		main_10ii_48 = 32'd0;
	end
	/* main: %"10.i.i"*/
	/*   %48 = phi i32 [ 0, %"9.preheader.i.i" ], [ %78, %linear_tanh.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_281) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond5_reg == 1'd0))) */ begin
		main_10ii_48 = main_linear_tanhexitii_78_reg;
	end
end
always @(posedge clk) begin
	/* main: %"10.i.i"*/
	/*   %48 = phi i32 [ 0, %"9.preheader.i.i" ], [ %78, %linear_tanh.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__9preheaderii_206) & (memory_controller_waitrequest == 1'd0))) begin
		main_10ii_48_reg <= main_10ii_48;
		if (start == 1'b0 && ^(main_10ii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_48_reg"); $finish; end
	end
	/* main: %"10.i.i"*/
	/*   %48 = phi i32 [ 0, %"9.preheader.i.i" ], [ %78, %linear_tanh.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_281) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond5_reg == 1'd0))) begin
		main_10ii_48_reg <= main_10ii_48;
		if (start == 1'b0 && ^(main_10ii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %scevgep6 = getelementptr [50 x float]* @product_1, i32 0, i32 %48*/
		main_10ii_scevgep6 = (`TAG_g_product_1_a + (4 * main_10ii_48_reg));
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %scevgep7 = getelementptr [2 x [50 x float]]* @whitened_signals, i32 0, i32 0, i32 %48*/
		main_10ii_scevgep7 = (`TAG_g_whitened_signals_a + (4 * main_10ii_48_reg));
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
		main_10ii_49 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_209)) begin
		main_10ii_49_reg <= main_10ii_49;
		if (start == 1'b0 && ^(main_10ii_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
		main_10ii_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_209)) begin
		main_10ii_50_reg <= main_10ii_50;
		if (start == 1'b0 && ^(main_10ii_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10ii_50_reg"); $finish; end
	end
end
always @(*) begin
	main_10ii_51 = altfp_compare32_1_main_10ii_51_out;
end
always @(*) begin
	main_4iii_52 = altfp_compare32_1_main_4iii_52_out;
end
always @(*) begin
	main_4iii_53 = altfp_compare32_1_main_4iii_53_out;
end
always @(*) begin
	/* main: %"4.i.i.i"*/
	/*   %or.cond.i.i.i = and i1 %52, %53*/
		main_4iii_orcondiii = (main_4iii_52 & main_4iii_53);
end
always @(*) begin
	main_7iii_54 = altfp_compare32_1_main_7iii_54_out;
end
always @(*) begin
	main_7iii_55 = altfp_compare32_1_main_7iii_55_out;
end
always @(*) begin
	/* main: %"7.i.i.i"*/
	/*   %or.cond1.i.i.i = and i1 %54, %55*/
		main_7iii_orcond1iii = (main_7iii_54 & main_7iii_55);
end
always @(*) begin
	main_10iii_56 = altfp_compare32_1_main_10iii_56_out;
end
always @(*) begin
	main_10iii_57 = altfp_compare32_1_main_10iii_57_out;
end
always @(*) begin
	/* main: %"10.i.i.i"*/
	/*   %or.cond2.i.i.i = and i1 %56, %57*/
		main_10iii_orcond2iii = (main_10iii_56 & main_10iii_57);
end
always @(*) begin
	main_13iii_58 = altfp_compare32_1_main_13iii_58_out;
end
always @(*) begin
	main_13iii_59 = altfp_compare32_1_main_13iii_59_out;
end
always @(*) begin
	/* main: %"13.i.i.i"*/
	/*   %or.cond3.i.i.i = and i1 %58, %59*/
		main_13iii_orcond3iii = (main_13iii_58 & main_13iii_59);
end
always @(*) begin
	main_16iii_60 = altfp_compare32_1_main_16iii_60_out;
end
always @(*) begin
	main_16iii_61 = altfp_compare32_1_main_16iii_61_out;
end
always @(*) begin
	/* main: %"16.i.i.i"*/
	/*   %or.cond4.i.i.i = and i1 %60, %61*/
		main_16iii_orcond4iii = (main_16iii_60 & main_16iii_61);
end
always @(*) begin
	main_19iii_62 = altfp_compare32_1_main_19iii_62_out;
end
always @(*) begin
	main_19iii_63 = altfp_compare32_1_main_19iii_63_out;
end
always @(*) begin
	/* main: %"19.i.i.i"*/
	/*   %or.cond5.i.i.i = and i1 %62, %63*/
		main_19iii_orcond5iii = (main_19iii_62 & main_19iii_63);
end
always @(*) begin
	main_22iii_64 = altfp_compare32_1_main_22iii_64_out;
end
always @(*) begin
	main_22iii_65 = altfp_compare32_1_main_22iii_65_out;
end
always @(*) begin
	/* main: %"22.i.i.i"*/
	/*   %or.cond6.i.i.i = and i1 %64, %65*/
		main_22iii_orcond6iii = (main_22iii_64 & main_22iii_65);
end
always @(*) begin
	main_25iii_66 = altfp_compare32_1_main_25iii_66_out;
end
always @(*) begin
	main_25iii_67 = altfp_compare32_1_main_25iii_67_out;
end
always @(*) begin
	/* main: %"25.i.i.i"*/
	/*   %or.cond7.i.i.i = and i1 %66, %67*/
		main_25iii_orcond7iii = (main_25iii_66 & main_25iii_67);
end
always @(*) begin
	main_28iii_68 = altfp_compare32_1_main_28iii_68_out;
end
always @(*) begin
	main_28iii_69 = altfp_compare32_1_main_28iii_69_out;
end
always @(*) begin
	/* main: %"28.i.i.i"*/
	/*   %or.cond8.i.i.i = and i1 %68, %69*/
		main_28iii_orcond8iii = (main_28iii_68 & main_28iii_69);
end
always @(*) begin
	main_31iii_70 = altfp_compare32_1_main_31iii_70_out;
end
always @(*) begin
	main_31iii_71 = altfp_compare32_1_main_31iii_71_out;
end
always @(*) begin
	/* main: %"31.i.i.i"*/
	/*   %or.cond9.i.i.i = and i1 %70, %71*/
		main_31iii_orcond9iii = (main_31iii_70 & main_31iii_71);
end
always @(*) begin
	/* main: %"31.i.i.i"*/
	/*   %..i.i.i = select i1 %or.cond9.i.i.i, float 0x3F9E000000000000, float 0x3F48000040000000*/
		main_31iii_iii = (main_31iii_orcond9iii ? 32'h3CF00000 : 32'h3A400002);
end
always @(*) begin
	/* main: %"31.i.i.i"*/
	/*   %.10.i.i.i = select i1 %or.cond9.i.i.i, float 0x3FED0068E0000000, float 1.000000e+00*/
		main_31iii_10iii = (main_31iii_orcond9iii ? 32'h3F680347 : 32'h3F800000);
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10ii_210) & (memory_controller_waitrequest == 1'd0)) & (main_10ii_51 == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3A400002;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4iii_212) & (memory_controller_waitrequest == 1'd0)) & (main_4iii_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3CF00000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7iii_214) & (memory_controller_waitrequest == 1'd0)) & (main_7iii_orcond1iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10iii_216) & (memory_controller_waitrequest == 1'd0)) & (main_10iii_orcond2iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13iii_218) & (memory_controller_waitrequest == 1'd0)) & (main_13iii_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16iii_220) & (memory_controller_waitrequest == 1'd0)) & (main_16iii_orcond4iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19iii_222) & (memory_controller_waitrequest == 1'd0)) & (main_19iii_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22iii_224) & (memory_controller_waitrequest == 1'd0)) & (main_22iii_orcond6iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25iii_226) & (memory_controller_waitrequest == 1'd0)) & (main_25iii_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28iii_228) & (memory_controller_waitrequest == 1'd0)) & (main_28iii_orcond8iii == 1'd1))) begin
		main_linear_tanhexitii_72 = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31iii_230) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexitii_72 = main_31iii_iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10ii_210) & (memory_controller_waitrequest == 1'd0)) & (main_10ii_51 == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4iii_212) & (memory_controller_waitrequest == 1'd0)) & (main_4iii_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7iii_214) & (memory_controller_waitrequest == 1'd0)) & (main_7iii_orcond1iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10iii_216) & (memory_controller_waitrequest == 1'd0)) & (main_10iii_orcond2iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13iii_218) & (memory_controller_waitrequest == 1'd0)) & (main_13iii_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16iii_220) & (memory_controller_waitrequest == 1'd0)) & (main_16iii_orcond4iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19iii_222) & (memory_controller_waitrequest == 1'd0)) & (main_19iii_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22iii_224) & (memory_controller_waitrequest == 1'd0)) & (main_22iii_orcond6iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25iii_226) & (memory_controller_waitrequest == 1'd0)) & (main_25iii_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28iii_228) & (memory_controller_waitrequest == 1'd0)) & (main_28iii_orcond8iii == 1'd1))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %72 = phi float [ 0x3F48000040000000, %"10.i.i" ], [ 0x3F9E000000000000, %"4.i.i.i" ], [ 0x3FBDB00000000000, %"7.i.i.i" ], [ 0x3FD2340000000000, %"10.i.i.i" ], [ 0x3FE2FA0000000000, %"13.i.i.i" ], [ 0x3FEE7E0000000000, %"16.i.i.i" ], [ 0x3FEE7E0000000000, %"19.i.i.i" ], [ 0x3FE2FA0000000000, %"22.i.i.i" ], [ 0x3FD2340000000000, %"25.i.i.i" ], [ 0x3FBDB00000000000, %"28.i.i.i" ], [ %..i.i.i, %"31.i.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__31iii_230) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexitii_72_reg <= main_linear_tanhexitii_72;
		if (start == 1'b0 && ^(main_linear_tanhexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10ii_210) & (memory_controller_waitrequest == 1'd0)) & (main_10ii_51 == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'hBF800000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4iii_212) & (memory_controller_waitrequest == 1'd0)) & (main_4iii_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'hBF680347;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7iii_214) & (memory_controller_waitrequest == 1'd0)) & (main_7iii_orcond1iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'hBF400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10iii_216) & (memory_controller_waitrequest == 1'd0)) & (main_10iii_orcond2iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'hBF000000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13iii_218) & (memory_controller_waitrequest == 1'd0)) & (main_13iii_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'hBE400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16iii_220) & (memory_controller_waitrequest == 1'd0)) & (main_16iii_orcond4iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'h0;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19iii_222) & (memory_controller_waitrequest == 1'd0)) & (main_19iii_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'h0;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22iii_224) & (memory_controller_waitrequest == 1'd0)) & (main_22iii_orcond6iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'h3E400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25iii_226) & (memory_controller_waitrequest == 1'd0)) & (main_25iii_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'h3F000000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28iii_228) & (memory_controller_waitrequest == 1'd0)) & (main_28iii_orcond8iii == 1'd1))) begin
		main_linear_tanhexitii_73 = 32'h3F400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31iii_230) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexitii_73 = main_31iii_10iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10ii_210) & (memory_controller_waitrequest == 1'd0)) & (main_10ii_51 == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4iii_212) & (memory_controller_waitrequest == 1'd0)) & (main_4iii_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7iii_214) & (memory_controller_waitrequest == 1'd0)) & (main_7iii_orcond1iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10iii_216) & (memory_controller_waitrequest == 1'd0)) & (main_10iii_orcond2iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13iii_218) & (memory_controller_waitrequest == 1'd0)) & (main_13iii_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16iii_220) & (memory_controller_waitrequest == 1'd0)) & (main_16iii_orcond4iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19iii_222) & (memory_controller_waitrequest == 1'd0)) & (main_19iii_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22iii_224) & (memory_controller_waitrequest == 1'd0)) & (main_22iii_orcond6iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25iii_226) & (memory_controller_waitrequest == 1'd0)) & (main_25iii_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28iii_228) & (memory_controller_waitrequest == 1'd0)) & (main_28iii_orcond8iii == 1'd1))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %73 = phi float [ -1.000000e+00, %"10.i.i" ], [ 0xBFED0068E0000000, %"4.i.i.i" ], [ -7.500000e-01, %"7.i.i.i" ], [ -5.000000e-01, %"10.i.i.i" ], [ -1.875000e-01, %"13.i.i.i" ], [ 0.000000e+00, %"16.i.i.i" ], [ 0.000000e+00, %"19.i.i.i" ], [ 1.875000e-01, %"22.i.i.i" ], [ 5.000000e-01, %"25.i.i.i" ], [ 7.500000e-01, %"28.i.i.i" ], [ %.10.i.i.i, %"31.i.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__31iii_230) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexitii_73_reg <= main_linear_tanhexitii_73;
		if (start == 1'b0 && ^(main_linear_tanhexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_73_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_tanhexitii_74 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexitii_75 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_tanhexitii_76 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexitii_77 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %78 = add nsw i32 %48, 1*/
		main_linear_tanhexitii_78 = (main_10ii_48_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %78 = add nsw i32 %48, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_231)) begin
		main_linear_tanhexitii_78_reg <= main_linear_tanhexitii_78;
		if (start == 1'b0 && ^(main_linear_tanhexitii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %exitcond5 = icmp eq i32 %78, 50*/
		main_linear_tanhexitii_exitcond5 = (main_linear_tanhexitii_78 == 32'd50);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %exitcond5 = icmp eq i32 %78, 50*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_231)) begin
		main_linear_tanhexitii_exitcond5_reg <= main_linear_tanhexitii_exitcond5;
		if (start == 1'b0 && ^(main_linear_tanhexitii_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"12.i14.i"*/
	/*   %.lcssa = phi float [ %77, %linear_tanh.exit.i.i ]*/
		main_12i14i_lcssa = main_linear_tanhexitii_77;
end
always @(posedge clk) begin
	/* main: %"12.i14.i"*/
	/*   %.lcssa = phi float [ %77, %linear_tanh.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_281) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond5_reg == 1'd1))) begin
		main_12i14i_lcssa_reg <= main_12i14i_lcssa;
		if (start == 1'b0 && ^(main_12i14i_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12i14i_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"15.i15.i"*/
	/*   %79 = phi float [ 0.000000e+00, %"12.1.i.i" ], [ %112, %linear_sech2.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_353) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond11_reg == 1'd0))) begin
		main_15i15i_79 = main_linear_sech2exitii_112;
	end
	/* main: %"15.i15.i"*/
	/*   %79 = phi float [ 0.000000e+00, %"12.1.i.i" ], [ %112, %linear_sech2.exit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__121ii_430) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_15i15i_79 = 32'h0;
	end
end
always @(posedge clk) begin
	/* main: %"15.i15.i"*/
	/*   %79 = phi float [ 0.000000e+00, %"12.1.i.i" ], [ %112, %linear_sech2.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_353) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond11_reg == 1'd0))) begin
		main_15i15i_79_reg <= main_15i15i_79;
		if (start == 1'b0 && ^(main_15i15i_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15i15i_79_reg"); $finish; end
	end
	/* main: %"15.i15.i"*/
	/*   %79 = phi float [ 0.000000e+00, %"12.1.i.i" ], [ %112, %linear_sech2.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__121ii_430) & (memory_controller_waitrequest == 1'd0))) begin
		main_15i15i_79_reg <= main_15i15i_79;
		if (start == 1'b0 && ^(main_15i15i_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15i15i_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"15.i15.i"*/
	/*   %80 = phi i32 [ 0, %"12.1.i.i" ], [ %113, %linear_sech2.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_353) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond11_reg == 1'd0))) begin
		main_15i15i_80 = main_linear_sech2exitii_113_reg;
	end
	/* main: %"15.i15.i"*/
	/*   %80 = phi i32 [ 0, %"12.1.i.i" ], [ %113, %linear_sech2.exit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__121ii_430) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_15i15i_80 = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %"15.i15.i"*/
	/*   %80 = phi i32 [ 0, %"12.1.i.i" ], [ %113, %linear_sech2.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_353) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond11_reg == 1'd0))) begin
		main_15i15i_80_reg <= main_15i15i_80;
		if (start == 1'b0 && ^(main_15i15i_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15i15i_80_reg"); $finish; end
	end
	/* main: %"15.i15.i"*/
	/*   %80 = phi i32 [ 0, %"12.1.i.i" ], [ %113, %linear_sech2.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__121ii_430) & (memory_controller_waitrequest == 1'd0))) begin
		main_15i15i_80_reg <= main_15i15i_80;
		if (start == 1'b0 && ^(main_15i15i_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15i15i_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"15.i15.i"*/
	/*   %scevgep12 = getelementptr [50 x float]* @product_1, i32 0, i32 %80*/
		main_15i15i_scevgep12 = (`TAG_g_product_1_a + (4 * main_15i15i_80_reg));
end
always @(*) begin
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
		main_15i15i_81 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__15i15i_286)) begin
		main_15i15i_81_reg <= main_15i15i_81;
		if (start == 1'b0 && ^(main_15i15i_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15i15i_81_reg"); $finish; end
	end
end
always @(*) begin
	main_15i15i_82 = altfp_compare32_1_main_15i15i_82_out;
end
always @(*) begin
	main_4i3ii_83 = altfp_compare32_1_main_4i3ii_83_out;
end
always @(*) begin
	main_4i3ii_84 = altfp_compare32_1_main_4i3ii_84_out;
end
always @(*) begin
	/* main: %"4.i3.i.i"*/
	/*   %or.cond.i2.i.i = and i1 %83, %84*/
		main_4i3ii_orcondi2ii = (main_4i3ii_83 & main_4i3ii_84);
end
always @(*) begin
	main_7i5ii_85 = altfp_compare32_1_main_7i5ii_85_out;
end
always @(*) begin
	main_7i5ii_86 = altfp_compare32_1_main_7i5ii_86_out;
end
always @(*) begin
	/* main: %"7.i5.i.i"*/
	/*   %or.cond1.i4.i.i = and i1 %85, %86*/
		main_7i5ii_orcond1i4ii = (main_7i5ii_85 & main_7i5ii_86);
end
always @(*) begin
	main_10i7ii_87 = altfp_compare32_1_main_10i7ii_87_out;
end
always @(*) begin
	main_10i7ii_88 = altfp_compare32_1_main_10i7ii_88_out;
end
always @(*) begin
	/* main: %"10.i7.i.i"*/
	/*   %or.cond2.i6.i.i = and i1 %87, %88*/
		main_10i7ii_orcond2i6ii = (main_10i7ii_87 & main_10i7ii_88);
end
always @(*) begin
	main_13i9ii_89 = altfp_compare32_1_main_13i9ii_89_out;
end
always @(*) begin
	main_13i9ii_90 = altfp_compare32_1_main_13i9ii_90_out;
end
always @(*) begin
	/* main: %"13.i9.i.i"*/
	/*   %or.cond3.i8.i.i = and i1 %89, %90*/
		main_13i9ii_orcond3i8ii = (main_13i9ii_89 & main_13i9ii_90);
end
always @(*) begin
	main_16i11ii_91 = altfp_compare32_1_main_16i11ii_91_out;
end
always @(posedge clk) begin
	/* main: %"16.i11.i.i"*/
	/*   %91 = fcmp oge float %81, -5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__16i11ii_297)) begin
		main_16i11ii_91_reg <= main_16i11ii_91;
		if (start == 1'b0 && ^(main_16i11ii_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16i11ii_91_reg"); $finish; end
	end
	/* main: %"16.i11.i.i"*/
	/*   %91 = fcmp oge float %81, -5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__16i11ii_297)) begin
		main_16i11ii_91_reg <= main_16i11ii_91;
		if (start == 1'b0 && ^(main_16i11ii_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16i11ii_91_reg"); $finish; end
	end
end
always @(*) begin
	main_16i11ii_92 = main_altfp_extend_32_0;
end
always @(*) begin
/* main: %"16.i11.i.i"*/
/*   %92 = fpext float %81 to double*/
	main_16i11ii_92_reg = main_convergedexiti_22_reg;
end
always @(*) begin
	main_16i11ii_93 = altfp_compare64_1_main_16i11ii_93_out;
end
always @(*) begin
	/* main: %"16.i11.i.i"*/
	/*   %or.cond5.i10.i.i = and i1 %91, %93*/
		main_16i11ii_orcond5i10ii = (main_16i11ii_91_reg & main_16i11ii_93);
end
always @(*) begin
	main_19i13ii_94 = altfp_compare64_1_main_19i13ii_94_out;
end
always @(*) begin
	main_19i13ii_95 = altfp_compare32_1_main_19i13ii_95_out;
end
always @(*) begin
	/* main: %"19.i13.i.i"*/
	/*   %or.cond6.i12.i.i = and i1 %94, %95*/
		main_19i13ii_orcond6i12ii = (main_19i13ii_94 & main_19i13ii_95);
end
always @(*) begin
	main_22i15ii_96 = altfp_compare32_1_main_22i15ii_96_out;
end
always @(*) begin
	main_22i15ii_97 = altfp_compare64_1_main_22i15ii_97_out;
end
always @(*) begin
	/* main: %"22.i15.i.i"*/
	/*   %or.cond8.i14.i.i = and i1 %96, %97*/
		main_22i15ii_orcond8i14ii = (main_22i15ii_96 & main_22i15ii_97);
end
always @(*) begin
	main_25i17ii_98 = altfp_compare64_1_main_25i17ii_98_out;
end
always @(*) begin
	main_25i17ii_99 = altfp_compare32_1_main_25i17ii_99_out;
end
always @(*) begin
	/* main: %"25.i17.i.i"*/
	/*   %or.cond9.i16.i.i = and i1 %98, %99*/
		main_25i17ii_orcond9i16ii = (main_25i17ii_98 & main_25i17ii_99);
end
always @(*) begin
	main_28i19ii_100 = altfp_compare32_1_main_28i19ii_100_out;
end
always @(*) begin
	main_28i19ii_101 = altfp_compare32_1_main_28i19ii_101_out;
end
always @(*) begin
	/* main: %"28.i19.i.i"*/
	/*   %or.cond10.i.i.i = and i1 %100, %101*/
		main_28i19ii_orcond10iii = (main_28i19ii_100 & main_28i19ii_101);
end
always @(*) begin
	main_31i20ii_102 = altfp_compare32_1_main_31i20ii_102_out;
end
always @(*) begin
	main_31i20ii_103 = altfp_compare32_1_main_31i20ii_103_out;
end
always @(*) begin
	/* main: %"31.i20.i.i"*/
	/*   %or.cond11.i.i.i = and i1 %102, %103*/
		main_31i20ii_orcond11iii = (main_31i20ii_102 & main_31i20ii_103);
end
always @(*) begin
	main_34iii_104 = altfp_compare32_1_main_34iii_104_out;
end
always @(*) begin
	main_34iii_105 = altfp_compare32_1_main_34iii_105_out;
end
always @(*) begin
	/* main: %"34.i.i.i"*/
	/*   %or.cond12.i.i.i = and i1 %104, %105*/
		main_34iii_orcond12iii = (main_34iii_104 & main_34iii_105);
end
always @(*) begin
	main_37iii_106 = altfp_compare32_1_main_37iii_106_out;
end
always @(*) begin
	main_37iii_107 = altfp_compare32_1_main_37iii_107_out;
end
always @(*) begin
	/* main: %"37.i.i.i"*/
	/*   %or.cond13.i.i.i = and i1 %106, %107*/
		main_37iii_orcond13iii = (main_37iii_106 & main_37iii_107);
end
always @(*) begin
	/* main: %"37.i.i.i"*/
	/*   %..i21.i.i = select i1 %or.cond13.i.i.i, float 0xBFACE29860000000, float 0xBF6FB389A0000000*/
		main_37iii_i21ii = (main_37iii_orcond13iii ? 32'hBD6714C3 : 32'hBB7D9C4D);
end
always @(*) begin
	/* main: %"37.i.i.i"*/
	/*   %.14.i.i.i = select i1 %or.cond13.i.i.i, float 0x3FC6075F60000000, float 0x3F925460A0000000*/
		main_37iii_14iii = (main_37iii_orcond13iii ? 32'h3E303AFB : 32'h3C92A305);
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__15i15i_287) & (memory_controller_waitrequest == 1'd0)) & (main_15i15i_82 == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3B7D9C4D;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4i3ii_289) & (memory_controller_waitrequest == 1'd0)) & (main_4i3ii_orcondi2ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3D6714C3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7i5ii_291) & (memory_controller_waitrequest == 1'd0)) & (main_7i5ii_orcond1i4ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3E5B4A20;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10i7ii_293) & (memory_controller_waitrequest == 1'd0)) & (main_10i7ii_orcond2i6ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3EF14222;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13i9ii_295) & (memory_controller_waitrequest == 1'd0)) & (main_13i9ii_orcond3i8ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3F3D7B52;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16i11ii_299) & (memory_controller_waitrequest == 1'd0)) & (main_16i11ii_orcond5i10ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3F1942CF;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19i13ii_301) & (memory_controller_waitrequest == 1'd0)) & (main_19i13ii_orcond6i12ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'h3E5BC8F4;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22i15ii_303) & (memory_controller_waitrequest == 1'd0)) & (main_22i15ii_orcond8i14ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'hBE5BC8F4;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25i17ii_305) & (memory_controller_waitrequest == 1'd0)) & (main_25i17ii_orcond9i16ii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'hBF1942CF;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28i19ii_307) & (memory_controller_waitrequest == 1'd0)) & (main_28i19ii_orcond10iii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'hBF3D7B52;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__31i20ii_309) & (memory_controller_waitrequest == 1'd0)) & (main_31i20ii_orcond11iii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'hBEF14222;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__34iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_34iii_orcond12iii == 1'd1))) begin
		main_linear_sech2exitii_108 = 32'hBE5B4A20;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__37iii_313) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_sech2exitii_108 = main_37iii_i21ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__15i15i_287) & (memory_controller_waitrequest == 1'd0)) & (main_15i15i_82 == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4i3ii_289) & (memory_controller_waitrequest == 1'd0)) & (main_4i3ii_orcondi2ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7i5ii_291) & (memory_controller_waitrequest == 1'd0)) & (main_7i5ii_orcond1i4ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10i7ii_293) & (memory_controller_waitrequest == 1'd0)) & (main_10i7ii_orcond2i6ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i9ii_295) & (memory_controller_waitrequest == 1'd0)) & (main_13i9ii_orcond3i8ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16i11ii_299) & (memory_controller_waitrequest == 1'd0)) & (main_16i11ii_orcond5i10ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19i13ii_301) & (memory_controller_waitrequest == 1'd0)) & (main_19i13ii_orcond6i12ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22i15ii_303) & (memory_controller_waitrequest == 1'd0)) & (main_22i15ii_orcond8i14ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25i17ii_305) & (memory_controller_waitrequest == 1'd0)) & (main_25i17ii_orcond9i16ii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28i19ii_307) & (memory_controller_waitrequest == 1'd0)) & (main_28i19ii_orcond10iii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__31i20ii_309) & (memory_controller_waitrequest == 1'd0)) & (main_31i20ii_orcond11iii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__34iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_34iii_orcond12iii == 1'd1))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %108 = phi float [ 0x3F6FB389A0000000, %"15.i15.i" ], [ 0x3FACE29860000000, %"4.i3.i.i" ], [ 0x3FCB694400000000, %"7.i5.i.i" ], [ 0x3FDE284440000000, %"10.i7.i.i" ], [ 0x3FE7AF6A40000000, %"13.i9.i.i" ], [ 0x3FE32859E0000000, %"16.i11.i.i" ], [ 0x3FCB791E80000000, %"19.i13.i.i" ], [ 0xBFCB791E80000000, %"22.i15.i.i" ], [ 0xBFE32859E0000000, %"25.i17.i.i" ], [ 0xBFE7AF6A40000000, %"28.i19.i.i" ], [ 0xBFDE284440000000, %"31.i20.i.i" ], [ 0xBFCB694400000000, %"34.i.i.i" ], [ %..i21.i.i, %"37.i.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__37iii_313) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_sech2exitii_108_reg <= main_linear_sech2exitii_108;
		if (start == 1'b0 && ^(main_linear_sech2exitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__15i15i_287) & (memory_controller_waitrequest == 1'd0)) & (main_15i15i_82 == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3C92A305;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4i3ii_289) & (memory_controller_waitrequest == 1'd0)) & (main_4i3ii_orcondi2ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3E303AFB;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7i5ii_291) & (memory_controller_waitrequest == 1'd0)) & (main_7i5ii_orcond1i4ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3EFC3611;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10i7ii_293) & (memory_controller_waitrequest == 1'd0)) & (main_10i7ii_orcond2i6ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F605532;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13i9ii_295) & (memory_controller_waitrequest == 1'd0)) & (main_13i9ii_orcond3i8ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F93BCD3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16i11ii_299) & (memory_controller_waitrequest == 1'd0)) & (main_16i11ii_orcond5i10ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F8BC01A;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19i13ii_301) & (memory_controller_waitrequest == 1'd0)) & (main_19i13ii_orcond6i12ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F81096C;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22i15ii_303) & (memory_controller_waitrequest == 1'd0)) & (main_22i15ii_orcond8i14ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F81096C;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25i17ii_305) & (memory_controller_waitrequest == 1'd0)) & (main_25i17ii_orcond9i16ii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F8BC01A;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28i19ii_307) & (memory_controller_waitrequest == 1'd0)) & (main_28i19ii_orcond10iii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F93BCD3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__31i20ii_309) & (memory_controller_waitrequest == 1'd0)) & (main_31i20ii_orcond11iii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3F605532;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__34iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_34iii_orcond12iii == 1'd1))) begin
		main_linear_sech2exitii_109 = 32'h3EFC3611;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__37iii_313) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_sech2exitii_109 = main_37iii_14iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__15i15i_287) & (memory_controller_waitrequest == 1'd0)) & (main_15i15i_82 == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4i3ii_289) & (memory_controller_waitrequest == 1'd0)) & (main_4i3ii_orcondi2ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7i5ii_291) & (memory_controller_waitrequest == 1'd0)) & (main_7i5ii_orcond1i4ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10i7ii_293) & (memory_controller_waitrequest == 1'd0)) & (main_10i7ii_orcond2i6ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i9ii_295) & (memory_controller_waitrequest == 1'd0)) & (main_13i9ii_orcond3i8ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16i11ii_299) & (memory_controller_waitrequest == 1'd0)) & (main_16i11ii_orcond5i10ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19i13ii_301) & (memory_controller_waitrequest == 1'd0)) & (main_19i13ii_orcond6i12ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22i15ii_303) & (memory_controller_waitrequest == 1'd0)) & (main_22i15ii_orcond8i14ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25i17ii_305) & (memory_controller_waitrequest == 1'd0)) & (main_25i17ii_orcond9i16ii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28i19ii_307) & (memory_controller_waitrequest == 1'd0)) & (main_28i19ii_orcond10iii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__31i20ii_309) & (memory_controller_waitrequest == 1'd0)) & (main_31i20ii_orcond11iii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__34iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_34iii_orcond12iii == 1'd1))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %109 = phi float [ 0x3F925460A0000000, %"15.i15.i" ], [ 0x3FC6075F60000000, %"4.i3.i.i" ], [ 0x3FDF86C220000000, %"7.i5.i.i" ], [ 0x3FEC0AA640000000, %"10.i7.i.i" ], [ 0x3FF2779A60000000, %"13.i9.i.i" ], [ 0x3FF1780340000000, %"16.i11.i.i" ], [ 0x3FF0212D80000000, %"19.i13.i.i" ], [ 0x3FF0212D80000000, %"22.i15.i.i" ], [ 0x3FF1780340000000, %"25.i17.i.i" ], [ 0x3FF2779A60000000, %"28.i19.i.i" ], [ 0x3FEC0AA640000000, %"31.i20.i.i" ], [ 0x3FDF86C220000000, %"34.i.i.i" ], [ %.14.i.i.i, %"37.i.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__37iii_313) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_sech2exitii_109_reg <= main_linear_sech2exitii_109;
		if (start == 1'b0 && ^(main_linear_sech2exitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_109_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_sech2exitii_110 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_sech2exitii_111 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_sech2exitii_112 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %113 = add nsw i32 %80, 1*/
		main_linear_sech2exitii_113 = (main_15i15i_80_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %113 = add nsw i32 %80, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_linear_sech2exitii_113_reg <= main_linear_sech2exitii_113;
		if (start == 1'b0 && ^(main_linear_sech2exitii_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %exitcond11 = icmp eq i32 %113, 50*/
		main_linear_sech2exitii_exitcond11 = (main_linear_sech2exitii_113 == 32'd50);
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %exitcond11 = icmp eq i32 %113, 50*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_linear_sech2exitii_exitcond11_reg <= main_linear_sech2exitii_exitcond11;
		if (start == 1'b0 && ^(main_linear_sech2exitii_exitcond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_exitcond11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %114 = phi float [ 0.000000e+00, %"12.i14.i" ], [ %144, %linear_tanh.exit23.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__12i14i_283) & (memory_controller_waitrequest == 1'd0))) begin
		main_101ii_114 = 32'h0;
	end
	/* main: %"10.1.i.i"*/
	/*   %114 = phi float [ 0.000000e+00, %"12.i14.i" ], [ %144, %linear_tanh.exit23.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_428) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit23ii_exitcond8_reg == 1'd0))) */ begin
		main_101ii_114 = main_linear_tanhexit23ii_144;
	end
end
always @(posedge clk) begin
	/* main: %"10.1.i.i"*/
	/*   %114 = phi float [ 0.000000e+00, %"12.i14.i" ], [ %144, %linear_tanh.exit23.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__12i14i_283) & (memory_controller_waitrequest == 1'd0))) begin
		main_101ii_114_reg <= main_101ii_114;
		if (start == 1'b0 && ^(main_101ii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_114_reg"); $finish; end
	end
	/* main: %"10.1.i.i"*/
	/*   %114 = phi float [ 0.000000e+00, %"12.i14.i" ], [ %144, %linear_tanh.exit23.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_428) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit23ii_exitcond8_reg == 1'd0))) begin
		main_101ii_114_reg <= main_101ii_114;
		if (start == 1'b0 && ^(main_101ii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %115 = phi i32 [ 0, %"12.i14.i" ], [ %145, %linear_tanh.exit23.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__12i14i_283) & (memory_controller_waitrequest == 1'd0))) begin
		main_101ii_115 = 32'd0;
	end
	/* main: %"10.1.i.i"*/
	/*   %115 = phi i32 [ 0, %"12.i14.i" ], [ %145, %linear_tanh.exit23.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_428) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit23ii_exitcond8_reg == 1'd0))) */ begin
		main_101ii_115 = main_linear_tanhexit23ii_145_reg;
	end
end
always @(posedge clk) begin
	/* main: %"10.1.i.i"*/
	/*   %115 = phi i32 [ 0, %"12.i14.i" ], [ %145, %linear_tanh.exit23.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__12i14i_283) & (memory_controller_waitrequest == 1'd0))) begin
		main_101ii_115_reg <= main_101ii_115;
		if (start == 1'b0 && ^(main_101ii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_115_reg"); $finish; end
	end
	/* main: %"10.1.i.i"*/
	/*   %115 = phi i32 [ 0, %"12.i14.i" ], [ %145, %linear_tanh.exit23.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_428) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit23ii_exitcond8_reg == 1'd0))) begin
		main_101ii_115_reg <= main_101ii_115;
		if (start == 1'b0 && ^(main_101ii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %scevgep9 = getelementptr [50 x float]* @product_1, i32 0, i32 %115*/
		main_101ii_scevgep9 = (`TAG_g_product_1_a + (4 * main_101ii_115_reg));
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %scevgep10 = getelementptr [2 x [50 x float]]* @whitened_signals, i32 0, i32 1, i32 %115*/
		main_101ii_scevgep10 = (`TAG_g_whitened_signals_a + ((200 * 32'd1) + (4 * main_101ii_115_reg)));
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
		main_101ii_116 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_356)) begin
		main_101ii_116_reg <= main_101ii_116;
		if (start == 1'b0 && ^(main_101ii_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
		main_101ii_117 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_356)) begin
		main_101ii_117_reg <= main_101ii_117;
		if (start == 1'b0 && ^(main_101ii_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101ii_117_reg"); $finish; end
	end
end
always @(*) begin
	main_101ii_118 = altfp_compare32_1_main_101ii_118_out;
end
always @(*) begin
	main_4i2ii_119 = altfp_compare32_1_main_4i2ii_119_out;
end
always @(*) begin
	main_4i2ii_120 = altfp_compare32_1_main_4i2ii_120_out;
end
always @(*) begin
	/* main: %"4.i2.i.i"*/
	/*   %or.cond.i1.i.i = and i1 %119, %120*/
		main_4i2ii_orcondi1ii = (main_4i2ii_119 & main_4i2ii_120);
end
always @(*) begin
	main_7i4ii_121 = altfp_compare32_1_main_7i4ii_121_out;
end
always @(*) begin
	main_7i4ii_122 = altfp_compare32_1_main_7i4ii_122_out;
end
always @(*) begin
	/* main: %"7.i4.i.i"*/
	/*   %or.cond1.i3.i.i = and i1 %121, %122*/
		main_7i4ii_orcond1i3ii = (main_7i4ii_121 & main_7i4ii_122);
end
always @(*) begin
	main_10i6ii_123 = altfp_compare32_1_main_10i6ii_123_out;
end
always @(*) begin
	main_10i6ii_124 = altfp_compare32_1_main_10i6ii_124_out;
end
always @(*) begin
	/* main: %"10.i6.i.i"*/
	/*   %or.cond2.i5.i.i = and i1 %123, %124*/
		main_10i6ii_orcond2i5ii = (main_10i6ii_123 & main_10i6ii_124);
end
always @(*) begin
	main_13i8ii_125 = altfp_compare32_1_main_13i8ii_125_out;
end
always @(*) begin
	main_13i8ii_126 = altfp_compare32_1_main_13i8ii_126_out;
end
always @(*) begin
	/* main: %"13.i8.i.i"*/
	/*   %or.cond3.i7.i.i = and i1 %125, %126*/
		main_13i8ii_orcond3i7ii = (main_13i8ii_125 & main_13i8ii_126);
end
always @(*) begin
	main_16i10ii_127 = altfp_compare32_1_main_16i10ii_127_out;
end
always @(*) begin
	main_16i10ii_128 = altfp_compare32_1_main_16i10ii_128_out;
end
always @(*) begin
	/* main: %"16.i10.i.i"*/
	/*   %or.cond4.i9.i.i = and i1 %127, %128*/
		main_16i10ii_orcond4i9ii = (main_16i10ii_127 & main_16i10ii_128);
end
always @(*) begin
	main_19i12ii_129 = altfp_compare32_1_main_19i12ii_129_out;
end
always @(*) begin
	main_19i12ii_130 = altfp_compare32_1_main_19i12ii_130_out;
end
always @(*) begin
	/* main: %"19.i12.i.i"*/
	/*   %or.cond5.i11.i.i = and i1 %129, %130*/
		main_19i12ii_orcond5i11ii = (main_19i12ii_129 & main_19i12ii_130);
end
always @(*) begin
	main_22i14ii_131 = altfp_compare32_1_main_22i14ii_131_out;
end
always @(*) begin
	main_22i14ii_132 = altfp_compare32_1_main_22i14ii_132_out;
end
always @(*) begin
	/* main: %"22.i14.i.i"*/
	/*   %or.cond6.i13.i.i = and i1 %131, %132*/
		main_22i14ii_orcond6i13ii = (main_22i14ii_131 & main_22i14ii_132);
end
always @(*) begin
	main_25i16ii_133 = altfp_compare32_1_main_25i16ii_133_out;
end
always @(*) begin
	main_25i16ii_134 = altfp_compare32_1_main_25i16ii_134_out;
end
always @(*) begin
	/* main: %"25.i16.i.i"*/
	/*   %or.cond7.i15.i.i = and i1 %133, %134*/
		main_25i16ii_orcond7i15ii = (main_25i16ii_133 & main_25i16ii_134);
end
always @(*) begin
	main_28i18ii_135 = altfp_compare32_1_main_28i18ii_135_out;
end
always @(*) begin
	main_28i18ii_136 = altfp_compare32_1_main_28i18ii_136_out;
end
always @(*) begin
	/* main: %"28.i18.i.i"*/
	/*   %or.cond8.i17.i.i = and i1 %135, %136*/
		main_28i18ii_orcond8i17ii = (main_28i18ii_135 & main_28i18ii_136);
end
always @(*) begin
	main_31i22ii_137 = altfp_compare32_1_main_31i22ii_137_out;
end
always @(*) begin
	main_31i22ii_138 = altfp_compare32_1_main_31i22ii_138_out;
end
always @(*) begin
	/* main: %"31.i22.i.i"*/
	/*   %or.cond9.i19.i.i = and i1 %137, %138*/
		main_31i22ii_orcond9i19ii = (main_31i22ii_137 & main_31i22ii_138);
end
always @(*) begin
	/* main: %"31.i22.i.i"*/
	/*   %..i20.i.i = select i1 %or.cond9.i19.i.i, float 0x3F9E000000000000, float 0x3F48000040000000*/
		main_31i22ii_i20ii = (main_31i22ii_orcond9i19ii ? 32'h3CF00000 : 32'h3A400002);
end
always @(*) begin
	/* main: %"31.i22.i.i"*/
	/*   %.10.i21.i.i = select i1 %or.cond9.i19.i.i, float 0x3FED0068E0000000, float 1.000000e+00*/
		main_31i22ii_10i21ii = (main_31i22ii_orcond9i19ii ? 32'h3F680347 : 32'h3F800000);
end
always @(*) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__101ii_357) & (memory_controller_waitrequest == 1'd0)) & (main_101ii_118 == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3A400002;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4i2ii_359) & (memory_controller_waitrequest == 1'd0)) & (main_4i2ii_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3CF00000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7i4ii_361) & (memory_controller_waitrequest == 1'd0)) & (main_7i4ii_orcond1i3ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10i6ii_363) & (memory_controller_waitrequest == 1'd0)) & (main_10i6ii_orcond2i5ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13i8ii_365) & (memory_controller_waitrequest == 1'd0)) & (main_13i8ii_orcond3i7ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16i10ii_367) & (memory_controller_waitrequest == 1'd0)) & (main_16i10ii_orcond4i9ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19i12ii_369) & (memory_controller_waitrequest == 1'd0)) & (main_19i12ii_orcond5i11ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22i14ii_371) & (memory_controller_waitrequest == 1'd0)) & (main_22i14ii_orcond6i13ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25i16ii_373) & (memory_controller_waitrequest == 1'd0)) & (main_25i16ii_orcond7i15ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28i18ii_375) & (memory_controller_waitrequest == 1'd0)) & (main_28i18ii_orcond8i17ii == 1'd1))) begin
		main_linear_tanhexit23ii_139 = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31i22ii_377) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexit23ii_139 = main_31i22ii_i20ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__101ii_357) & (memory_controller_waitrequest == 1'd0)) & (main_101ii_118 == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4i2ii_359) & (memory_controller_waitrequest == 1'd0)) & (main_4i2ii_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7i4ii_361) & (memory_controller_waitrequest == 1'd0)) & (main_7i4ii_orcond1i3ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10i6ii_363) & (memory_controller_waitrequest == 1'd0)) & (main_10i6ii_orcond2i5ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i8ii_365) & (memory_controller_waitrequest == 1'd0)) & (main_13i8ii_orcond3i7ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16i10ii_367) & (memory_controller_waitrequest == 1'd0)) & (main_16i10ii_orcond4i9ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19i12ii_369) & (memory_controller_waitrequest == 1'd0)) & (main_19i12ii_orcond5i11ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22i14ii_371) & (memory_controller_waitrequest == 1'd0)) & (main_22i14ii_orcond6i13ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25i16ii_373) & (memory_controller_waitrequest == 1'd0)) & (main_25i16ii_orcond7i15ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28i18ii_375) & (memory_controller_waitrequest == 1'd0)) & (main_28i18ii_orcond8i17ii == 1'd1))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %139 = phi float [ 0x3F48000040000000, %"10.1.i.i" ], [ 0x3F9E000000000000, %"4.i2.i.i" ], [ 0x3FBDB00000000000, %"7.i4.i.i" ], [ 0x3FD2340000000000, %"10.i6.i.i" ], [ 0x3FE2FA0000000000, %"13.i8.i.i" ], [ 0x3FEE7E0000000000, %"16.i10.i.i" ], [ 0x3FEE7E0000000000, %"19.i12.i.i" ], [ 0x3FE2FA0000000000, %"22.i14.i.i" ], [ 0x3FD2340000000000, %"25.i16.i.i" ], [ 0x3FBDB00000000000, %"28.i18.i.i" ], [ %..i20.i.i, %"31.i22.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__31i22ii_377) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexit23ii_139_reg <= main_linear_tanhexit23ii_139;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__101ii_357) & (memory_controller_waitrequest == 1'd0)) & (main_101ii_118 == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'hBF800000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__4i2ii_359) & (memory_controller_waitrequest == 1'd0)) & (main_4i2ii_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'hBF680347;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__7i4ii_361) & (memory_controller_waitrequest == 1'd0)) & (main_7i4ii_orcond1i3ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'hBF400000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__10i6ii_363) & (memory_controller_waitrequest == 1'd0)) & (main_10i6ii_orcond2i5ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'hBF000000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__13i8ii_365) & (memory_controller_waitrequest == 1'd0)) & (main_13i8ii_orcond3i7ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'hBE400000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__16i10ii_367) & (memory_controller_waitrequest == 1'd0)) & (main_16i10ii_orcond4i9ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'h0;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19i12ii_369) & (memory_controller_waitrequest == 1'd0)) & (main_19i12ii_orcond5i11ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'h0;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__22i14ii_371) & (memory_controller_waitrequest == 1'd0)) & (main_22i14ii_orcond6i13ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'h3E400000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__25i16ii_373) & (memory_controller_waitrequest == 1'd0)) & (main_25i16ii_orcond7i15ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'h3F000000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else if ((((cur_state == LEGUP_F_main_BB__28i18ii_375) & (memory_controller_waitrequest == 1'd0)) & (main_28i18ii_orcond8i17ii == 1'd1))) begin
		main_linear_tanhexit23ii_140 = 32'h3F400000;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31i22ii_377) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexit23ii_140 = main_31i22ii_10i21ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__101ii_357) & (memory_controller_waitrequest == 1'd0)) & (main_101ii_118 == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__4i2ii_359) & (memory_controller_waitrequest == 1'd0)) & (main_4i2ii_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__7i4ii_361) & (memory_controller_waitrequest == 1'd0)) & (main_7i4ii_orcond1i3ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__10i6ii_363) & (memory_controller_waitrequest == 1'd0)) & (main_10i6ii_orcond2i5ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i8ii_365) & (memory_controller_waitrequest == 1'd0)) & (main_13i8ii_orcond3i7ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__16i10ii_367) & (memory_controller_waitrequest == 1'd0)) & (main_16i10ii_orcond4i9ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__19i12ii_369) & (memory_controller_waitrequest == 1'd0)) & (main_19i12ii_orcond5i11ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__22i14ii_371) & (memory_controller_waitrequest == 1'd0)) & (main_22i14ii_orcond6i13ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__25i16ii_373) & (memory_controller_waitrequest == 1'd0)) & (main_25i16ii_orcond7i15ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__28i18ii_375) & (memory_controller_waitrequest == 1'd0)) & (main_28i18ii_orcond8i17ii == 1'd1))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %140 = phi float [ -1.000000e+00, %"10.1.i.i" ], [ 0xBFED0068E0000000, %"4.i2.i.i" ], [ -7.500000e-01, %"7.i4.i.i" ], [ -5.000000e-01, %"10.i6.i.i" ], [ -1.875000e-01, %"13.i8.i.i" ], [ 0.000000e+00, %"16.i10.i.i" ], [ 0.000000e+00, %"19.i12.i.i" ], [ 1.875000e-01, %"22.i14.i.i" ], [ 5.000000e-01, %"25.i16.i.i" ], [ 7.500000e-01, %"28.i18.i.i" ], [ %.10.i21.i.i, %"31.i22.i.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__31i22ii_377) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexit23ii_140_reg <= main_linear_tanhexit23ii_140;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_140_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_tanhexit23ii_141 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexit23ii_142 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_tanhexit23ii_143 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexit23ii_144 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %145 = add nsw i32 %115, 1*/
		main_linear_tanhexit23ii_145 = (main_101ii_115_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %145 = add nsw i32 %115, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_378)) begin
		main_linear_tanhexit23ii_145_reg <= main_linear_tanhexit23ii_145;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %exitcond8 = icmp eq i32 %145, 50*/
		main_linear_tanhexit23ii_exitcond8 = (main_linear_tanhexit23ii_145 == 32'd50);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit23.i.i*/
	/*   %exitcond8 = icmp eq i32 %145, 50*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_378)) begin
		main_linear_tanhexit23ii_exitcond8_reg <= main_linear_tanhexit23ii_exitcond8;
		if (start == 1'b0 && ^(main_linear_tanhexit23ii_exitcond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit23ii_exitcond8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %"12.1.i.i"*/
	/*   %.lcssa63 = phi float [ %144, %linear_tanh.exit23.i.i ]*/
		main_121ii_lcssa63 = main_linear_tanhexit23ii_144;
end
always @(posedge clk) begin
	/* main: %"12.1.i.i"*/
	/*   %.lcssa63 = phi float [ %144, %linear_tanh.exit23.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_428) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit23ii_exitcond8_reg == 1'd1))) begin
		main_121ii_lcssa63_reg <= main_121ii_lcssa63;
		if (start == 1'b0 && ^(main_121ii_lcssa63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121ii_lcssa63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %.lcssa64 = phi float [ %112, %linear_sech2.exit.i.i ]*/
		main_rotateexiti_lcssa64 = main_linear_sech2exitii_112;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %.lcssa64 = phi float [ %112, %linear_sech2.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_353) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond11_reg == 1'd1))) begin
		main_rotateexiti_lcssa64_reg <= main_rotateexiti_lcssa64;
		if (start == 1'b0 && ^(main_rotateexiti_lcssa64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_lcssa64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %146 = add nsw i32 %31, 1*/
		main_rotateexiti_146 = (main_3i_31_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %146 = add nsw i32 %31, 1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		main_rotateexiti_146_reg <= main_rotateexiti_146;
		if (start == 1'b0 && ^(main_rotateexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %147 = load float* @w_next.0, align 4, !tbaa !1*/
		main_rotateexiti_147 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_rotateexiti_148 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_rotateexiti_149 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
		main_rotateexiti_150 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_440)) begin
		main_rotateexiti_150_reg <= main_rotateexiti_150;
		if (start == 1'b0 && ^(main_rotateexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	main_rotateexiti_151 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %rotate.exit.i*/
/*   %151 = fmul float %150, %150*/
	main_rotateexiti_151_reg = main_entry_6_reg;
end
always @(*) begin
	main_rotateexiti_152 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %152 = fadd float %149, %151*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_479)) begin
		main_rotateexiti_152_reg <= main_rotateexiti_152;
		if (start == 1'b0 && ^(main_rotateexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_152_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %152 = fadd float %149, %151*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_479)) begin
		main_rotateexiti_152_reg <= main_rotateexiti_152;
		if (start == 1'b0 && ^(main_rotateexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %153 = bitcast float %152 to i32*/
		main_rotateexiti_153 = main_rotateexiti_152;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %153 = bitcast float %152 to i32*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_479)) begin
		main_rotateexiti_153_reg <= main_rotateexiti_153;
		if (start == 1'b0 && ^(main_rotateexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %154 = and i32 %153, 2147483647*/
		main_rotateexiti_154 = (main_rotateexiti_153 & 32'd2147483647);
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %154 = and i32 %153, 2147483647*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_479)) begin
		main_rotateexiti_154_reg <= main_rotateexiti_154;
		if (start == 1'b0 && ^(main_rotateexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %155 = icmp ult i32 %154, 2139095040*/
		main_rotateexiti_155 = (main_rotateexiti_154 < 32'd2139095040);
end
always @(*) begin
	main_156_157 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_156_158 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %159*/
	/*   %160 = icmp eq i32 %154, 0*/
		main_159_160 = (main_rotateexiti_154_reg == 32'd0);
end
always @(*) begin
	/* main: %161*/
	/*   %162 = icmp slt i32 %153, 0*/
		main_161_162 = ($signed(main_rotateexiti_153_reg) < $signed(32'd0));
end
always @(*) begin
	main_163_164 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_163_165 = main_altfp_divide_32_0;
end
always @(*) begin
	/* main: %166*/
	/*   %167 = ashr i32 %153, 23*/
		main_166_167 = ($signed(main_rotateexiti_153_reg) >>> 32'd23);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %167 = ashr i32 %153, 23*/
	if ((cur_state == LEGUP_F_main_BB__166_556)) begin
		main_166_167_reg <= main_166_167;
		if (start == 1'b0 && ^(main_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %168 = icmp ult i32 %154, 8388608*/
		main_166_168 = (main_rotateexiti_154_reg < 32'd8388608);
end
always @(*) begin
	/* main: %169*/
	/*   %ix.i.i.0 = phi i32 [ %174, %173 ], [ %153, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_557) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_ixii0 = main_rotateexiti_153_reg;
	end
	/* main: %169*/
	/*   %ix.i.i.0 = phi i32 [ %174, %173 ], [ %153, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__173_559) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_169_ixii0 = main_173_174;
	end
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %ix.i.i.0 = phi i32 [ %174, %173 ], [ %153, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_557) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_ixii0_reg <= main_169_ixii0;
		if (start == 1'b0 && ^(main_169_ixii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_ixii0_reg"); $finish; end
	end
	/* main: %169*/
	/*   %ix.i.i.0 = phi i32 [ %174, %173 ], [ %153, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__173_559) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_ixii0_reg <= main_169_ixii0;
		if (start == 1'b0 && ^(main_169_ixii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_ixii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %170 = phi i32 [ %175, %173 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_557) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_170 = 32'd0;
	end
	/* main: %169*/
	/*   %170 = phi i32 [ %175, %173 ], [ 0, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__173_559) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_169_170 = main_173_175;
	end
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %170 = phi i32 [ %175, %173 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_557) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_170_reg <= main_169_170;
		if (start == 1'b0 && ^(main_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_170_reg"); $finish; end
	end
	/* main: %169*/
	/*   %170 = phi i32 [ %175, %173 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__173_559) & (memory_controller_waitrequest == 1'd0))) begin
		main_169_170_reg <= main_169_170;
		if (start == 1'b0 && ^(main_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %171 = and i32 %ix.i.i.0, 8388608*/
		main_169_171 = (main_169_ixii0_reg & 32'd8388608);
end
always @(*) begin
	/* main: %169*/
	/*   %172 = icmp eq i32 %171, 0*/
		main_169_172 = (main_169_171 == 32'd0);
end
always @(*) begin
	/* main: %173*/
	/*   %174 = shl i32 %ix.i.i.0, 1*/
		main_173_174 = (main_169_ixii0_reg <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %173*/
	/*   %175 = add nsw i32 %170, 1*/
		main_173_175 = (main_169_170_reg + 32'd1);
end
always @(*) begin
	/* main: %176*/
	/*   %i.i.i.0.lcssa = phi i32 [ %170, %169 ]*/
		main_176_iii0lcssa = main_169_170_reg;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %i.i.i.0.lcssa = phi i32 [ %170, %169 ]*/
	if ((((cur_state == LEGUP_F_main_BB__169_558) & (memory_controller_waitrequest == 1'd0)) & (main_169_172 == 1'd0))) begin
		main_176_iii0lcssa_reg <= main_176_iii0lcssa;
		if (start == 1'b0 && ^(main_176_iii0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_iii0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %ix.i.i.0.lcssa = phi i32 [ %ix.i.i.0, %169 ]*/
		main_176_ixii0lcssa = main_169_ixii0_reg;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %ix.i.i.0.lcssa = phi i32 [ %ix.i.i.0, %169 ]*/
	if ((((cur_state == LEGUP_F_main_BB__169_558) & (memory_controller_waitrequest == 1'd0)) & (main_169_172 == 1'd0))) begin
		main_176_ixii0lcssa_reg <= main_176_ixii0lcssa;
		if (start == 1'b0 && ^(main_176_ixii0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_ixii0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %177 = sub nsw i32 %i.i.i.0.lcssa, 1*/
		main_176_177 = (main_176_iii0lcssa_reg - 32'd1);
end
always @(*) begin
	/* main: %176*/
	/*   %178 = sub nsw i32 %167, %177*/
		main_176_178 = (main_166_167_reg - main_176_177);
end
always @(*) begin
	/* main: %179*/
	/*   %m.i.i.0 = phi i32 [ %178, %176 ], [ %167, %166 ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_556) & (memory_controller_waitrequest == 1'd0)) & (main_166_168 == 1'd0))) begin
		main_179_mii0 = main_166_167;
	end
	/* main: %179*/
	/*   %m.i.i.0 = phi i32 [ %178, %176 ], [ %167, %166 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__176_560) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_179_mii0 = main_176_178;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %m.i.i.0 = phi i32 [ %178, %176 ], [ %167, %166 ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_556) & (memory_controller_waitrequest == 1'd0)) & (main_166_168 == 1'd0))) begin
		main_179_mii0_reg <= main_179_mii0;
		if (start == 1'b0 && ^(main_179_mii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_mii0_reg"); $finish; end
	end
	/* main: %179*/
	/*   %m.i.i.0 = phi i32 [ %178, %176 ], [ %167, %166 ]*/
	if (((cur_state == LEGUP_F_main_BB__176_560) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_mii0_reg <= main_179_mii0;
		if (start == 1'b0 && ^(main_179_mii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_mii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %ix.i.i.1 = phi i32 [ %ix.i.i.0.lcssa, %176 ], [ %153, %166 ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_556) & (memory_controller_waitrequest == 1'd0)) & (main_166_168 == 1'd0))) begin
		main_179_ixii1 = main_rotateexiti_153_reg;
	end
	/* main: %179*/
	/*   %ix.i.i.1 = phi i32 [ %ix.i.i.0.lcssa, %176 ], [ %153, %166 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__176_560) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_179_ixii1 = main_176_ixii0lcssa_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %ix.i.i.1 = phi i32 [ %ix.i.i.0.lcssa, %176 ], [ %153, %166 ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_556) & (memory_controller_waitrequest == 1'd0)) & (main_166_168 == 1'd0))) begin
		main_179_ixii1_reg <= main_179_ixii1;
		if (start == 1'b0 && ^(main_179_ixii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_ixii1_reg"); $finish; end
	end
	/* main: %179*/
	/*   %ix.i.i.1 = phi i32 [ %ix.i.i.0.lcssa, %176 ], [ %153, %166 ]*/
	if (((cur_state == LEGUP_F_main_BB__176_560) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_ixii1_reg <= main_179_ixii1;
		if (start == 1'b0 && ^(main_179_ixii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_ixii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %180 = sub nsw i32 %m.i.i.0, 127*/
		main_179_180 = (main_179_mii0_reg - 32'd127);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %180 = sub nsw i32 %m.i.i.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__179_561)) begin
		main_179_180_reg <= main_179_180;
		if (start == 1'b0 && ^(main_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %181 = and i32 %ix.i.i.1, 8388607*/
		main_179_181 = (main_179_ixii1_reg & 32'd8388607);
end
always @(*) begin
	/* main: %179*/
	/*   %182 = or i32 %181, 8388608*/
		main_179_182 = (main_179_181 | 32'd8388608);
end
always @(*) begin
	/* main: %179*/
	/*   %183 = and i32 %180, 1*/
		main_179_183 = (main_179_180 & 32'd1);
end
always @(*) begin
	/* main: %179*/
	/*   %184 = icmp ne i32 %183, 0*/
		main_179_184 = (main_179_183 != 32'd0);
end
always @(*) begin
	/* main: %179*/
	/*   %185 = add nsw i32 %182, %182*/
		main_179_185 = (main_179_182 + main_179_182);
end
always @(*) begin
	/* main: %179*/
	/*   %. = select i1 %184, i32 %185, i32 %182*/
		main_179_ = (main_179_184 ? main_179_185 : main_179_182);
end
always @(*) begin
	/* main: %179*/
	/*   %186 = add nsw i32 %., %.*/
		main_179_186 = (main_179_ + main_179_);
end
always @(*) begin
	/* main: %187*/
	/*   %s.i.i.0 = phi i32 [ 0, %179 ], [ %s.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_sii0 = 32'd0;
	end
	/* main: %187*/
	/*   %s.i.i.0 = phi i32 [ 0, %179 ], [ %s.i.i.1, %197 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_187_sii0 = main_197_sii1_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %s.i.i.0 = phi i32 [ 0, %179 ], [ %s.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_sii0_reg <= main_187_sii0;
		if (start == 1'b0 && ^(main_187_sii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_sii0_reg"); $finish; end
	end
	/* main: %187*/
	/*   %s.i.i.0 = phi i32 [ 0, %179 ], [ %s.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_sii0_reg <= main_187_sii0;
		if (start == 1'b0 && ^(main_187_sii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_sii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %q.i.i.0 = phi i32 [ 0, %179 ], [ %q.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_qii0 = 32'd0;
	end
	/* main: %187*/
	/*   %q.i.i.0 = phi i32 [ 0, %179 ], [ %q.i.i.1, %197 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_187_qii0 = main_197_qii1_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %q.i.i.0 = phi i32 [ 0, %179 ], [ %q.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_qii0_reg <= main_187_qii0;
		if (start == 1'b0 && ^(main_187_qii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_qii0_reg"); $finish; end
	end
	/* main: %187*/
	/*   %q.i.i.0 = phi i32 [ 0, %179 ], [ %q.i.i.1, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_qii0_reg <= main_187_qii0;
		if (start == 1'b0 && ^(main_187_qii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_qii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %ix.i.i.3 = phi i32 [ %186, %179 ], [ %198, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_ixii3 = main_179_186;
	end
	/* main: %187*/
	/*   %ix.i.i.3 = phi i32 [ %186, %179 ], [ %198, %197 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_187_ixii3 = main_197_198;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %ix.i.i.3 = phi i32 [ %186, %179 ], [ %198, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_ixii3_reg <= main_187_ixii3;
		if (start == 1'b0 && ^(main_187_ixii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_ixii3_reg"); $finish; end
	end
	/* main: %187*/
	/*   %ix.i.i.3 = phi i32 [ %186, %179 ], [ %198, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_ixii3_reg <= main_187_ixii3;
		if (start == 1'b0 && ^(main_187_ixii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_ixii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %r.i.i.0 = phi i32 [ 16777216, %179 ], [ %199, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_rii0 = 32'd16777216;
	end
	/* main: %187*/
	/*   %r.i.i.0 = phi i32 [ 16777216, %179 ], [ %199, %197 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_187_rii0 = main_197_199;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %r.i.i.0 = phi i32 [ 16777216, %179 ], [ %199, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_rii0_reg <= main_187_rii0;
		if (start == 1'b0 && ^(main_187_rii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_rii0_reg"); $finish; end
	end
	/* main: %187*/
	/*   %r.i.i.0 = phi i32 [ 16777216, %179 ], [ %199, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_rii0_reg <= main_187_rii0;
		if (start == 1'b0 && ^(main_187_rii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_rii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %188 = phi i32 [ %199, %197 ], [ 16777216, %179 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_188 = 32'd16777216;
	end
	/* main: %187*/
	/*   %188 = phi i32 [ %199, %197 ], [ 16777216, %179 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_187_188 = main_197_199;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %188 = phi i32 [ %199, %197 ], [ 16777216, %179 ]*/
	if (((cur_state == LEGUP_F_main_BB__179_561) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_188_reg <= main_187_188;
		if (start == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
	end
	/* main: %187*/
	/*   %188 = phi i32 [ %199, %197 ], [ 16777216, %179 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_565) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_188_reg <= main_187_188;
		if (start == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %189 = icmp ne i32 %188, 0*/
		main_187_189 = (main_187_188_reg != 32'd0);
end
always @(*) begin
	/* main: %190*/
	/*   %191 = add i32 %s.i.i.0, %r.i.i.0*/
		main_190_191 = (main_187_sii0_reg + main_187_rii0_reg);
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %191 = add i32 %s.i.i.0, %r.i.i.0*/
	if ((cur_state == LEGUP_F_main_BB__190_563)) begin
		main_190_191_reg <= main_190_191;
		if (start == 1'b0 && ^(main_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %192 = icmp sle i32 %191, %ix.i.i.3*/
		main_190_192 = ($signed(main_190_191) <= $signed(main_187_ixii3_reg));
end
always @(*) begin
	/* main: %193*/
	/*   %194 = add i32 %191, %r.i.i.0*/
		main_193_194 = (main_190_191_reg + main_187_rii0_reg);
end
always @(*) begin
	/* main: %193*/
	/*   %195 = sub nsw i32 %ix.i.i.3, %191*/
		main_193_195 = (main_187_ixii3_reg - main_190_191_reg);
end
always @(*) begin
	/* main: %193*/
	/*   %196 = add i32 %q.i.i.0, %r.i.i.0*/
		main_193_196 = (main_187_qii0_reg + main_187_rii0_reg);
end
always @(*) begin
	/* main: %197*/
	/*   %s.i.i.1 = phi i32 [ %194, %193 ], [ %s.i.i.0, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_sii1 = main_187_sii0_reg;
	end
	/* main: %197*/
	/*   %s.i.i.1 = phi i32 [ %194, %193 ], [ %s.i.i.0, %190 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_197_sii1 = main_193_194;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %s.i.i.1 = phi i32 [ %194, %193 ], [ %s.i.i.0, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_sii1_reg <= main_197_sii1;
		if (start == 1'b0 && ^(main_197_sii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_sii1_reg"); $finish; end
	end
	/* main: %197*/
	/*   %s.i.i.1 = phi i32 [ %194, %193 ], [ %s.i.i.0, %190 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_sii1_reg <= main_197_sii1;
		if (start == 1'b0 && ^(main_197_sii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_sii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %q.i.i.1 = phi i32 [ %196, %193 ], [ %q.i.i.0, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_qii1 = main_187_qii0_reg;
	end
	/* main: %197*/
	/*   %q.i.i.1 = phi i32 [ %196, %193 ], [ %q.i.i.0, %190 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_197_qii1 = main_193_196;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %q.i.i.1 = phi i32 [ %196, %193 ], [ %q.i.i.0, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_qii1_reg <= main_197_qii1;
		if (start == 1'b0 && ^(main_197_qii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_qii1_reg"); $finish; end
	end
	/* main: %197*/
	/*   %q.i.i.1 = phi i32 [ %196, %193 ], [ %q.i.i.0, %190 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_qii1_reg <= main_197_qii1;
		if (start == 1'b0 && ^(main_197_qii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_qii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %ix.i.i.4 = phi i32 [ %195, %193 ], [ %ix.i.i.3, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_ixii4 = main_187_ixii3_reg;
	end
	/* main: %197*/
	/*   %ix.i.i.4 = phi i32 [ %195, %193 ], [ %ix.i.i.3, %190 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_197_ixii4 = main_193_195;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %ix.i.i.4 = phi i32 [ %195, %193 ], [ %ix.i.i.3, %190 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_563) & (memory_controller_waitrequest == 1'd0)) & (main_190_192 == 1'd0))) begin
		main_197_ixii4_reg <= main_197_ixii4;
		if (start == 1'b0 && ^(main_197_ixii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_ixii4_reg"); $finish; end
	end
	/* main: %197*/
	/*   %ix.i.i.4 = phi i32 [ %195, %193 ], [ %ix.i.i.3, %190 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_564) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_ixii4_reg <= main_197_ixii4;
		if (start == 1'b0 && ^(main_197_ixii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_ixii4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %198 = add nsw i32 %ix.i.i.4, %ix.i.i.4*/
		main_197_198 = (main_197_ixii4_reg + main_197_ixii4_reg);
end
always @(*) begin
	/* main: %197*/
	/*   %199 = lshr i32 %r.i.i.0, 1*/
		main_197_199 = (main_187_rii0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* main: %200*/
	/*   %ix.i.i.3.lcssa = phi i32 [ %ix.i.i.3, %187 ]*/
		main_200_ixii3lcssa = main_187_ixii3_reg;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %ix.i.i.3.lcssa = phi i32 [ %ix.i.i.3, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_562) & (memory_controller_waitrequest == 1'd0)) & (main_187_189 == 1'd0))) begin
		main_200_ixii3lcssa_reg <= main_200_ixii3lcssa;
		if (start == 1'b0 && ^(main_200_ixii3lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_ixii3lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %q.i.i.0.lcssa = phi i32 [ %q.i.i.0, %187 ]*/
		main_200_qii0lcssa = main_187_qii0_reg;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %q.i.i.0.lcssa = phi i32 [ %q.i.i.0, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_562) & (memory_controller_waitrequest == 1'd0)) & (main_187_189 == 1'd0))) begin
		main_200_qii0lcssa_reg <= main_200_qii0lcssa;
		if (start == 1'b0 && ^(main_200_qii0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_qii0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %201 = ashr i32 %180, 1*/
		main_200_201 = ($signed(main_179_180_reg) >>> 32'd1);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %201 = ashr i32 %180, 1*/
	if ((cur_state == LEGUP_F_main_BB__200_566)) begin
		main_200_201_reg <= main_200_201;
		if (start == 1'b0 && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %202 = icmp ne i32 %ix.i.i.3.lcssa, 0*/
		main_200_202 = (main_200_ixii3lcssa_reg != 32'd0);
end
always @(*) begin
	/* main: %203*/
	/*   %204 = and i32 %q.i.i.0.lcssa, 1*/
		main_203_204 = (main_200_qii0lcssa_reg & 32'd1);
end
always @(*) begin
	/* main: %203*/
	/*   %205 = add nsw i32 %q.i.i.0.lcssa, %204*/
		main_203_205 = (main_200_qii0lcssa_reg + main_203_204);
end
always @(*) begin
	/* main: %206*/
	/*   %q.i.i.2 = phi i32 [ %205, %203 ], [ %q.i.i.0.lcssa, %200 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_566) & (memory_controller_waitrequest == 1'd0)) & (main_200_202 == 1'd0))) begin
		main_206_qii2 = main_200_qii0lcssa_reg;
	end
	/* main: %206*/
	/*   %q.i.i.2 = phi i32 [ %205, %203 ], [ %q.i.i.0.lcssa, %200 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__203_567) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_206_qii2 = main_203_205;
	end
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %q.i.i.2 = phi i32 [ %205, %203 ], [ %q.i.i.0.lcssa, %200 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_566) & (memory_controller_waitrequest == 1'd0)) & (main_200_202 == 1'd0))) begin
		main_206_qii2_reg <= main_206_qii2;
		if (start == 1'b0 && ^(main_206_qii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_qii2_reg"); $finish; end
	end
	/* main: %206*/
	/*   %q.i.i.2 = phi i32 [ %205, %203 ], [ %q.i.i.0.lcssa, %200 ]*/
	if (((cur_state == LEGUP_F_main_BB__203_567) & (memory_controller_waitrequest == 1'd0))) begin
		main_206_qii2_reg <= main_206_qii2;
		if (start == 1'b0 && ^(main_206_qii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_qii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %207 = ashr i32 %q.i.i.2, 1*/
		main_206_207 = ($signed(main_206_qii2_reg) >>> 32'd1);
end
always @(*) begin
	/* main: %206*/
	/*   %208 = add nsw i32 %207, 1056964608*/
		main_206_208 = (main_206_207 + 32'd1056964608);
end
always @(*) begin
	/* main: %206*/
	/*   %209 = shl i32 %201, 23*/
		main_206_209 = (main_200_201_reg <<< (32'd23 % 32));
end
always @(*) begin
	/* main: %206*/
	/*   %210 = add nsw i32 %208, %209*/
		main_206_210 = (main_206_208 + main_206_209);
end
always @(*) begin
	/* main: %206*/
	/*   %211 = bitcast i32 %210 to float*/
		main_206_211 = main_206_210;
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_505) & (memory_controller_waitrequest == 1'd0))) begin
		main_sqrtfexit_0 = main_156_158;
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__159_506) & (memory_controller_waitrequest == 1'd0)) & (main_159_160 == 1'd1))) begin
		main_sqrtfexit_0 = main_rotateexiti_152_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	else if (((cur_state == LEGUP_F_main_BB__163_555) & (memory_controller_waitrequest == 1'd0))) begin
		main_sqrtfexit_0 = main_163_165;
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__206_568) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_sqrtfexit_0 = main_206_211;
	end
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_505) & (memory_controller_waitrequest == 1'd0))) begin
		main_sqrtfexit_0_reg <= main_sqrtfexit_0;
		if (start == 1'b0 && ^(main_sqrtfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_0_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	if ((((cur_state == LEGUP_F_main_BB__159_506) & (memory_controller_waitrequest == 1'd0)) & (main_159_160 == 1'd1))) begin
		main_sqrtfexit_0_reg <= main_sqrtfexit_0;
		if (start == 1'b0 && ^(main_sqrtfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_0_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_555) & (memory_controller_waitrequest == 1'd0))) begin
		main_sqrtfexit_0_reg <= main_sqrtfexit_0;
		if (start == 1'b0 && ^(main_sqrtfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_0_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %.0 = phi float [ %165, %163 ], [ %211, %206 ], [ %158, %156 ], [ %152, %159 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_568) & (memory_controller_waitrequest == 1'd0))) begin
		main_sqrtfexit_0_reg <= main_sqrtfexit_0;
		if (start == 1'b0 && ^(main_sqrtfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %212 = load float* @w_next.0, align 4, !tbaa !1*/
		main_sqrtfexit_212 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_sqrtfexit_213 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_sqrtfexit_214 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
		main_sqrtfexit_215 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_574)) begin
		main_sqrtfexit_215_reg <= main_sqrtfexit_215;
		if (start == 1'b0 && ^(main_sqrtfexit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_215_reg"); $finish; end
	end
end
always @(*) begin
	main_sqrtfexit_216 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %sqrtf.exit*/
/*   %216 = fmul float %.pre5.i.i, %215*/
	main_sqrtfexit_216_reg = main_entry_6_reg;
end
always @(*) begin
	main_sqrtfexit_217 = main_altfp_add_32_0;
end
always @(*) begin
/* main: %sqrtf.exit*/
/*   %217 = fadd float %214, %216*/
	main_sqrtfexit_217_reg = main_entry_7_reg;
end
always @(*) begin
	main_sqrtfexit_218 = altfp_compare32_1_main_sqrtfexit_218_out;
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %218 = fcmp ogt float %217, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_614)) begin
		main_sqrtfexit_218_reg <= main_sqrtfexit_218;
		if (start == 1'b0 && ^(main_sqrtfexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_218_reg"); $finish; end
	end
	/* main: %sqrtf.exit*/
	/*   %218 = fcmp ogt float %217, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_614)) begin
		main_sqrtfexit_218_reg <= main_sqrtfexit_218;
		if (start == 1'b0 && ^(main_sqrtfexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %219 = bitcast float %215 to i32*/
		main_sqrtfexit_219 = main_sqrtfexit_215;
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %219 = bitcast float %215 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_574)) begin
		main_sqrtfexit_219_reg <= main_sqrtfexit_219;
		if (start == 1'b0 && ^(main_sqrtfexit_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %220 = bitcast float %212 to i32*/
		main_sqrtfexit_220 = main_sqrtfexit_212;
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %220 = bitcast float %212 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_574)) begin
		main_sqrtfexit_220_reg <= main_sqrtfexit_220;
		if (start == 1'b0 && ^(main_sqrtfexit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %221 = bitcast float %.pre5.i.i to i32*/
		main_sqrtfexit_221 = main_3i_pre5ii_reg;
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %221 = bitcast float %.pre5.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		main_sqrtfexit_221_reg <= main_sqrtfexit_221;
		if (start == 1'b0 && ^(main_sqrtfexit_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sqrtf.exit*/
	/*   %222 = bitcast float %.pre.i.i to i32*/
		main_sqrtfexit_222 = main_3i_preii_reg;
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   %222 = bitcast float %.pre.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		main_sqrtfexit_222_reg <= main_sqrtfexit_222;
		if (start == 1'b0 && ^(main_sqrtfexit_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sqrtfexit_222_reg"); $finish; end
	end
end
always @(*) begin
	main_7i1i_223 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"8.i3.i"*/
	/*   %.sink1.i2.i = phi float [ %223, %"7.i1.i" ], [ %217, %sqrtf.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_sqrtfexit_614) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218 == 1'd1))) begin
		main_8i3i_sink1i2i = main_sqrtfexit_217_reg;
	end
	/* main: %"8.i3.i"*/
	/*   %.sink1.i2.i = phi float [ %223, %"7.i1.i" ], [ %217, %sqrtf.exit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__7i1i_629) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_8i3i_sink1i2i = main_7i1i_223;
	end
end
always @(posedge clk) begin
	/* main: %"8.i3.i"*/
	/*   %.sink1.i2.i = phi float [ %223, %"7.i1.i" ], [ %217, %sqrtf.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_sqrtfexit_614) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218 == 1'd1))) begin
		main_8i3i_sink1i2i_reg <= main_8i3i_sink1i2i;
		if (start == 1'b0 && ^(main_8i3i_sink1i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8i3i_sink1i2i_reg"); $finish; end
	end
	/* main: %"8.i3.i"*/
	/*   %.sink1.i2.i = phi float [ %223, %"7.i1.i" ], [ %217, %sqrtf.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__7i1i_629) & (memory_controller_waitrequest == 1'd0))) begin
		main_8i3i_sink1i2i_reg <= main_8i3i_sink1i2i;
		if (start == 1'b0 && ^(main_8i3i_sink1i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8i3i_sink1i2i_reg"); $finish; end
	end
end
always @(*) begin
	main_8i3i_224 = main_altfp_add_32_0;
end
always @(*) begin
	main_8i3i_225 = altfp_compare32_1_main_8i3i_225_out;
end
always @(*) begin
	main_11i5i_226 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"12.i7.i"*/
	/*   %.sink.i6.i = phi float [ %226, %"11.i5.i" ], [ %217, %"9.i4.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__9i4i_646) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218_reg == 1'd1))) begin
		main_12i7i_sinki6i = main_sqrtfexit_217_reg;
	end
	/* main: %"12.i7.i"*/
	/*   %.sink.i6.i = phi float [ %226, %"11.i5.i" ], [ %217, %"9.i4.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__11i5i_661) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_12i7i_sinki6i = main_11i5i_226;
	end
end
always @(posedge clk) begin
	/* main: %"12.i7.i"*/
	/*   %.sink.i6.i = phi float [ %226, %"11.i5.i" ], [ %217, %"9.i4.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__9i4i_646) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218_reg == 1'd1))) begin
		main_12i7i_sinki6i_reg <= main_12i7i_sinki6i;
		if (start == 1'b0 && ^(main_12i7i_sinki6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12i7i_sinki6i_reg"); $finish; end
	end
	/* main: %"12.i7.i"*/
	/*   %.sink.i6.i = phi float [ %226, %"11.i5.i" ], [ %217, %"9.i4.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__11i5i_661) & (memory_controller_waitrequest == 1'd0))) begin
		main_12i7i_sinki6i_reg <= main_12i7i_sinki6i;
		if (start == 1'b0 && ^(main_12i7i_sinki6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12i7i_sinki6i_reg"); $finish; end
	end
end
always @(*) begin
	main_12i7i_227 = main_altfp_add_32_0;
end
always @(*) begin
	main_15i9i_228 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %"16.i11.i"*/
	/*   %.sink3.i10.i = phi float [ %228, %"15.i9.i" ], [ %217, %"13.i8.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i8i_677) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218_reg == 1'd1))) begin
		main_16i11i_sink3i10i = main_sqrtfexit_217_reg;
	end
	/* main: %"16.i11.i"*/
	/*   %.sink3.i10.i = phi float [ %228, %"15.i9.i" ], [ %217, %"13.i8.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__15i9i_692) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_16i11i_sink3i10i = main_15i9i_228;
	end
end
always @(posedge clk) begin
	/* main: %"16.i11.i"*/
	/*   %.sink3.i10.i = phi float [ %228, %"15.i9.i" ], [ %217, %"13.i8.i" ]*/
	if ((((cur_state == LEGUP_F_main_BB__13i8i_677) & (memory_controller_waitrequest == 1'd0)) & (main_sqrtfexit_218_reg == 1'd1))) begin
		main_16i11i_sink3i10i_reg <= main_16i11i_sink3i10i;
		if (start == 1'b0 && ^(main_16i11i_sink3i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16i11i_sink3i10i_reg"); $finish; end
	end
	/* main: %"16.i11.i"*/
	/*   %.sink3.i10.i = phi float [ %228, %"15.i9.i" ], [ %217, %"13.i8.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__15i9i_692) & (memory_controller_waitrequest == 1'd0))) begin
		main_16i11i_sink3i10i_reg <= main_16i11i_sink3i10i;
		if (start == 1'b0 && ^(main_16i11i_sink3i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16i11i_sink3i10i_reg"); $finish; end
	end
end
always @(*) begin
	main_16i11i_229 = main_altfp_add_32_0;
end
always @(*) begin
	main_16i11i_230 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %converged.exit13.i*/
	/*   %231 = phi float [ %230, %"16.i11.i" ], [ %227, %"12.i7.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__12i7i_676) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexit13i_231 = main_12i7i_227;
	end
	/* main: %converged.exit13.i*/
	/*   %231 = phi float [ %230, %"16.i11.i" ], [ %227, %"12.i7.i" ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__16i11i_721) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_convergedexit13i_231 = main_16i11i_230;
	end
end
always @(posedge clk) begin
	/* main: %converged.exit13.i*/
	/*   %231 = phi float [ %230, %"16.i11.i" ], [ %227, %"12.i7.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__12i7i_676) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexit13i_231_reg <= main_convergedexit13i_231;
		if (start == 1'b0 && ^(main_convergedexit13i_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexit13i_231_reg"); $finish; end
	end
	/* main: %converged.exit13.i*/
	/*   %231 = phi float [ %230, %"16.i11.i" ], [ %227, %"12.i7.i" ]*/
	if (((cur_state == LEGUP_F_main_BB__16i11i_721) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexit13i_231_reg <= main_convergedexit13i_231;
		if (start == 1'b0 && ^(main_convergedexit13i_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexit13i_231_reg"); $finish; end
	end
end
always @(*) begin
	main_convergedexit13i_232 = main_altfp_extend_32_0;
end
always @(*) begin
	main_convergedexit13i_233 = altfp_compare64_1_main_convergedexit13i_233_out;
end
always @(*) begin
	/* main: %converged.exit13.i*/
	/*   %..i12.i = zext i1 %233 to i32*/
		main_convergedexit13i_i12i = main_convergedexit13i_233;
end
always @(*) begin
	/* main: %converged.exit13.i*/
	/*   %234 = icmp eq i32 %..i12.i, 0*/
		main_convergedexit13i_234 = (main_convergedexit13i_i12i == 32'd0);
end
always @(*) begin
	/* main: %fastica.exit.loopexit*/
	/*   %.lcssa2 = phi i32 [ %222, %converged.exit13.i ]*/
		main_fasticaexitloopexit_lcssa2 = main_sqrtfexit_222_reg;
end
always @(posedge clk) begin
	/* main: %fastica.exit.loopexit*/
	/*   %.lcssa2 = phi i32 [ %222, %converged.exit13.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd0))) begin
		main_fasticaexitloopexit_lcssa2_reg <= main_fasticaexitloopexit_lcssa2;
		if (start == 1'b0 && ^(main_fasticaexitloopexit_lcssa2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexitloopexit_lcssa2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fastica.exit.loopexit*/
	/*   %.lcssa1 = phi i32 [ %221, %converged.exit13.i ]*/
		main_fasticaexitloopexit_lcssa1 = main_sqrtfexit_221_reg;
end
always @(posedge clk) begin
	/* main: %fastica.exit.loopexit*/
	/*   %.lcssa1 = phi i32 [ %221, %converged.exit13.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexit13i_725) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexit13i_234 == 1'd0))) begin
		main_fasticaexitloopexit_lcssa1_reg <= main_fasticaexitloopexit_lcssa1;
		if (start == 1'b0 && ^(main_fasticaexitloopexit_lcssa1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexitloopexit_lcssa1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fastica.exit*/
	/*   %235 = phi i32 [ %12, %converged.exit.i ], [ %.lcssa2, %fastica.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexiti_24 == 1'd0))) begin
		main_fasticaexit_235 = main_entry_12_reg;
	end
	/* main: %fastica.exit*/
	/*   %235 = phi i32 [ %12, %converged.exit.i ], [ %.lcssa2, %fastica.exit.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_fasticaexitloopexit_726) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_fasticaexit_235 = main_fasticaexitloopexit_lcssa2_reg;
	end
end
always @(posedge clk) begin
	/* main: %fastica.exit*/
	/*   %235 = phi i32 [ %12, %converged.exit.i ], [ %.lcssa2, %fastica.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexiti_24 == 1'd0))) begin
		main_fasticaexit_235_reg <= main_fasticaexit_235;
		if (start == 1'b0 && ^(main_fasticaexit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexit_235_reg"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   %235 = phi i32 [ %12, %converged.exit.i ], [ %.lcssa2, %fastica.exit.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_fasticaexitloopexit_726) & (memory_controller_waitrequest == 1'd0))) begin
		main_fasticaexit_235_reg <= main_fasticaexit_235;
		if (start == 1'b0 && ^(main_fasticaexit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexit_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fastica.exit*/
	/*   %236 = phi i32 [ %11, %converged.exit.i ], [ %.lcssa1, %fastica.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexiti_24 == 1'd0))) begin
		main_fasticaexit_236 = main_entry_11_reg;
	end
	/* main: %fastica.exit*/
	/*   %236 = phi i32 [ %11, %converged.exit.i ], [ %.lcssa1, %fastica.exit.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_fasticaexitloopexit_726) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_fasticaexit_236 = main_fasticaexitloopexit_lcssa1_reg;
	end
end
always @(posedge clk) begin
	/* main: %fastica.exit*/
	/*   %236 = phi i32 [ %11, %converged.exit.i ], [ %.lcssa1, %fastica.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_convergedexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_convergedexiti_24 == 1'd0))) begin
		main_fasticaexit_236_reg <= main_fasticaexit_236;
		if (start == 1'b0 && ^(main_fasticaexit_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexit_236_reg"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   %236 = phi i32 [ %11, %converged.exit.i ], [ %.lcssa1, %fastica.exit.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_fasticaexitloopexit_726) & (memory_controller_waitrequest == 1'd0))) begin
		main_fasticaexit_236_reg <= main_fasticaexit_236;
		if (start == 1'b0 && ^(main_fasticaexit_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fasticaexit_236_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_432)) begin
		legup_omp_rotate_omp_fn0_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn0_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_433)) begin
		legup_omp_rotate_omp_fn0_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn0_start"); $finish; end
	end
end
always @(*) begin
	legup_omp_rotate_omp_fn0_finish_final = legup_omp_rotate_omp_fn0_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_rotateexiti_432))) begin
		legup_omp_rotate_omp_fn0_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn0_finish_reg"); $finish; end
	end
	if (legup_omp_rotate_omp_fn0_finish) begin
		legup_omp_rotate_omp_fn0_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn0_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		legup_function_call = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		legup_function_call = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		legup_function_call = 1'd1;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_434)) begin
		legup_omp_rotate_omp_fn1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_435)) begin
		legup_omp_rotate_omp_fn1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn1_start"); $finish; end
	end
end
always @(*) begin
	legup_omp_rotate_omp_fn1_finish_final = legup_omp_rotate_omp_fn1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_rotateexiti_434))) begin
		legup_omp_rotate_omp_fn1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn1_finish_reg"); $finish; end
	end
	if (legup_omp_rotate_omp_fn1_finish) begin
		legup_omp_rotate_omp_fn1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_436)) begin
		legup_omp_rotate_omp_fn2_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn2_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_437)) begin
		legup_omp_rotate_omp_fn2_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn2_start"); $finish; end
	end
end
always @(*) begin
	legup_omp_rotate_omp_fn2_finish_final = legup_omp_rotate_omp_fn2_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_rotateexiti_436))) begin
		legup_omp_rotate_omp_fn2_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn2_finish_reg"); $finish; end
	end
	if (legup_omp_rotate_omp_fn2_finish) begin
		legup_omp_rotate_omp_fn2_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_rotate_omp_fn2_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_570)) begin
		legup_omp_normalize_omp_fn3_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_normalize_omp_fn3_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_571)) begin
		legup_omp_normalize_omp_fn3_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_normalize_omp_fn3_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_570)) begin
		legup_omp_normalize_omp_fn3_arg_omp_data_i <= main_3ipreheader_25_reg;
		if (start == 1'b0 && ^(main_3ipreheader_25_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_normalize_omp_fn3_arg_omp_data_i"); $finish; end
	end
end
always @(*) begin
	legup_omp_normalize_omp_fn3_finish_final = legup_omp_normalize_omp_fn3_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_sqrtfexit_570))) begin
		legup_omp_normalize_omp_fn3_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_normalize_omp_fn3_finish_reg"); $finish; end
	end
	if (legup_omp_normalize_omp_fn3_finish) begin
		legup_omp_normalize_omp_fn3_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_omp_normalize_omp_fn3_finish_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_entry_3)) begin
		main_altfp_multiply_32_0_op0 = main_entry_0;
	end
	/* main: %entry*/
	/*   %6 = fmul float %4, %5*/
	else if ((cur_state == LEGUP_F_main_BB_entry_4)) begin
		main_altfp_multiply_32_0_op0 = main_entry_4;
	end
	/* main: %"3.i.i"*/
	/*   %41 = fmul float %.pre.i.i, %40*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_164)) begin
		main_altfp_multiply_32_0_op0 = main_3i_preii_reg;
	end
	/* main: %"3.i.i"*/
	/*   %44 = fmul float %.pre5.i.i, %43*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_165)) begin
		main_altfp_multiply_32_0_op0 = main_3i_pre5ii_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %74 = fmul float %50, %72*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_231)) begin
		main_altfp_multiply_32_0_op0 = main_10ii_50_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %76 = fmul float %49, %75*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_256)) begin
		main_altfp_multiply_32_0_op0 = main_10ii_49_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %110 = fmul float %108, %81*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_altfp_multiply_32_0_op0 = main_linear_sech2exitii_108_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %141 = fmul float %117, %139*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_378)) begin
		main_altfp_multiply_32_0_op0 = main_101ii_117_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %143 = fmul float %116, %142*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_403)) begin
		main_altfp_multiply_32_0_op0 = main_101ii_116_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %148 = fmul float %147, %147*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_440)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_147;
	end
	/* main: %rotate.exit.i*/
	/*   %151 = fmul float %150, %150*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_441)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_150_reg;
	end
	/* main: %156*/
	/*   %157 = fmul float %152, %152*/
	else if ((cur_state == LEGUP_F_main_BB__156_480)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_152_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %213 = fmul float %.pre.i.i, %212*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_574)) begin
		main_altfp_multiply_32_0_op0 = main_3i_preii_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %216 = fmul float %.pre5.i.i, %215*/
	else /* if ((cur_state == LEGUP_F_main_BB_sqrtfexit_575)) */ begin
		main_altfp_multiply_32_0_op0 = main_3i_pre5ii_reg;
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_entry_3)) begin
		main_altfp_multiply_32_0_op1 = main_entry_1;
	end
	/* main: %entry*/
	/*   %6 = fmul float %4, %5*/
	else if ((cur_state == LEGUP_F_main_BB_entry_4)) begin
		main_altfp_multiply_32_0_op1 = main_entry_5;
	end
	/* main: %"3.i.i"*/
	/*   %41 = fmul float %.pre.i.i, %40*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_164)) begin
		main_altfp_multiply_32_0_op1 = main_3ii_40;
	end
	/* main: %"3.i.i"*/
	/*   %44 = fmul float %.pre5.i.i, %43*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_165)) begin
		main_altfp_multiply_32_0_op1 = main_3ii_43_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %74 = fmul float %50, %72*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_231)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexitii_72_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %76 = fmul float %49, %75*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_256)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexitii_75;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %110 = fmul float %108, %81*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_altfp_multiply_32_0_op1 = main_15i15i_81_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %141 = fmul float %117, %139*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_378)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexit23ii_139_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %143 = fmul float %116, %142*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_403)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexit23ii_142;
	end
	/* main: %rotate.exit.i*/
	/*   %148 = fmul float %147, %147*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_440)) begin
		main_altfp_multiply_32_0_op1 = main_rotateexiti_147;
	end
	/* main: %rotate.exit.i*/
	/*   %151 = fmul float %150, %150*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_441)) begin
		main_altfp_multiply_32_0_op1 = main_rotateexiti_150_reg;
	end
	/* main: %156*/
	/*   %157 = fmul float %152, %152*/
	else if ((cur_state == LEGUP_F_main_BB__156_480)) begin
		main_altfp_multiply_32_0_op1 = main_rotateexiti_152_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %213 = fmul float %.pre.i.i, %212*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_574)) begin
		main_altfp_multiply_32_0_op1 = main_sqrtfexit_212;
	end
	/* main: %sqrtf.exit*/
	/*   %216 = fmul float %.pre5.i.i, %215*/
	else /* if ((cur_state == LEGUP_F_main_BB_sqrtfexit_575)) */ begin
		main_altfp_multiply_32_0_op1 = main_sqrtfexit_215_reg;
	end
end
always @(*) begin
	altfp_main_entry_2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_entry_2_out;
end
always @(*) begin
	/* main: %entry*/
	/*   %3 = fadd float %2, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_entry_14)) begin
		main_altfp_add_32_0_op0 = main_entry_2;
	end
	/* main: %entry*/
	/*   %7 = fadd float %3, %6*/
	else if ((cur_state == LEGUP_F_main_BB_entry_28)) begin
		main_altfp_add_32_0_op0 = main_entry_3;
	end
	/* main: %"8.i.i"*/
	/*   %14 = fadd float %.sink1.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__8ii_59)) begin
		main_altfp_add_32_0_op0 = main_8ii_sink1ii_reg;
	end
	/* main: %"12.i.i"*/
	/*   %17 = fadd float %.sink.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__12ii_91)) begin
		main_altfp_add_32_0_op0 = main_12ii_sinkii_reg;
	end
	/* main: %"16.i.i"*/
	/*   %19 = fadd float %.sink3.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__16ii_122)) begin
		main_altfp_add_32_0_op0 = main_16ii_sink3ii_reg;
	end
	/* main: %"3.i.i"*/
	/*   %42 = fadd float %41, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_175)) begin
		main_altfp_add_32_0_op0 = main_3ii_41;
	end
	/* main: %"3.i.i"*/
	/*   %45 = fadd float %42, %44*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_189)) begin
		main_altfp_add_32_0_op0 = main_3ii_42;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %75 = fadd float %74, %73*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_242)) begin
		main_altfp_add_32_0_op0 = main_linear_tanhexitii_74;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %77 = fadd float %47, %76*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_267)) begin
		main_altfp_add_32_0_op0 = main_10ii_47_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %111 = fadd float %110, %109*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_325)) begin
		main_altfp_add_32_0_op0 = main_linear_sech2exitii_110;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %112 = fadd float %79, %111*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_339)) begin
		main_altfp_add_32_0_op0 = main_15i15i_79_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %142 = fadd float %141, %140*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_389)) begin
		main_altfp_add_32_0_op0 = main_linear_tanhexit23ii_141;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %144 = fadd float %114, %143*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_414)) begin
		main_altfp_add_32_0_op0 = main_101ii_114_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %149 = fadd float %148, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_451)) begin
		main_altfp_add_32_0_op0 = main_rotateexiti_148;
	end
	/* main: %rotate.exit.i*/
	/*   %152 = fadd float %149, %151*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_465)) begin
		main_altfp_add_32_0_op0 = main_rotateexiti_149;
	end
	/* main: %156*/
	/*   %158 = fadd float %157, %152*/
	else if ((cur_state == LEGUP_F_main_BB__156_491)) begin
		main_altfp_add_32_0_op0 = main_156_157;
	end
	/* main: %sqrtf.exit*/
	/*   %214 = fadd float %213, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_585)) begin
		main_altfp_add_32_0_op0 = main_sqrtfexit_213;
	end
	/* main: %sqrtf.exit*/
	/*   %217 = fadd float %214, %216*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_599)) begin
		main_altfp_add_32_0_op0 = main_sqrtfexit_214;
	end
	/* main: %"8.i3.i"*/
	/*   %224 = fadd float %.sink1.i2.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__8i3i_630)) begin
		main_altfp_add_32_0_op0 = main_8i3i_sink1i2i_reg;
	end
	/* main: %"12.i7.i"*/
	/*   %227 = fadd float %.sink.i6.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__12i7i_662)) begin
		main_altfp_add_32_0_op0 = main_12i7i_sinki6i_reg;
	end
	/* main: %"16.i11.i"*/
	/*   %229 = fadd float %.sink3.i10.i, -1.000000e+00*/
	else /* if ((cur_state == LEGUP_F_main_BB__16i11i_693)) */ begin
		main_altfp_add_32_0_op0 = main_16i11i_sink3i10i_reg;
	end
end
always @(*) begin
	/* main: %entry*/
	/*   %3 = fadd float %2, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_entry_14)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %entry*/
	/*   %7 = fadd float %3, %6*/
	else if ((cur_state == LEGUP_F_main_BB_entry_28)) begin
		main_altfp_add_32_0_op1 = main_entry_6_reg;
	end
	/* main: %"8.i.i"*/
	/*   %14 = fadd float %.sink1.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__8ii_59)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %"12.i.i"*/
	/*   %17 = fadd float %.sink.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__12ii_91)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %"16.i.i"*/
	/*   %19 = fadd float %.sink3.i.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__16ii_122)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %"3.i.i"*/
	/*   %42 = fadd float %41, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_175)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %"3.i.i"*/
	/*   %45 = fadd float %42, %44*/
	else if ((cur_state == LEGUP_F_main_BB__3ii_189)) begin
		main_altfp_add_32_0_op1 = main_3ii_44_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %75 = fadd float %74, %73*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_242)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexitii_73_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %77 = fadd float %47, %76*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_267)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexitii_76;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %111 = fadd float %110, %109*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_325)) begin
		main_altfp_add_32_0_op1 = main_linear_sech2exitii_109_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %112 = fadd float %79, %111*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_339)) begin
		main_altfp_add_32_0_op1 = main_linear_sech2exitii_111;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %142 = fadd float %141, %140*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_389)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexit23ii_140_reg;
	end
	/* main: %linear_tanh.exit23.i.i*/
	/*   %144 = fadd float %114, %143*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit23ii_414)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexit23ii_143;
	end
	/* main: %rotate.exit.i*/
	/*   %149 = fadd float %148, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_451)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %rotate.exit.i*/
	/*   %152 = fadd float %149, %151*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_465)) begin
		main_altfp_add_32_0_op1 = main_rotateexiti_151_reg;
	end
	/* main: %156*/
	/*   %158 = fadd float %157, %152*/
	else if ((cur_state == LEGUP_F_main_BB__156_491)) begin
		main_altfp_add_32_0_op1 = main_rotateexiti_152_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %214 = fadd float %213, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_585)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %sqrtf.exit*/
	/*   %217 = fadd float %214, %216*/
	else if ((cur_state == LEGUP_F_main_BB_sqrtfexit_599)) begin
		main_altfp_add_32_0_op1 = main_sqrtfexit_216_reg;
	end
	/* main: %"8.i3.i"*/
	/*   %224 = fadd float %.sink1.i2.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__8i3i_630)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %"12.i7.i"*/
	/*   %227 = fadd float %.sink.i6.i, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__12i7i_662)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %"16.i11.i"*/
	/*   %229 = fadd float %.sink3.i10.i, -1.000000e+00*/
	else /* if ((cur_state == LEGUP_F_main_BB__16i11i_693)) */ begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
end
always @(*) begin
	altfp_main_entry_3_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_entry_3_out;
end
always @(*) begin
	/* main: %"7.i.i"*/
	/*   %13 = fsub float -0.000000e+00, %7*/
	if ((cur_state == LEGUP_F_main_BB__7ii_44)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"11.i.i"*/
	/*   %16 = fsub float -0.000000e+00, %7*/
	else if ((cur_state == LEGUP_F_main_BB__11ii_76)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"15.i.i"*/
	/*   %18 = fsub float -0.000000e+00, %7*/
	else if ((cur_state == LEGUP_F_main_BB__15ii_107)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"16.i.i"*/
	/*   %20 = fsub float -0.000000e+00, %19*/
	else if ((cur_state == LEGUP_F_main_BB__16ii_136)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %163*/
	/*   %164 = fsub float %152, %152*/
	else if ((cur_state == LEGUP_F_main_BB__163_508)) begin
		main_altfp_subtract_32_0_op0 = main_rotateexiti_152_reg;
	end
	/* main: %"7.i1.i"*/
	/*   %223 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__7i1i_615)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"11.i5.i"*/
	/*   %226 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__11i5i_647)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"15.i9.i"*/
	/*   %228 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__15i9i_678)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %"16.i11.i"*/
	/*   %230 = fsub float -0.000000e+00, %229*/
	else /* if ((cur_state == LEGUP_F_main_BB__16i11i_707)) */ begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
end
always @(*) begin
	/* main: %"7.i.i"*/
	/*   %13 = fsub float -0.000000e+00, %7*/
	if ((cur_state == LEGUP_F_main_BB__7ii_44)) begin
		main_altfp_subtract_32_0_op1 = main_entry_7_reg;
	end
	/* main: %"11.i.i"*/
	/*   %16 = fsub float -0.000000e+00, %7*/
	else if ((cur_state == LEGUP_F_main_BB__11ii_76)) begin
		main_altfp_subtract_32_0_op1 = main_entry_7_reg;
	end
	/* main: %"15.i.i"*/
	/*   %18 = fsub float -0.000000e+00, %7*/
	else if ((cur_state == LEGUP_F_main_BB__15ii_107)) begin
		main_altfp_subtract_32_0_op1 = main_entry_7_reg;
	end
	/* main: %"16.i.i"*/
	/*   %20 = fsub float -0.000000e+00, %19*/
	else if ((cur_state == LEGUP_F_main_BB__16ii_136)) begin
		main_altfp_subtract_32_0_op1 = main_16ii_19;
	end
	/* main: %163*/
	/*   %164 = fsub float %152, %152*/
	else if ((cur_state == LEGUP_F_main_BB__163_508)) begin
		main_altfp_subtract_32_0_op1 = main_rotateexiti_152_reg;
	end
	/* main: %"7.i1.i"*/
	/*   %223 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__7i1i_615)) begin
		main_altfp_subtract_32_0_op1 = main_sqrtfexit_217_reg;
	end
	/* main: %"11.i5.i"*/
	/*   %226 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__11i5i_647)) begin
		main_altfp_subtract_32_0_op1 = main_sqrtfexit_217_reg;
	end
	/* main: %"15.i9.i"*/
	/*   %228 = fsub float -0.000000e+00, %217*/
	else if ((cur_state == LEGUP_F_main_BB__15i9i_678)) begin
		main_altfp_subtract_32_0_op1 = main_sqrtfexit_217_reg;
	end
	/* main: %"16.i11.i"*/
	/*   %230 = fsub float -0.000000e+00, %229*/
	else /* if ((cur_state == LEGUP_F_main_BB__16i11i_707)) */ begin
		main_altfp_subtract_32_0_op1 = main_16i11i_229;
	end
end
always @(*) begin
	altfp_main_7ii_13_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_7ii_13_out;
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %22 = fpext float %21 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_151)) begin
		main_altfp_extend_32_0_op0 = main_convergedexiti_21_reg;
	end
	/* main: %"16.i11.i.i"*/
	/*   %92 = fpext float %81 to double*/
	else if ((cur_state == LEGUP_F_main_BB__16i11ii_296)) begin
		main_altfp_extend_32_0_op0 = main_15i15i_81_reg;
	end
	/* main: %converged.exit13.i*/
	/*   %232 = fpext float %231 to double*/
	else /* if ((cur_state == LEGUP_F_main_BB_convergedexit13i_722)) */ begin
		main_altfp_extend_32_0_op0 = main_convergedexit13i_231_reg;
	end
end
always @(*) begin
	altfp_main_convergedexiti_22_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_extend_32_0 = altfp_extend_main_convergedexiti_22_out;
end
always @(*) begin
	/* main: %163*/
	/*   %165 = fdiv float %164, %164*/
		main_altfp_divide_32_0_op0 = main_163_164;
end
always @(*) begin
	/* main: %163*/
	/*   %165 = fdiv float %164, %164*/
		main_altfp_divide_32_0_op1 = main_163_164;
end
always @(*) begin
	altfp_main_163_165_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_divide_32_0 = altfp_divider_main_163_165_out;
end
always @(*) begin
	altfp_main_entry_8_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_8ii_15_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_convergedexiti_23_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10ii_51_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4iii_52_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4iii_53_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7iii_54_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7iii_55_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10iii_56_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10iii_57_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13iii_58_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13iii_59_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16iii_60_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16iii_61_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19iii_62_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19iii_63_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22iii_64_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22iii_65_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25iii_66_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25iii_67_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28iii_68_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28iii_69_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31iii_70_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31iii_71_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_15i15i_82_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4i3ii_83_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4i3ii_84_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7i5ii_85_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7i5ii_86_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10i7ii_87_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10i7ii_88_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13i9ii_89_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13i9ii_90_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16i11ii_91_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16i11ii_93_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19i13ii_94_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19i13ii_95_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22i15ii_96_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22i15ii_97_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25i17ii_98_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25i17ii_99_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28i19ii_100_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28i19ii_101_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31i20ii_102_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31i20ii_103_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_34iii_104_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_34iii_105_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_37iii_106_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_37iii_107_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_101ii_118_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4i2ii_119_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_4i2ii_120_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7i4ii_121_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_7i4ii_122_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10i6ii_123_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_10i6ii_124_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13i8ii_125_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_13i8ii_126_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16i10ii_127_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_16i10ii_128_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19i12ii_129_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_19i12ii_130_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22i14ii_131_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_22i14ii_132_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25i16ii_133_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_25i16ii_134_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28i18ii_135_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_28i18ii_136_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31i22ii_137_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_31i22ii_138_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_sqrtfexit_218_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_8i3i_225_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_convergedexit13i_233_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   ret i32 undef*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_727)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_enable_a = legup_omp_rotate_omp_fn0_memory_controller_enable_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_enable_a = legup_omp_rotate_omp_fn1_memory_controller_enable_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_enable_a = legup_omp_rotate_omp_fn2_memory_controller_enable_a;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_enable_a = legup_omp_normalize_omp_fn3_memory_controller_enable_a;
	end
	/* main: %entry*/
	/*   %0 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %entry*/
	/*   %4 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %33 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"3.i"*/
	/*   store float %33, float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"3.i.i"*/
	/*   %40 = load float* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"3.i.i"*/
	/*   store float %45, float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"12.i14.i"*/
	/*   store float %.lcssa, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %"12.1.i.i"*/
	/*   store float %.lcssa63, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   %147 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sqrtf.exit*/
	/*   %212 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_address_a = legup_omp_rotate_omp_fn0_memory_controller_address_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_address_a = legup_omp_rotate_omp_fn1_memory_controller_address_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_address_a = legup_omp_rotate_omp_fn2_memory_controller_address_a;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_address_a = legup_omp_normalize_omp_fn3_memory_controller_address_a;
	end
	/* main: %entry*/
	/*   %0 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_w0_a;
	end
	/* main: %entry*/
	/*   %4 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_address_a = `TAG_g_w1_a;
	end
	/* main: %"3.i"*/
	/*   %33 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
	/* main: %"3.i"*/
	/*   store float %33, float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_address_a = `TAG_g_w0_a;
	end
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_address_a = `TAG_g_w0_a;
	end
	/* main: %"3.i.i"*/
	/*   %40 = load float* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_address_a = main_3ii_scevgep3;
	end
	/* main: %"3.i.i"*/
	/*   store float %45, float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		memory_controller_address_a = main_3ii_scevgep4_reg;
	end
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_address_a = main_10ii_scevgep7;
	end
	/* main: %"12.i14.i"*/
	/*   store float %.lcssa, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_address_a = `TAG_g_product_20_a;
	end
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_address_a = main_101ii_scevgep10;
	end
	/* main: %"12.1.i.i"*/
	/*   store float %.lcssa63, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_address_a = `TAG_g_product_21_a;
	end
	/* main: %rotate.exit.i*/
	/*   %147 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
	/* main: %sqrtf.exit*/
	/*   %212 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_address_a = `TAG_g_w_next0_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_write_enable_a = legup_omp_rotate_omp_fn0_memory_controller_write_enable_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_write_enable_a = legup_omp_rotate_omp_fn1_memory_controller_write_enable_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_write_enable_a = legup_omp_rotate_omp_fn2_memory_controller_write_enable_a;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_write_enable_a = legup_omp_normalize_omp_fn3_memory_controller_write_enable_a;
	end
	/* main: %entry*/
	/*   %0 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %entry*/
	/*   %4 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"3.i"*/
	/*   %33 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"3.i"*/
	/*   store float %33, float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"3.i.i"*/
	/*   %40 = load float* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"3.i.i"*/
	/*   store float %45, float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"12.i14.i"*/
	/*   store float %.lcssa, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %"12.1.i.i"*/
	/*   store float %.lcssa63, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   %147 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %sqrtf.exit*/
	/*   %212 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_in_a = legup_omp_rotate_omp_fn0_memory_controller_in_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_in_a = legup_omp_rotate_omp_fn1_memory_controller_in_a;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_in_a = legup_omp_rotate_omp_fn2_memory_controller_in_a;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_in_a = legup_omp_normalize_omp_fn3_memory_controller_in_a;
	end
	/* main: %"3.i"*/
	/*   store float %33, float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_in_a = main_3i_33;
	end
	/* main: %"3.i.i"*/
	/*   store float %45, float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		memory_controller_in_a = main_3ii_45;
	end
	/* main: %"12.i14.i"*/
	/*   store float %.lcssa, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_in_a = main_12i14i_lcssa_reg;
	end
	/* main: %"12.1.i.i"*/
	/*   store float %.lcssa63, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_in_a = main_121ii_lcssa63_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_size_a = legup_omp_rotate_omp_fn0_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_size_a = legup_omp_rotate_omp_fn1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_size_a = legup_omp_rotate_omp_fn2_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_size_a = legup_omp_normalize_omp_fn3_memory_controller_size_a;
	end
	/* main: %entry*/
	/*   %0 = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %entry*/
	/*   %4 = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"3.i"*/
	/*   %33 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"3.i"*/
	/*   store float %33, float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"3.i"*/
	/*   %.pre.i.i = load float* @w.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"3.i.i"*/
	/*   %40 = load float* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"3.i.i"*/
	/*   store float %45, float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_203)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"10.i.i"*/
	/*   %49 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"12.i14.i"*/
	/*   store float %.lcssa, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"10.1.i.i"*/
	/*   %116 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %"12.1.i.i"*/
	/*   store float %.lcssa63, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %rotate.exit.i*/
	/*   %147 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sqrtf.exit*/
	/*   %212 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_enable_b = legup_omp_rotate_omp_fn0_memory_controller_enable_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_enable_b = legup_omp_rotate_omp_fn1_memory_controller_enable_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_enable_b = legup_omp_rotate_omp_fn2_memory_controller_enable_b;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_enable_b = legup_omp_normalize_omp_fn3_memory_controller_enable_b;
	end
	/* main: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %entry*/
	/*   %5 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %36 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"3.i"*/
	/*   store float %36, float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"9.preheader.i.i"*/
	/*   store float 0.000000e+00, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9preheaderii_205)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"12.i14.i"*/
	/*   store float 0.000000e+00, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__15i15i_284)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %"12.1.i.i"*/
	/*   store float 0.000000e+00, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   store float %.lcssa64, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sqrtf.exit*/
	/*   store float %.0, float* %26, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_address_b = legup_omp_rotate_omp_fn0_memory_controller_address_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_address_b = legup_omp_rotate_omp_fn1_memory_controller_address_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_address_b = legup_omp_rotate_omp_fn2_memory_controller_address_b;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_address_b = legup_omp_normalize_omp_fn3_memory_controller_address_b;
	end
	/* main: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_address_b = `TAG_g_w_next0_a;
	end
	/* main: %entry*/
	/*   %5 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
	/* main: %"3.i"*/
	/*   %36 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
	/* main: %"3.i"*/
	/*   store float %36, float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_address_b = `TAG_g_w1_a;
	end
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_address_b = `TAG_g_w1_a;
	end
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_address_b = main_3ii_scevgep;
	end
	/* main: %"9.preheader.i.i"*/
	/*   store float 0.000000e+00, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9preheaderii_205)) begin
		memory_controller_address_b = `TAG_g_product_20_a;
	end
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_address_b = main_10ii_scevgep6;
	end
	/* main: %"12.i14.i"*/
	/*   store float 0.000000e+00, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_address_b = `TAG_g_product_21_a;
	end
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__15i15i_284)) begin
		memory_controller_address_b = main_15i15i_scevgep12;
	end
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_address_b = main_101ii_scevgep9;
	end
	/* main: %"12.1.i.i"*/
	/*   store float 0.000000e+00, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_address_b = `TAG_g_sum_1_a;
	end
	/* main: %rotate.exit.i*/
	/*   store float %.lcssa64, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		memory_controller_address_b = `TAG_g_sum_1_a;
	end
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
	/* main: %sqrtf.exit*/
	/*   store float %.0, float* %26, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		memory_controller_address_b = main_3ipreheader_26_reg;
	end
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_address_b = `TAG_g_w_next1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_write_enable_b = legup_omp_rotate_omp_fn0_memory_controller_write_enable_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_write_enable_b = legup_omp_rotate_omp_fn1_memory_controller_write_enable_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_write_enable_b = legup_omp_rotate_omp_fn2_memory_controller_write_enable_b;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_write_enable_b = legup_omp_normalize_omp_fn3_memory_controller_write_enable_b;
	end
	/* main: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %entry*/
	/*   %5 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"3.i"*/
	/*   %36 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"3.i"*/
	/*   store float %36, float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"9.preheader.i.i"*/
	/*   store float 0.000000e+00, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9preheaderii_205)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"12.i14.i"*/
	/*   store float 0.000000e+00, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__15i15i_284)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %"12.1.i.i"*/
	/*   store float 0.000000e+00, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   store float %.lcssa64, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sqrtf.exit*/
	/*   store float %.0, float* %26, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn0() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !6*/
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_in_b = legup_omp_rotate_omp_fn0_memory_controller_in_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn1() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !7*/
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_in_b = legup_omp_rotate_omp_fn1_memory_controller_in_b;
	end
	/* main: %rotate.exit.i*/
	/*   tail call fastcc void @legup_omp_rotate_omp_fn2() #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !8*/
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_in_b = legup_omp_rotate_omp_fn2_memory_controller_in_b;
	end
	/* main: %sqrtf.exit*/
	/*   call fastcc void @legup_omp_normalize_omp_fn3(i8* %25) #1, !TYPE !4, !NUMTHREADS !5, !OMPNAME !9*/
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_in_b = legup_omp_normalize_omp_fn3_memory_controller_in_b;
	end
	/* main: %"3.i"*/
	/*   store float %36, float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_in_b = main_3i_36;
	end
	/* main: %"9.preheader.i.i"*/
	/*   store float 0.000000e+00, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9preheaderii_205)) begin
		memory_controller_in_b = 32'h0;
	end
	/* main: %"12.i14.i"*/
	/*   store float 0.000000e+00, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_in_b = 32'h0;
	end
	/* main: %"12.1.i.i"*/
	/*   store float 0.000000e+00, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_in_b = 32'h0;
	end
	/* main: %rotate.exit.i*/
	/*   store float %.lcssa64, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		memory_controller_in_b = main_rotateexiti_lcssa64_reg;
	end
	/* main: %sqrtf.exit*/
	/*   store float %.0, float* %26, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		memory_controller_in_b = main_sqrtfexit_0_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_433)) begin
		memory_controller_size_b = legup_omp_rotate_omp_fn0_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_435)) begin
		memory_controller_size_b = legup_omp_rotate_omp_fn1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_437)) begin
		memory_controller_size_b = legup_omp_rotate_omp_fn2_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_571)) begin
		memory_controller_size_b = legup_omp_normalize_omp_fn3_memory_controller_size_b;
	end
	/* main: %entry*/
	/*   %1 = load float* @w_next.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %entry*/
	/*   %5 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_entry_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"3.i"*/
	/*   %36 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_156)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"3.i"*/
	/*   store float %36, float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_158)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"3.i"*/
	/*   %.pre5.i.i = load float* @w.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3i_159)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"3.i.i"*/
	/*   %43 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__3ii_162)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"9.preheader.i.i"*/
	/*   store float 0.000000e+00, float* @product_2.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9preheaderii_205)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"10.i.i"*/
	/*   %50 = load float* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__10ii_207)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"12.i14.i"*/
	/*   store float 0.000000e+00, float* @product_2.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__12i14i_282)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"15.i15.i"*/
	/*   %81 = load float* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__15i15i_284)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"10.1.i.i"*/
	/*   %117 = load float* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__101ii_354)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %"12.1.i.i"*/
	/*   store float 0.000000e+00, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__121ii_429)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %rotate.exit.i*/
	/*   store float %.lcssa64, float* @sum_1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %rotate.exit.i*/
	/*   %150 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_438)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sqrtf.exit*/
	/*   store float %.0, float* %26, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_569)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sqrtf.exit*/
	/*   %215 = load float* @w_next.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sqrtfexit_572)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   ret i32 undef*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_727)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (clken),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (clken),
	.rden_b (clken),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.data_a (data_a),
	.data_b (data_b)
);

defparam
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b,
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone V",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
	clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;

endmodule 
`timescale 1 ns / 1 ns
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (clken),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (clken),
	.rden_b (clken),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (),
	.byteena_b (),
	.wren_a (1'd0),
	.wren_b (1'd0),
	.data_a (),
	.data_b ()
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone V",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
	clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;

endmodule 
module round_robin_arbiter (
	rst_an,
	clk,
	req_in,
	grant_final,
	waitrequest
);

parameter N = 4;
input		rst_an;
input		clk;
input	[N-1:0]	req_in;
input waitrequest;
output	[N-1:0]	grant_final;

wire [N-1:0] req_final;
wire [N-1:0] req;
reg	[N-1:0]	req_reg;
reg	[N-1:0]	rotate_ptr;
wire	[N-1:0]	mask_req;
wire	[N-1:0]	mask_grant;
wire	[N-1:0]	grant_comb;
reg	[N-1:0]	grant;
wire		no_mask_req;
wire	[N-1:0] nomask_grant;
wire		update_ptr;
genvar i;

assign grant_final = grant_comb;
always @(posedge clk)
begin
	if (!waitrequest)
	req_reg[N-1:0] <= req_final[N-1:0];
end

assign req_final[N-1:0] = req_in[N-1:0] & ~req_reg[N-1:0];
assign req[N-1:0] = req_in[N-1:0];
// rotate pointer update logic
assign update_ptr = |grant[N-1:0];
always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)
	begin
		rotate_ptr[0] <= 1'b1;
		rotate_ptr[1] <= 1'b1;
	end
	else if (update_ptr)
	begin
		// note: N must be at least 2
		rotate_ptr[0] <= grant[N-1];
		rotate_ptr[1] <= grant[N-1] | grant[0];
	end
end

generate
for (i=2;i<N;i=i+1) begin : abc
always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)
		rotate_ptr[i] <= 1'b1;
	else if (update_ptr)
		rotate_ptr[i] <= grant[N-1] | (|grant[i-1:0]);
end
end
endgenerate

// mask grant generation logic
assign mask_req[N-1:0] = req[N-1:0] & rotate_ptr[N-1:0];

assign mask_grant[0] = mask_req[0];
generate
for (i=1;i<N;i=i+1) begin : abcd
	assign mask_grant[i] = (~|mask_req[i-1:0]) & mask_req[i];
end
endgenerate

// non-mask grant generation logic
assign nomask_grant[0] = req[0];
generate
for (i=1;i<N;i=i+1) begin : abcde
	assign nomask_grant[i] = (~|req[i-1:0]) & req[i];
end
endgenerate

// grant generation logic
assign no_mask_req = ~|mask_req[N-1:0];
assign grant_comb[N-1:0] = mask_grant[N-1:0] | (nomask_grant[N-1:0] & {N{no_mask_req}});

always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)	grant[N-1:0] <= {N{1'b0}};
	else if (!waitrequest) grant[N-1:0] <= grant_comb[N-1:0] & ~grant[N-1:0];

end

endmodule

// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
