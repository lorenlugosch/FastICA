--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV GX" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=13 LPM_WIDTHB=19 LPM_WIDTHP=32 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_mult 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_padd 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 303 
SUBDESIGN mult_ako
( 
	dataa[12..0]	:	input;
	datab[18..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE
	add11_result[31..0]	:	WIRE;
	add15_result[28..0]	:	WIRE;
	add19_result[25..0]	:	WIRE;
	add23_result[21..0]	:	WIRE;
	add27_result[15..0]	:	WIRE;
	add31_result[11..0]	:	WIRE;
	add35_result[13..0]	:	WIRE;
	cs2a[6..0] : carry_sum;
	cs4a[5..0] : carry_sum;
	le10a[19..0] : lcell;
	le3a[18..0] : lcell;
	le5a[19..0] : lcell;
	le6a[19..0] : lcell;
	le7a[19..0] : lcell;
	le8a[19..0] : lcell;
	le9a[19..0] : lcell;
	sft12a[31..0] : soft;
	sft13a[31..0] : soft;
	sft14a[31..0] : soft;
	sft16a[28..0] : soft;
	sft17a[28..0] : soft;
	sft18a[28..0] : soft;
	sft20a[25..0] : soft;
	sft21a[25..0] : soft;
	sft22a[25..0] : soft;
	sft24a[21..0] : soft;
	sft25a[21..0] : soft;
	sft26a[21..0] : soft;
	sft28a[15..0] : soft;
	sft29a[15..0] : soft;
	sft30a[15..0] : soft;
	sft32a[11..0] : soft;
	sft33a[11..0] : soft;
	sft34a[11..0] : soft;
	sft36a[13..0] : soft;
	sft37a[13..0] : soft;
	sft38a[13..0] : soft;
	dataa_node[18..0]	: WIRE;
	datab_node[12..0]	: WIRE;
	final_result_node[31..0]	: WIRE;
	w1093w[31..0]	: WIRE;
	w15w[13..0]	: WIRE;
	w20w[18..0]	: WIRE;
	w216w[19..0]	: WIRE;
	w280w[19..0]	: WIRE;
	w339w[19..0]	: WIRE;
	w408w[19..0]	: WIRE;
	w477w[19..0]	: WIRE;
	w546w[19..0]	: WIRE;
	w615w	: WIRE;
	w652w	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add19_result[] = sft20a[].out + sft21a[].out;
	add23_result[] = sft24a[].out + sft25a[].out;
	add27_result[] = sft28a[].out + sft29a[].out;
	add31_result[] = sft32a[].out + sft33a[].out;
	add35_result[] = sft36a[].out + sft37a[].out;
	cs2a[].cin = ( B"0", ((w15w[10..10] & cs2a[4].cout) # w15w[11..11]), ((w15w[8..8] & cs2a[3].cout) # w15w[9..9]), ((w15w[6..6] & cs2a[2].cout) # w15w[7..7]), ((w15w[4..4] & cs2a[1].cout) # w15w[5..5]), ((w15w[2..2] & cs2a[0].cout) # w15w[3..3]), w15w[1..1]);
	cs2a[].sin = ( cs2a[5].cout, ((((((! w15w[11..11]) & w15w[10..10]) & cs2a[4].cout) # ((w15w[11..11] & w15w[10..10]) & (! cs2a[4].cout))) # ((w15w[11..11] & (! w15w[10..10])) & cs2a[4].cout)) # ((w15w[11..11] & (! w15w[10..10])) & (! cs2a[4].cout))), ((((((! w15w[9..9]) & w15w[8..8]) & cs2a[3].cout) # ((w15w[9..9] & w15w[8..8]) & (! cs2a[3].cout))) # ((w15w[9..9] & (! w15w[8..8])) & cs2a[3].cout)) # ((w15w[9..9] & (! w15w[8..8])) & (! cs2a[3].cout))), ((((((! w15w[7..7]) & w15w[6..6]) & cs2a[2].cout) # ((w15w[7..7] & w15w[6..6]) & (! cs2a[2].cout))) # ((w15w[7..7] & (! w15w[6..6])) & cs2a[2].cout)) # ((w15w[7..7] & (! w15w[6..6])) & (! cs2a[2].cout))), ((((((! w15w[5..5]) & w15w[4..4]) & cs2a[1].cout) # ((w15w[5..5] & w15w[4..4]) & (! cs2a[1].cout))) # ((w15w[5..5] & (! w15w[4..4])) & cs2a[1].cout)) # ((w15w[5..5] & (! w15w[4..4])) & (! cs2a[1].cout))), ((((((! w15w[3..3]) & w15w[2..2]) & cs2a[0].cout) # ((w15w[3..3] & w15w[2..2]) & (! cs2a[0].cout))) # ((w15w[3..3] & (! w15w[2..2])) & cs2a[0].cout)) # ((w15w[3..3] & (! w15w[2..2])) & (! cs2a[0].cout))), w15w[1..1]);
	cs4a[].cin = ( ((w15w[10..10] & cs4a[4].cout) # w15w[11..11]), ((w15w[8..8] & cs4a[3].cout) # w15w[9..9]), ((w15w[6..6] & cs4a[2].cout) # w15w[7..7]), ((w15w[4..4] & cs4a[1].cout) # w15w[5..5]), ((w15w[2..2] & cs4a[0].cout) # w15w[3..3]), w15w[1..1]);
	cs4a[].sin = ( ((((((! w15w[11..11]) & (! w15w[10..10])) & cs4a[4].cout) # (((! w15w[11..11]) & w15w[10..10]) & (! cs4a[4].cout))) # ((w15w[11..11] & w15w[10..10]) & (! cs4a[4].cout))) # ((w15w[11..11] & (! w15w[10..10])) & cs4a[4].cout)), ((((((! w15w[9..9]) & (! w15w[8..8])) & cs4a[3].cout) # (((! w15w[9..9]) & w15w[8..8]) & (! cs4a[3].cout))) # ((w15w[9..9] & w15w[8..8]) & (! cs4a[3].cout))) # ((w15w[9..9] & (! w15w[8..8])) & cs4a[3].cout)), ((((((! w15w[7..7]) & (! w15w[6..6])) & cs4a[2].cout) # (((! w15w[7..7]) & w15w[6..6]) & (! cs4a[2].cout))) # ((w15w[7..7] & w15w[6..6]) & (! cs4a[2].cout))) # ((w15w[7..7] & (! w15w[6..6])) & cs4a[2].cout)), ((((((! w15w[5..5]) & (! w15w[4..4])) & cs4a[1].cout) # (((! w15w[5..5]) & w15w[4..4]) & (! cs4a[1].cout))) # ((w15w[5..5] & w15w[4..4]) & (! cs4a[1].cout))) # ((w15w[5..5] & (! w15w[4..4])) & cs4a[1].cout)), ((((((! w15w[3..3]) & (! w15w[2..2])) & cs4a[0].cout) # (((! w15w[3..3]) & w15w[2..2]) & (! cs4a[0].cout))) # ((w15w[3..3] & w15w[2..2]) & (! cs4a[0].cout))) # ((w15w[3..3] & (! w15w[2..2])) & cs4a[0].cout)), w15w[0..0]);
	le10a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[5].sout) & (! cs4a[5].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[5].sout) & cs4a[5].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[5].sout)) & cs4a[5].sout)))));
	le3a[].in = (((w15w[12..12] & cs2a[6].sout) # ((w15w[12..12] & (! cs2a[6].sout)) & (! dataa_node[]))) # (((! w15w[12..12]) & cs2a[6].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[2].sout) & (! cs4a[2].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[2].sout) & cs4a[2].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[2].sout)) & cs4a[2].sout)))));
	le8a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[3].sout) & (! cs4a[3].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[3].sout) & cs4a[3].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[3].sout)) & cs4a[3].sout)))));
	le9a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[4].sout) & (! cs4a[4].sout))) & (! ((((! ( dataa_node[18..18], dataa_node[])) & cs2a[4].sout) & cs4a[4].sout) # ((( dataa_node[18..18], dataa_node[]) & (! cs2a[4].sout)) & cs4a[4].sout)))));
	sft12a[].in = ( w615w, ( (! w20w[18..18]), ( sft18a[27..27].out, ( sft18a[26..26].out, ( sft18a[25..25].out, ( sft18a[24..24].out, ( sft18a[23..23].out, ( sft18a[22..22].out, ( sft18a[21..21].out, ( sft18a[20..20].out, ( sft18a[19..19].out, ( sft18a[18..18].out, ( sft18a[17..17].out, ( sft18a[16..16].out, ( sft18a[15..15].out, ( sft18a[14..14].out, ( sft18a[13..13].out, ( sft18a[12..12].out, ( sft18a[11..11].out, ( sft18a[10..10].out, ( sft18a[9..9].out, ( sft18a[8..8].out, ( sft18a[7..7].out, ( sft18a[6..6].out, ( sft18a[5..5].out, ( sft18a[4..4].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out)))))))))))))))))))))))))))))));
	sft13a[].in = ( w652w, ( sft18a[28..28].out, ( sft22a[25..25].out, ( sft22a[24..24].out, ( sft22a[23..23].out, ( sft22a[22..22].out, ( sft22a[21..21].out, ( sft22a[20..20].out, ( sft22a[19..19].out, ( sft22a[18..18].out, ( sft22a[17..17].out, ( sft22a[16..16].out, ( sft22a[15..15].out, ( sft22a[14..14].out, ( sft22a[13..13].out, ( sft22a[12..12].out, ( sft22a[11..11].out, ( sft22a[10..10].out, ( sft22a[9..9].out, ( sft22a[8..8].out, ( sft22a[7..7].out, ( sft22a[6..6].out, ( sft22a[5..5].out, ( sft22a[4..4].out, ( sft22a[3..3].out, ( sft22a[2..2].out, ( sft22a[1..1].out, ( sft22a[0..0].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( w652w, cs2a[0].sout)))))))))))))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w652w, ( le3a[17..17].out, ( le3a[16..16].out, ( le3a[15..15].out, ( le3a[14..14].out, ( le3a[13..13].out, ( le3a[12..12].out, ( le3a[11..11].out, ( le3a[10..10].out, ( sft26a[15..15].out, ( sft26a[14..14].out, ( sft26a[13..13].out, ( sft26a[12..12].out, ( sft26a[11..11].out, ( sft26a[10..10].out, ( sft26a[9..9].out, ( sft26a[8..8].out, ( sft26a[7..7].out, ( sft26a[6..6].out, ( le10a[1..1].out, ( sft26a[4..4].out, ( le9a[1..1].out, ( le9a[0..0].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[3..2].out))))))))))))))))))))))))))));
	sft17a[].in = ( w652w, ( (! w546w[19..19]), ( le10a[18..18].out, ( le10a[17..17].out, ( sft26a[20..20].out, ( sft26a[19..19].out, ( sft26a[18..18].out, ( sft26a[17..17].out, ( sft26a[16..16].out, ( sft38a[9..9].out, ( sft30a[12..12].out, ( sft30a[11..11].out, ( sft30a[10..10].out, ( sft30a[9..9].out, ( sft30a[8..8].out, ( sft30a[7..7].out, ( sft30a[6..6].out, ( sft30a[5..5].out, ( sft30a[4..4].out, ( sft26a[5..5].out, ( sft30a[2..2].out, ( sft26a[3..3].out, ( sft26a[2..2].out, ( sft26a[1..1].out, ( sft26a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w652w, cs2a[1].sout))))))))))))))))))))))))))));
	sft18a[].in = add15_result[];
	sft20a[].in = ( w652w, ( w615w, ( (! w477w[19..19]), ( le10a[16..16].out, ( le10a[15..15].out, ( le10a[14..14].out, ( sft38a[11..11].out, ( sft38a[10..10].out, ( sft30a[13..13].out, ( sft34a[10..10].out, ( sft34a[9..9].out, ( sft34a[8..8].out, ( sft34a[7..7].out, ( sft34a[6..6].out, ( sft34a[5..5].out, ( sft34a[4..4].out, ( sft34a[3..3].out, ( sft34a[2..2].out, ( sft30a[3..3].out, ( le10a[0..0].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le5a[5..5].out, cs2a[2].sout)))))))))))))))))))))))));
	sft21a[].in = ( w652w, ( w652w, ( sft26a[21..21].out, ( le9a[18..18].out, ( sft38a[13..13].out, ( sft38a[12..12].out, ( sft30a[15..15].out, ( sft30a[14..14].out, ( sft34a[11..11].out, ( sft38a[8..8].out, ( sft38a[7..7].out, ( sft38a[6..6].out, ( sft38a[5..5].out, ( sft38a[4..4].out, ( sft38a[3..3].out, ( sft38a[2..2].out, ( sft38a[1..1].out, ( sft38a[0..0].out, ( sft34a[1..1].out, ( sft34a[0..0].out, ( sft30a[1..1].out, ( sft30a[0..0].out, ( le6a[5..5].out, ( le6a[4..4].out, ( w652w, le5a[4..4].out)))))))))))))))))))))))));
	sft22a[].in = add19_result[];
	sft24a[].in = ( w652w, ( w615w, ( le9a[17..17].out, ( le9a[16..16].out, ( le10a[13..13].out, ( le10a[12..12].out, ( le3a[9..9].out, ( le3a[8..8].out, ( le3a[7..7].out, ( le3a[6..6].out, ( le3a[5..5].out, ( le3a[4..4].out, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le9a[3..3].out, ( le9a[2..2].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le5a[7..6].out)))))))))))))))))))));
	sft25a[].in = ( w652w, ( w652w, ( (! w408w[19..19]), ( le8a[18..18].out, ( le9a[15..15].out, ( le9a[14..14].out, ( le10a[11..11].out, ( le10a[10..10].out, ( le10a[9..9].out, ( le10a[8..8].out, ( le10a[7..7].out, ( le10a[6..6].out, ( le10a[5..5].out, ( le10a[4..4].out, ( le10a[3..3].out, ( le10a[2..2].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le6a[7..7].out, ( le6a[6..6].out, ( w652w, cs2a[3].sout)))))))))))))))))))));
	sft26a[].in = add23_result[];
	sft28a[].in = ( w652w, ( w615w, ( le7a[17..17].out, ( le9a[12..12].out, ( le9a[11..11].out, ( le9a[10..10].out, ( le9a[9..9].out, ( le9a[8..8].out, ( le9a[7..7].out, ( le9a[6..6].out, ( le9a[5..5].out, ( le9a[4..4].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le5a[9..9].out, cs2a[4].sout)))))))))))))));
	sft29a[].in = ( w652w, ( w652w, ( (! w280w[19..19]), ( le8a[14..14].out, ( le8a[13..13].out, ( le8a[12..12].out, ( le8a[11..11].out, ( le8a[10..10].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le6a[9..9].out, ( le6a[8..8].out, ( w652w, le5a[8..8].out)))))))))))))));
	sft30a[].in = add27_result[];
	sft32a[].in = ( w652w, ( le7a[16..16].out, ( le7a[15..15].out, ( le7a[14..14].out, ( le7a[13..13].out, ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le5a[11..11].out, cs2a[5].sout)))))))))));
	sft33a[].in = ( w652w, ( le6a[18..18].out, ( le6a[17..17].out, ( le6a[16..16].out, ( le6a[15..15].out, ( le6a[14..14].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le6a[11..11].out, ( w15w[12..12], ( w652w, le5a[10..10].out)))))))))));
	sft34a[].in = add31_result[];
	sft36a[].in = ( w652w, ( w615w, ( le8a[17..17].out, ( le8a[16..16].out, ( le9a[13..13].out, ( w615w, ( (! w216w[19..19]), ( le5a[18..18].out, ( le5a[17..17].out, ( le5a[16..16].out, ( le5a[15..15].out, ( le5a[14..14].out, ( le5a[13..13].out, le6a[10..10].out)))))))))))));
	sft37a[].in = ( w652w, ( w652w, ( (! w339w[19..19]), ( le7a[18..18].out, ( le8a[15..15].out, ( w652w, ( w615w, ( w652w, ( w652w, ( w652w, ( w652w, ( w652w, ( w652w, le5a[12..12].out)))))))))))));
	sft38a[].in = add35_result[];
	dataa_node[] = ( datab[18..0]);
	datab_node[] = ( dataa[12..0]);
	final_result_node[] = ( w1093w[31..0]);
	result[] = ( final_result_node[31..0]);
	w1093w[] = ( sft14a[31..31].out, sft14a[30..30].out, sft14a[29..29].out, sft14a[28..28].out, sft14a[27..27].out, sft14a[26..26].out, sft14a[25..25].out, sft14a[24..24].out, sft14a[23..23].out, sft14a[22..22].out, sft14a[21..21].out, sft14a[20..20].out, sft14a[19..19].out, sft14a[18..18].out, sft14a[17..17].out, sft14a[16..16].out, sft14a[15..15].out, sft14a[14..14].out, sft14a[13..13].out, sft14a[12..12].out, sft14a[11..11].out, sft14a[10..10].out, sft14a[9..9].out, sft14a[8..8].out, sft14a[7..7].out, sft14a[6..6].out, sft14a[5..5].out, sft14a[4..4].out, sft14a[3..3].out, sft14a[2..2].out, sft14a[1..1].out, sft14a[0..0].out);
	w15w[] = ( datab_node[12..12], datab_node[]);
	w20w[] = le3a[].out;
	w216w[] = le5a[].out;
	w280w[] = le6a[].out;
	w339w[] = le7a[].out;
	w408w[] = le8a[].out;
	w477w[] = le9a[].out;
	w546w[] = le10a[].out;
	w615w = B"1";
	w652w = B"0";
END;
--VALID FILE
