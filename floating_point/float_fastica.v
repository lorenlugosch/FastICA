//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Dec  5 16:33:38 2015
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 2
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @product_1 = internal unnamed_addr global [64 x float] zeroinitializer, align 4
`define TAG_g_product_1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_product_1_a {`TAG_g_product_1, 23'd0}
// @whitened_signals = internal unnamed_addr constant [2 x [64 x float]] [[64 x float] [float 0x3FA8B82720000000, float 0x3FF1F120E0000000, float 0x3FF323AA60000000, float 0x3FC8538EC0000000, float 0xBFE...
`define TAG_g_whitened_signals `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_whitened_signals_a {`TAG_g_whitened_signals, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] whitened_signals_address_a;
reg [6:0] whitened_signals_address_b;
reg whitened_signals_write_enable_a;
reg whitened_signals_write_enable_b;
reg [31:0] whitened_signals_in_a;
reg [31:0] whitened_signals_in_b;
wire [31:0] whitened_signals_out_a;
wire [31:0] whitened_signals_out_b;

// @whitened_signals = internal unnamed_addr constant [2 x [64 x float]] [[64 x float] [float 0x3FA8B82720000000, float 0x3FF1F120E0000000, float 0x3FF323AA60000000, float 0x3FC8538EC0000000, float 0xBFE...
rom_dual_port whitened_signals (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( whitened_signals_address_a ),
	.address_b( whitened_signals_address_b ),
	.q_a( whitened_signals_out_a ),
	.q_b( whitened_signals_out_b)
);
defparam whitened_signals.width_a = 32;
defparam whitened_signals.width_b = 32;
defparam whitened_signals.widthad_a = 7;
defparam whitened_signals.widthad_b = 7;
defparam whitened_signals.numwords_a = 128;
defparam whitened_signals.numwords_b = 128;
defparam whitened_signals.latency = ram_latency;
defparam whitened_signals.init_file = "whitened_signals.mif";

reg [5:0] product_1_address_a;
reg [5:0] product_1_address_b;
reg product_1_write_enable_a;
reg product_1_write_enable_b;
reg [31:0] product_1_in_a;
reg [31:0] product_1_in_b;
wire [31:0] product_1_out_a;
wire [31:0] product_1_out_b;

// @product_1 = internal unnamed_addr global [64 x float] zeroinitializer, align 4
ram_dual_port product_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( product_1_address_a ),
	.address_b( product_1_address_b ),
	.wren_a( product_1_write_enable_a ),
	.wren_b( product_1_write_enable_b ),
	.data_a( product_1_in_a ),
	.data_b( product_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( product_1_out_a ),
	.q_b( product_1_out_b)
);
defparam product_1.width_a = 32;
defparam product_1.width_b = 32;
defparam product_1.widthad_a = 6;
defparam product_1.widthad_b = 6;
defparam product_1.width_be_a = 1;
defparam product_1.width_be_b = 1;
defparam product_1.numwords_a = 64;
defparam product_1.numwords_b = 64;
defparam product_1.latency = ram_latency;
defparam product_1.init_file = "product_1.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_whitened_signals_a;
assign select_whitened_signals_a = (tag_a == `TAG_g_whitened_signals);
reg [ram_latency:0] select_whitened_signals_reg_a;
wire [31:0] memory_controller_whitened_signals_out_a;
assign memory_controller_whitened_signals_out_a = {32{ select_whitened_signals_reg_a[ram_latency]}} & whitened_signals_out_a;

wire select_product_1_a;
assign select_product_1_a = (tag_a == `TAG_g_product_1);
reg [ram_latency:0] select_product_1_reg_a;
wire [31:0] memory_controller_product_1_out_a;
assign memory_controller_product_1_out_a = {32{ select_product_1_reg_a[ram_latency]}} & product_1_out_a;

always @(*)
begin
	whitened_signals_address_a = memory_controller_address_a [7-1+2:2] & {7{select_whitened_signals_a}};
	whitened_signals_write_enable_a = memory_controller_write_enable_a & select_whitened_signals_a;
	whitened_signals_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	product_1_address_a = memory_controller_address_a [6-1+2:2] & {6{select_product_1_a}};
	product_1_write_enable_a = memory_controller_write_enable_a & select_product_1_a;
	product_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_whitened_signals_reg_a[ram_latency]}} | {2{select_product_1_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_whitened_signals_out_a | memory_controller_product_1_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_whitened_signals_reg_a[j+1] <= select_whitened_signals_reg_a[j];
select_product_1_reg_a[j+1] <= select_product_1_reg_a[j];
end
always @(*)
begin
select_whitened_signals_reg_a[0] <= select_whitened_signals_a;
select_product_1_reg_a[0] <= select_product_1_a;
end

reg [2:0] select_not_struct_b;

wire select_whitened_signals_b;
assign select_whitened_signals_b = (tag_b == `TAG_g_whitened_signals);
reg [ram_latency:0] select_whitened_signals_reg_b;
wire [31:0] memory_controller_whitened_signals_out_b;
assign memory_controller_whitened_signals_out_b = {32{ select_whitened_signals_reg_b[ram_latency]}} & whitened_signals_out_b;

wire select_product_1_b;
assign select_product_1_b = (tag_b == `TAG_g_product_1);
reg [ram_latency:0] select_product_1_reg_b;
wire [31:0] memory_controller_product_1_out_b;
assign memory_controller_product_1_out_b = {32{ select_product_1_reg_b[ram_latency]}} & product_1_out_b;

always @(*)
begin
	whitened_signals_address_b = memory_controller_address_b [7-1+2:2] & {7{select_whitened_signals_b}};
	whitened_signals_write_enable_b = memory_controller_write_enable_b & select_whitened_signals_b;
	whitened_signals_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	product_1_address_b = memory_controller_address_b [6-1+2:2] & {6{select_product_1_b}};
	product_1_write_enable_b = memory_controller_write_enable_b & select_product_1_b;
	product_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_whitened_signals_reg_b[ram_latency]}} | {2{select_product_1_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_whitened_signals_out_b | memory_controller_product_1_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_whitened_signals_reg_b[j+1] <= select_whitened_signals_reg_b[j];
select_product_1_reg_b[j+1] <= select_product_1_reg_b[j];
end
always @(*)
begin
select_whitened_signals_reg_b[0] <= select_whitened_signals_b;
select_product_1_reg_b[0] <= select_product_1_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [9:0] LEGUP_0 = 10'd0;
parameter [9:0] LEGUP_F_main_BB__1_1 = 10'd1;
parameter [9:0] LEGUP_F_main_BB__1_2 = 10'd2;
parameter [9:0] LEGUP_F_main_BB__1_3 = 10'd3;
parameter [9:0] LEGUP_F_main_BB__1_4 = 10'd4;
parameter [9:0] LEGUP_F_main_BB__1_5 = 10'd5;
parameter [9:0] LEGUP_F_main_BB__1_6 = 10'd6;
parameter [9:0] LEGUP_F_main_BB__1_7 = 10'd7;
parameter [9:0] LEGUP_F_main_BB__1_8 = 10'd8;
parameter [9:0] LEGUP_F_main_BB__1_9 = 10'd9;
parameter [9:0] LEGUP_F_main_BB__1_10 = 10'd10;
parameter [9:0] LEGUP_F_main_BB__1_11 = 10'd11;
parameter [9:0] LEGUP_F_main_BB__1_12 = 10'd12;
parameter [9:0] LEGUP_F_main_BB__1_13 = 10'd13;
parameter [9:0] LEGUP_F_main_BB__1_14 = 10'd14;
parameter [9:0] LEGUP_F_main_BB__1_15 = 10'd15;
parameter [9:0] LEGUP_F_main_BB__1_16 = 10'd16;
parameter [9:0] LEGUP_F_main_BB__1_17 = 10'd17;
parameter [9:0] LEGUP_F_main_BB__1_18 = 10'd18;
parameter [9:0] LEGUP_F_main_BB__1_19 = 10'd19;
parameter [9:0] LEGUP_F_main_BB__1_20 = 10'd20;
parameter [9:0] LEGUP_F_main_BB__1_21 = 10'd21;
parameter [9:0] LEGUP_F_main_BB__1_22 = 10'd22;
parameter [9:0] LEGUP_F_main_BB__1_23 = 10'd23;
parameter [9:0] LEGUP_F_main_BB__1_24 = 10'd24;
parameter [9:0] LEGUP_F_main_BB__1_25 = 10'd25;
parameter [9:0] LEGUP_F_main_BB__1_26 = 10'd26;
parameter [9:0] LEGUP_F_main_BB__1_27 = 10'd27;
parameter [9:0] LEGUP_F_main_BB__1_28 = 10'd28;
parameter [9:0] LEGUP_F_main_BB__1_29 = 10'd29;
parameter [9:0] LEGUP_F_main_BB__1_30 = 10'd30;
parameter [9:0] LEGUP_F_main_BB__1_31 = 10'd31;
parameter [9:0] LEGUP_F_main_BB__1_32 = 10'd32;
parameter [9:0] LEGUP_F_main_BB__1_33 = 10'd33;
parameter [9:0] LEGUP_F_main_BB__1_34 = 10'd34;
parameter [9:0] LEGUP_F_main_BB__1_35 = 10'd35;
parameter [9:0] LEGUP_F_main_BB__1_36 = 10'd36;
parameter [9:0] LEGUP_F_main_BB__1_37 = 10'd37;
parameter [9:0] LEGUP_F_main_BB__1_38 = 10'd38;
parameter [9:0] LEGUP_F_main_BB__1_39 = 10'd39;
parameter [9:0] LEGUP_F_main_BB__1_40 = 10'd40;
parameter [9:0] LEGUP_F_main_BB__1_41 = 10'd41;
parameter [9:0] LEGUP_F_main_BB__13_42 = 10'd42;
parameter [9:0] LEGUP_F_main_BB__13_43 = 10'd43;
parameter [9:0] LEGUP_F_main_BB__13_44 = 10'd44;
parameter [9:0] LEGUP_F_main_BB__13_45 = 10'd45;
parameter [9:0] LEGUP_F_main_BB__13_46 = 10'd46;
parameter [9:0] LEGUP_F_main_BB__13_47 = 10'd47;
parameter [9:0] LEGUP_F_main_BB__13_48 = 10'd48;
parameter [9:0] LEGUP_F_main_BB__13_49 = 10'd49;
parameter [9:0] LEGUP_F_main_BB__13_50 = 10'd50;
parameter [9:0] LEGUP_F_main_BB__13_51 = 10'd51;
parameter [9:0] LEGUP_F_main_BB__13_52 = 10'd52;
parameter [9:0] LEGUP_F_main_BB__13_53 = 10'd53;
parameter [9:0] LEGUP_F_main_BB__13_54 = 10'd54;
parameter [9:0] LEGUP_F_main_BB__13_55 = 10'd55;
parameter [9:0] LEGUP_F_main_BB__13_56 = 10'd56;
parameter [9:0] LEGUP_F_main_BB__15_57 = 10'd57;
parameter [9:0] LEGUP_F_main_BB__15_58 = 10'd58;
parameter [9:0] LEGUP_F_main_BB__15_59 = 10'd59;
parameter [9:0] LEGUP_F_main_BB__15_60 = 10'd60;
parameter [9:0] LEGUP_F_main_BB__15_61 = 10'd61;
parameter [9:0] LEGUP_F_main_BB__15_62 = 10'd62;
parameter [9:0] LEGUP_F_main_BB__15_63 = 10'd63;
parameter [9:0] LEGUP_F_main_BB__15_64 = 10'd64;
parameter [9:0] LEGUP_F_main_BB__15_65 = 10'd65;
parameter [9:0] LEGUP_F_main_BB__15_66 = 10'd66;
parameter [9:0] LEGUP_F_main_BB__15_67 = 10'd67;
parameter [9:0] LEGUP_F_main_BB__15_68 = 10'd68;
parameter [9:0] LEGUP_F_main_BB__15_69 = 10'd69;
parameter [9:0] LEGUP_F_main_BB__15_70 = 10'd70;
parameter [9:0] LEGUP_F_main_BB__15_71 = 10'd71;
parameter [9:0] LEGUP_F_main_BB__15_72 = 10'd72;
parameter [9:0] LEGUP_F_main_BB__19_73 = 10'd73;
parameter [9:0] LEGUP_F_main_BB__20_74 = 10'd74;
parameter [9:0] LEGUP_F_main_BB__20_75 = 10'd75;
parameter [9:0] LEGUP_F_main_BB__20_76 = 10'd76;
parameter [9:0] LEGUP_F_main_BB__20_77 = 10'd77;
parameter [9:0] LEGUP_F_main_BB__20_78 = 10'd78;
parameter [9:0] LEGUP_F_main_BB__20_79 = 10'd79;
parameter [9:0] LEGUP_F_main_BB__20_80 = 10'd80;
parameter [9:0] LEGUP_F_main_BB__20_81 = 10'd81;
parameter [9:0] LEGUP_F_main_BB__20_82 = 10'd82;
parameter [9:0] LEGUP_F_main_BB__20_83 = 10'd83;
parameter [9:0] LEGUP_F_main_BB__20_84 = 10'd84;
parameter [9:0] LEGUP_F_main_BB__20_85 = 10'd85;
parameter [9:0] LEGUP_F_main_BB__20_86 = 10'd86;
parameter [9:0] LEGUP_F_main_BB__20_87 = 10'd87;
parameter [9:0] LEGUP_F_main_BB__20_88 = 10'd88;
parameter [9:0] LEGUP_F_main_BB__22_89 = 10'd89;
parameter [9:0] LEGUP_F_main_BB__22_90 = 10'd90;
parameter [9:0] LEGUP_F_main_BB__22_91 = 10'd91;
parameter [9:0] LEGUP_F_main_BB__22_92 = 10'd92;
parameter [9:0] LEGUP_F_main_BB__22_93 = 10'd93;
parameter [9:0] LEGUP_F_main_BB__22_94 = 10'd94;
parameter [9:0] LEGUP_F_main_BB__22_95 = 10'd95;
parameter [9:0] LEGUP_F_main_BB__22_96 = 10'd96;
parameter [9:0] LEGUP_F_main_BB__22_97 = 10'd97;
parameter [9:0] LEGUP_F_main_BB__22_98 = 10'd98;
parameter [9:0] LEGUP_F_main_BB__22_99 = 10'd99;
parameter [9:0] LEGUP_F_main_BB__22_100 = 10'd100;
parameter [9:0] LEGUP_F_main_BB__22_101 = 10'd101;
parameter [9:0] LEGUP_F_main_BB__22_102 = 10'd102;
parameter [9:0] LEGUP_F_main_BB__22_103 = 10'd103;
parameter [9:0] LEGUP_F_main_BB__25_104 = 10'd104;
parameter [9:0] LEGUP_F_main_BB__26_105 = 10'd105;
parameter [9:0] LEGUP_F_main_BB__26_106 = 10'd106;
parameter [9:0] LEGUP_F_main_BB__26_107 = 10'd107;
parameter [9:0] LEGUP_F_main_BB__26_108 = 10'd108;
parameter [9:0] LEGUP_F_main_BB__26_109 = 10'd109;
parameter [9:0] LEGUP_F_main_BB__26_110 = 10'd110;
parameter [9:0] LEGUP_F_main_BB__26_111 = 10'd111;
parameter [9:0] LEGUP_F_main_BB__26_112 = 10'd112;
parameter [9:0] LEGUP_F_main_BB__26_113 = 10'd113;
parameter [9:0] LEGUP_F_main_BB__26_114 = 10'd114;
parameter [9:0] LEGUP_F_main_BB__26_115 = 10'd115;
parameter [9:0] LEGUP_F_main_BB__26_116 = 10'd116;
parameter [9:0] LEGUP_F_main_BB__26_117 = 10'd117;
parameter [9:0] LEGUP_F_main_BB__26_118 = 10'd118;
parameter [9:0] LEGUP_F_main_BB__26_119 = 10'd119;
parameter [9:0] LEGUP_F_main_BB__28_120 = 10'd120;
parameter [9:0] LEGUP_F_main_BB__28_121 = 10'd121;
parameter [9:0] LEGUP_F_main_BB__28_122 = 10'd122;
parameter [9:0] LEGUP_F_main_BB__28_123 = 10'd123;
parameter [9:0] LEGUP_F_main_BB__28_124 = 10'd124;
parameter [9:0] LEGUP_F_main_BB__28_125 = 10'd125;
parameter [9:0] LEGUP_F_main_BB__28_126 = 10'd126;
parameter [9:0] LEGUP_F_main_BB__28_127 = 10'd127;
parameter [9:0] LEGUP_F_main_BB__28_128 = 10'd128;
parameter [9:0] LEGUP_F_main_BB__28_129 = 10'd129;
parameter [9:0] LEGUP_F_main_BB__28_130 = 10'd130;
parameter [9:0] LEGUP_F_main_BB__28_131 = 10'd131;
parameter [9:0] LEGUP_F_main_BB__28_132 = 10'd132;
parameter [9:0] LEGUP_F_main_BB__28_133 = 10'd133;
parameter [9:0] LEGUP_F_main_BB__28_134 = 10'd134;
parameter [9:0] LEGUP_F_main_BB__28_135 = 10'd135;
parameter [9:0] LEGUP_F_main_BB__28_136 = 10'd136;
parameter [9:0] LEGUP_F_main_BB__28_137 = 10'd137;
parameter [9:0] LEGUP_F_main_BB__28_138 = 10'd138;
parameter [9:0] LEGUP_F_main_BB__28_139 = 10'd139;
parameter [9:0] LEGUP_F_main_BB__28_140 = 10'd140;
parameter [9:0] LEGUP_F_main_BB__28_141 = 10'd141;
parameter [9:0] LEGUP_F_main_BB__28_142 = 10'd142;
parameter [9:0] LEGUP_F_main_BB__28_143 = 10'd143;
parameter [9:0] LEGUP_F_main_BB__28_144 = 10'd144;
parameter [9:0] LEGUP_F_main_BB__28_145 = 10'd145;
parameter [9:0] LEGUP_F_main_BB__28_146 = 10'd146;
parameter [9:0] LEGUP_F_main_BB__28_147 = 10'd147;
parameter [9:0] LEGUP_F_main_BB__28_148 = 10'd148;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_149 = 10'd149;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_150 = 10'd150;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_151 = 10'd151;
parameter [9:0] LEGUP_F_main_BB_convergedexiti_152 = 10'd152;
parameter [9:0] LEGUP_F_main_BB_preheader2preheader_153 = 10'd153;
parameter [9:0] LEGUP_F_main_BB_preheader2_154 = 10'd154;
parameter [9:0] LEGUP_F_main_BB_preheader2_155 = 10'd155;
parameter [9:0] LEGUP_F_main_BB_preheader2_156 = 10'd156;
parameter [9:0] LEGUP_F_main_BB_preheader2_157 = 10'd157;
parameter [9:0] LEGUP_F_main_BB_preheader2_158 = 10'd158;
parameter [9:0] LEGUP_F_main_BB_preheader2_159 = 10'd159;
parameter [9:0] LEGUP_F_main_BB_preheader2_160 = 10'd160;
parameter [9:0] LEGUP_F_main_BB_preheader2_161 = 10'd161;
parameter [9:0] LEGUP_F_main_BB_preheader2_162 = 10'd162;
parameter [9:0] LEGUP_F_main_BB_preheader2_163 = 10'd163;
parameter [9:0] LEGUP_F_main_BB_preheader2_164 = 10'd164;
parameter [9:0] LEGUP_F_main_BB_preheader2_165 = 10'd165;
parameter [9:0] LEGUP_F_main_BB_preheader2_166 = 10'd166;
parameter [9:0] LEGUP_F_main_BB_preheader2_167 = 10'd167;
parameter [9:0] LEGUP_F_main_BB_preheader2_168 = 10'd168;
parameter [9:0] LEGUP_F_main_BB_preheader2_169 = 10'd169;
parameter [9:0] LEGUP_F_main_BB_preheader2_170 = 10'd170;
parameter [9:0] LEGUP_F_main_BB_preheader2_171 = 10'd171;
parameter [9:0] LEGUP_F_main_BB_preheader2_172 = 10'd172;
parameter [9:0] LEGUP_F_main_BB_preheader2_173 = 10'd173;
parameter [9:0] LEGUP_F_main_BB_preheader2_174 = 10'd174;
parameter [9:0] LEGUP_F_main_BB_preheader2_175 = 10'd175;
parameter [9:0] LEGUP_F_main_BB_preheader2_176 = 10'd176;
parameter [9:0] LEGUP_F_main_BB_preheader2_177 = 10'd177;
parameter [9:0] LEGUP_F_main_BB_preheader2_178 = 10'd178;
parameter [9:0] LEGUP_F_main_BB_preheader2_179 = 10'd179;
parameter [9:0] LEGUP_F_main_BB_preheader2_180 = 10'd180;
parameter [9:0] LEGUP_F_main_BB_preheader2_181 = 10'd181;
parameter [9:0] LEGUP_F_main_BB_preheader2_182 = 10'd182;
parameter [9:0] LEGUP_F_main_BB_preheader2_183 = 10'd183;
parameter [9:0] LEGUP_F_main_BB_preheader2_184 = 10'd184;
parameter [9:0] LEGUP_F_main_BB_preheader2_185 = 10'd185;
parameter [9:0] LEGUP_F_main_BB_preheader2_186 = 10'd186;
parameter [9:0] LEGUP_F_main_BB_preheader2_187 = 10'd187;
parameter [9:0] LEGUP_F_main_BB_preheader2_188 = 10'd188;
parameter [9:0] LEGUP_F_main_BB_preheader2_189 = 10'd189;
parameter [9:0] LEGUP_F_main_BB_preheader2_190 = 10'd190;
parameter [9:0] LEGUP_F_main_BB_preheader2_191 = 10'd191;
parameter [9:0] LEGUP_F_main_BB_preheader2_192 = 10'd192;
parameter [9:0] LEGUP_F_main_BB_preheader2_193 = 10'd193;
parameter [9:0] LEGUP_F_main_BB_preheader2_194 = 10'd194;
parameter [9:0] LEGUP_F_main_BB_preheader2_195 = 10'd195;
parameter [9:0] LEGUP_F_main_BB_preheader2_196 = 10'd196;
parameter [9:0] LEGUP_F_main_BB_preheader15iipreheader_197 = 10'd197;
parameter [9:0] LEGUP_F_main_BB_preheader15ii_198 = 10'd198;
parameter [9:0] LEGUP_F_main_BB_preheader15ii_199 = 10'd199;
parameter [9:0] LEGUP_F_main_BB_preheader15ii_200 = 10'd200;
parameter [9:0] LEGUP_F_main_BB_preheader15ii_201 = 10'd201;
parameter [9:0] LEGUP_F_main_BB__46_202 = 10'd202;
parameter [9:0] LEGUP_F_main_BB__46_203 = 10'd203;
parameter [9:0] LEGUP_F_main_BB__49_204 = 10'd204;
parameter [9:0] LEGUP_F_main_BB__49_205 = 10'd205;
parameter [9:0] LEGUP_F_main_BB__52_206 = 10'd206;
parameter [9:0] LEGUP_F_main_BB__52_207 = 10'd207;
parameter [9:0] LEGUP_F_main_BB__55_208 = 10'd208;
parameter [9:0] LEGUP_F_main_BB__55_209 = 10'd209;
parameter [9:0] LEGUP_F_main_BB__58_210 = 10'd210;
parameter [9:0] LEGUP_F_main_BB__58_211 = 10'd211;
parameter [9:0] LEGUP_F_main_BB__61_212 = 10'd212;
parameter [9:0] LEGUP_F_main_BB__61_213 = 10'd213;
parameter [9:0] LEGUP_F_main_BB__64_214 = 10'd214;
parameter [9:0] LEGUP_F_main_BB__64_215 = 10'd215;
parameter [9:0] LEGUP_F_main_BB__67_216 = 10'd216;
parameter [9:0] LEGUP_F_main_BB__67_217 = 10'd217;
parameter [9:0] LEGUP_F_main_BB__70_218 = 10'd218;
parameter [9:0] LEGUP_F_main_BB__70_219 = 10'd219;
parameter [9:0] LEGUP_F_main_BB__73_220 = 10'd220;
parameter [9:0] LEGUP_F_main_BB__73_221 = 10'd221;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_222 = 10'd222;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_223 = 10'd223;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_224 = 10'd224;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_225 = 10'd225;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_226 = 10'd226;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_227 = 10'd227;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_228 = 10'd228;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_229 = 10'd229;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_230 = 10'd230;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_231 = 10'd231;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_232 = 10'd232;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_233 = 10'd233;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_234 = 10'd234;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_235 = 10'd235;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_236 = 10'd236;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_237 = 10'd237;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_238 = 10'd238;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_239 = 10'd239;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_240 = 10'd240;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_241 = 10'd241;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_242 = 10'd242;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_243 = 10'd243;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_244 = 10'd244;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_245 = 10'd245;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_246 = 10'd246;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_247 = 10'd247;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_248 = 10'd248;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_249 = 10'd249;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_250 = 10'd250;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_251 = 10'd251;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_252 = 10'd252;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_253 = 10'd253;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_254 = 10'd254;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_255 = 10'd255;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_256 = 10'd256;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_257 = 10'd257;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_258 = 10'd258;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_259 = 10'd259;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_260 = 10'd260;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_261 = 10'd261;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_262 = 10'd262;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_263 = 10'd263;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_264 = 10'd264;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_265 = 10'd265;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_266 = 10'd266;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_267 = 10'd267;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_268 = 10'd268;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_269 = 10'd269;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_270 = 10'd270;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_271 = 10'd271;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexitii_272 = 10'd272;
parameter [9:0] LEGUP_F_main_BB_preheader1preheader_273 = 10'd273;
parameter [9:0] LEGUP_F_main_BB_preheader_274 = 10'd274;
parameter [9:0] LEGUP_F_main_BB_preheader_275 = 10'd275;
parameter [9:0] LEGUP_F_main_BB_preheader_276 = 10'd276;
parameter [9:0] LEGUP_F_main_BB_preheader_277 = 10'd277;
parameter [9:0] LEGUP_F_main_BB__84_278 = 10'd278;
parameter [9:0] LEGUP_F_main_BB__84_279 = 10'd279;
parameter [9:0] LEGUP_F_main_BB__87_280 = 10'd280;
parameter [9:0] LEGUP_F_main_BB__87_281 = 10'd281;
parameter [9:0] LEGUP_F_main_BB__90_282 = 10'd282;
parameter [9:0] LEGUP_F_main_BB__90_283 = 10'd283;
parameter [9:0] LEGUP_F_main_BB__90_284 = 10'd284;
parameter [9:0] LEGUP_F_main_BB__94_285 = 10'd285;
parameter [9:0] LEGUP_F_main_BB__94_286 = 10'd286;
parameter [9:0] LEGUP_F_main_BB__97_287 = 10'd287;
parameter [9:0] LEGUP_F_main_BB__97_288 = 10'd288;
parameter [9:0] LEGUP_F_main_BB__100_289 = 10'd289;
parameter [9:0] LEGUP_F_main_BB__100_290 = 10'd290;
parameter [9:0] LEGUP_F_main_BB__103_291 = 10'd291;
parameter [9:0] LEGUP_F_main_BB__103_292 = 10'd292;
parameter [9:0] LEGUP_F_main_BB__106_293 = 10'd293;
parameter [9:0] LEGUP_F_main_BB__106_294 = 10'd294;
parameter [9:0] LEGUP_F_main_BB__109_295 = 10'd295;
parameter [9:0] LEGUP_F_main_BB__109_296 = 10'd296;
parameter [9:0] LEGUP_F_main_BB__112_297 = 10'd297;
parameter [9:0] LEGUP_F_main_BB__112_298 = 10'd298;
parameter [9:0] LEGUP_F_main_BB__115_299 = 10'd299;
parameter [9:0] LEGUP_F_main_BB__115_300 = 10'd300;
parameter [9:0] LEGUP_F_main_BB__118_301 = 10'd301;
parameter [9:0] LEGUP_F_main_BB__118_302 = 10'd302;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_303 = 10'd303;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_304 = 10'd304;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_305 = 10'd305;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_306 = 10'd306;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_307 = 10'd307;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_308 = 10'd308;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_309 = 10'd309;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_310 = 10'd310;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_311 = 10'd311;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_312 = 10'd312;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_313 = 10'd313;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_314 = 10'd314;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_315 = 10'd315;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_316 = 10'd316;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_317 = 10'd317;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_318 = 10'd318;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_319 = 10'd319;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_320 = 10'd320;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_321 = 10'd321;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_322 = 10'd322;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_323 = 10'd323;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_324 = 10'd324;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_325 = 10'd325;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_326 = 10'd326;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_327 = 10'd327;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_328 = 10'd328;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_329 = 10'd329;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_330 = 10'd330;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_331 = 10'd331;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_332 = 10'd332;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_333 = 10'd333;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_334 = 10'd334;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_335 = 10'd335;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_336 = 10'd336;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_337 = 10'd337;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_338 = 10'd338;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_339 = 10'd339;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_340 = 10'd340;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_341 = 10'd341;
parameter [9:0] LEGUP_F_main_BB_linear_sech2exitii_342 = 10'd342;
parameter [9:0] LEGUP_F_main_BB_preheader1_343 = 10'd343;
parameter [9:0] LEGUP_F_main_BB_preheader1_344 = 10'd344;
parameter [9:0] LEGUP_F_main_BB_preheader1_345 = 10'd345;
parameter [9:0] LEGUP_F_main_BB_preheader1_346 = 10'd346;
parameter [9:0] LEGUP_F_main_BB__129_347 = 10'd347;
parameter [9:0] LEGUP_F_main_BB__129_348 = 10'd348;
parameter [9:0] LEGUP_F_main_BB__132_349 = 10'd349;
parameter [9:0] LEGUP_F_main_BB__132_350 = 10'd350;
parameter [9:0] LEGUP_F_main_BB__135_351 = 10'd351;
parameter [9:0] LEGUP_F_main_BB__135_352 = 10'd352;
parameter [9:0] LEGUP_F_main_BB__138_353 = 10'd353;
parameter [9:0] LEGUP_F_main_BB__138_354 = 10'd354;
parameter [9:0] LEGUP_F_main_BB__141_355 = 10'd355;
parameter [9:0] LEGUP_F_main_BB__141_356 = 10'd356;
parameter [9:0] LEGUP_F_main_BB__144_357 = 10'd357;
parameter [9:0] LEGUP_F_main_BB__144_358 = 10'd358;
parameter [9:0] LEGUP_F_main_BB__147_359 = 10'd359;
parameter [9:0] LEGUP_F_main_BB__147_360 = 10'd360;
parameter [9:0] LEGUP_F_main_BB__150_361 = 10'd361;
parameter [9:0] LEGUP_F_main_BB__150_362 = 10'd362;
parameter [9:0] LEGUP_F_main_BB__153_363 = 10'd363;
parameter [9:0] LEGUP_F_main_BB__153_364 = 10'd364;
parameter [9:0] LEGUP_F_main_BB__156_365 = 10'd365;
parameter [9:0] LEGUP_F_main_BB__156_366 = 10'd366;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_367 = 10'd367;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_368 = 10'd368;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_369 = 10'd369;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_370 = 10'd370;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_371 = 10'd371;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_372 = 10'd372;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_373 = 10'd373;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_374 = 10'd374;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_375 = 10'd375;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_376 = 10'd376;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_377 = 10'd377;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_378 = 10'd378;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_379 = 10'd379;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_380 = 10'd380;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_381 = 10'd381;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_382 = 10'd382;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_383 = 10'd383;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_384 = 10'd384;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_385 = 10'd385;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_386 = 10'd386;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_387 = 10'd387;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_388 = 10'd388;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_389 = 10'd389;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_390 = 10'd390;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_391 = 10'd391;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_392 = 10'd392;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_393 = 10'd393;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_394 = 10'd394;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_395 = 10'd395;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_396 = 10'd396;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_397 = 10'd397;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_398 = 10'd398;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_399 = 10'd399;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_400 = 10'd400;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_401 = 10'd401;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_402 = 10'd402;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_403 = 10'd403;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_404 = 10'd404;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_405 = 10'd405;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_406 = 10'd406;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_407 = 10'd407;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_408 = 10'd408;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_409 = 10'd409;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_410 = 10'd410;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_411 = 10'd411;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_412 = 10'd412;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_413 = 10'd413;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_414 = 10'd414;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_415 = 10'd415;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_416 = 10'd416;
parameter [9:0] LEGUP_F_main_BB_linear_tanhexit1ii_417 = 10'd417;
parameter [9:0] LEGUP_F_main_BB_preheaderpreheader_418 = 10'd418;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_419 = 10'd419;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_420 = 10'd420;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_421 = 10'd421;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_422 = 10'd422;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_423 = 10'd423;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_424 = 10'd424;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_425 = 10'd425;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_426 = 10'd426;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_427 = 10'd427;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_428 = 10'd428;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_429 = 10'd429;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_430 = 10'd430;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_431 = 10'd431;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_432 = 10'd432;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_433 = 10'd433;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_434 = 10'd434;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_435 = 10'd435;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_436 = 10'd436;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_437 = 10'd437;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_438 = 10'd438;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_439 = 10'd439;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_440 = 10'd440;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_441 = 10'd441;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_442 = 10'd442;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_443 = 10'd443;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_444 = 10'd444;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_445 = 10'd445;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_446 = 10'd446;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_447 = 10'd447;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_448 = 10'd448;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_449 = 10'd449;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_450 = 10'd450;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_451 = 10'd451;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_452 = 10'd452;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_453 = 10'd453;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_454 = 10'd454;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_455 = 10'd455;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_456 = 10'd456;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_457 = 10'd457;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_458 = 10'd458;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_459 = 10'd459;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_460 = 10'd460;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_461 = 10'd461;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_462 = 10'd462;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_463 = 10'd463;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_464 = 10'd464;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_465 = 10'd465;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_466 = 10'd466;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_467 = 10'd467;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_468 = 10'd468;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_469 = 10'd469;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_470 = 10'd470;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_471 = 10'd471;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_472 = 10'd472;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_473 = 10'd473;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_474 = 10'd474;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_475 = 10'd475;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_476 = 10'd476;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_477 = 10'd477;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_478 = 10'd478;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_479 = 10'd479;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_480 = 10'd480;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_481 = 10'd481;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_482 = 10'd482;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_483 = 10'd483;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_484 = 10'd484;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_485 = 10'd485;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_486 = 10'd486;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_487 = 10'd487;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_488 = 10'd488;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_489 = 10'd489;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_490 = 10'd490;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_491 = 10'd491;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_492 = 10'd492;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_493 = 10'd493;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_494 = 10'd494;
parameter [9:0] LEGUP_F_main_BB_rotateexiti_495 = 10'd495;
parameter [9:0] LEGUP_F_main_BB__178_496 = 10'd496;
parameter [9:0] LEGUP_F_main_BB__178_497 = 10'd497;
parameter [9:0] LEGUP_F_main_BB__181_498 = 10'd498;
parameter [9:0] LEGUP_F_main_BB__181_499 = 10'd499;
parameter [9:0] LEGUP_F_main_BB__184_500 = 10'd500;
parameter [9:0] LEGUP_F_main_BB__184_501 = 10'd501;
parameter [9:0] LEGUP_F_main_BB__187_502 = 10'd502;
parameter [9:0] LEGUP_F_main_BB__187_503 = 10'd503;
parameter [9:0] LEGUP_F_main_BB__190_504 = 10'd504;
parameter [9:0] LEGUP_F_main_BB__190_505 = 10'd505;
parameter [9:0] LEGUP_F_main_BB__193_506 = 10'd506;
parameter [9:0] LEGUP_F_main_BB__193_507 = 10'd507;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_508 = 10'd508;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_509 = 10'd509;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_510 = 10'd510;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_511 = 10'd511;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_512 = 10'd512;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_513 = 10'd513;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_514 = 10'd514;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_515 = 10'd515;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_516 = 10'd516;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_517 = 10'd517;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_518 = 10'd518;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_519 = 10'd519;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_520 = 10'd520;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_521 = 10'd521;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_522 = 10'd522;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_523 = 10'd523;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_524 = 10'd524;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_525 = 10'd525;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_526 = 10'd526;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_527 = 10'd527;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_528 = 10'd528;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_529 = 10'd529;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_530 = 10'd530;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_531 = 10'd531;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_532 = 10'd532;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_533 = 10'd533;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_534 = 10'd534;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_535 = 10'd535;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_536 = 10'd536;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_537 = 10'd537;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_538 = 10'd538;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_539 = 10'd539;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_540 = 10'd540;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_541 = 10'd541;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_542 = 10'd542;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_543 = 10'd543;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_544 = 10'd544;
parameter [9:0] LEGUP_F_main_BB_normalizeexiti_545 = 10'd545;
parameter [9:0] LEGUP_F_main_BB_fasticaexit_546 = 10'd546;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [9:0] cur_state;
reg [9:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg  main_1_12;
reg  main_1_12_reg;
reg [31:0] main_13_14;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg  main_15_18;
reg [31:0] main_20_21;
reg [31:0] main_22_23;
reg [31:0] main_22_23_reg;
reg [31:0] main_22_24;
reg [31:0] main_26_27;
reg [31:0] main_28_29;
reg [31:0] main_28_29_reg;
reg [31:0] main_28_30;
reg [31:0] main_28_31;
reg [31:0] main_28_31_reg;
reg [31:0] main_convergedexiti_32;
reg [31:0] main_convergedexiti_32_reg;
reg [63:0] main_convergedexiti_33;
reg [63:0] main_convergedexiti_33_reg;
reg  main_convergedexiti_34;
reg [31:0] main_preheader2_t025ii;
reg [31:0] main_preheader2_t025ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep2_reg;
reg [31:0] main_preheader2_35;
reg [31:0] main_preheader2_36;
reg [31:0] main_preheader2_37;
reg [31:0] main_preheader2_38;
reg [31:0] main_preheader2_38_reg;
reg [31:0] main_preheader2_39;
reg [31:0] main_preheader2_39_reg;
reg [31:0] main_preheader2_40;
reg [31:0] main_preheader2_41;
reg [31:0] main_preheader2_41_reg;
reg  main_preheader2_exitcond;
reg  main_preheader2_exitcond_reg;
reg [31:0] main_preheader15ii_42;
reg [31:0] main_preheader15ii_42_reg;
reg [31:0] main_preheader15ii_t119ii;
reg [31:0] main_preheader15ii_t119ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader15ii_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader15ii_scevgep5;
reg [31:0] main_preheader15ii_43;
reg [31:0] main_preheader15ii_43_reg;
reg [31:0] main_preheader15ii_44;
reg [31:0] main_preheader15ii_44_reg;
reg  main_preheader15ii_45;
reg  main_46_47;
reg  main_46_48;
reg  main_46_orcondiii;
reg  main_49_50;
reg  main_49_51;
reg  main_49_orcond12iii;
reg  main_52_53;
reg  main_52_54;
reg  main_52_orcond3iii;
reg  main_55_56;
reg  main_55_57;
reg  main_55_orcond13iii;
reg  main_58_59;
reg  main_58_60;
reg  main_58_orcond5iii;
reg  main_61_62;
reg  main_61_63;
reg  main_61_orcond14iii;
reg  main_64_65;
reg  main_64_66;
reg  main_64_orcond7iii;
reg  main_67_68;
reg  main_67_69;
reg  main_67_orcond15iii;
reg  main_70_71;
reg  main_70_72;
reg  main_70_orcond9iii;
reg  main_73_74;
reg  main_73_75;
reg  main_73_orcond11iii;
reg [31:0] main_73_iii;
reg [31:0] main_73_16iii;
reg [31:0] main_linear_tanhexitii_a0iii;
reg [31:0] main_linear_tanhexitii_a0iii_reg;
reg [31:0] main_linear_tanhexitii_b0iii;
reg [31:0] main_linear_tanhexitii_b0iii_reg;
reg [31:0] main_linear_tanhexitii_76;
reg [31:0] main_linear_tanhexitii_77;
reg [31:0] main_linear_tanhexitii_78;
reg [31:0] main_linear_tanhexitii_79;
reg [31:0] main_linear_tanhexitii_79_reg;
reg [31:0] main_linear_tanhexitii_80;
reg [31:0] main_linear_tanhexitii_80_reg;
reg  main_linear_tanhexitii_exitcond3;
reg  main_linear_tanhexitii_exitcond3_reg;
reg [31:0] main_preheader_81;
reg [31:0] main_preheader_81_reg;
reg [31:0] main_preheader_t218ii;
reg [31:0] main_preheader_t218ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep10;
reg [31:0] main_preheader_82;
reg [31:0] main_preheader_82_reg;
reg  main_preheader_83;
reg  main_84_85;
reg  main_84_86;
reg  main_84_orcondi1ii;
reg  main_87_88;
reg  main_87_89;
reg  main_87_orcond12i2ii;
reg [63:0] main_90_91;
reg [63:0] main_90_91_reg;
reg  main_90_92;
reg  main_90_93;
reg  main_90_orcond3i3ii;
reg  main_90_orcond3i3ii_reg;
reg  main_94_95;
reg  main_94_96;
reg  main_94_orcond13i4ii;
reg  main_97_98;
reg  main_97_99;
reg  main_97_orcond14i5ii;
reg  main_100_101;
reg  main_100_102;
reg  main_100_orcond5i6ii;
reg  main_103_104;
reg  main_103_105;
reg  main_103_orcond15i7ii;
reg  main_106_107;
reg  main_106_108;
reg  main_106_orcond16iii;
reg  main_109_110;
reg  main_109_111;
reg  main_109_orcond7i8ii;
reg  main_112_113;
reg  main_112_114;
reg  main_112_orcond17iii;
reg  main_115_116;
reg  main_115_117;
reg  main_115_orcond9i9ii;
reg  main_118_119;
reg  main_118_120;
reg  main_118_orcond11i10ii;
reg [31:0] main_118_i11ii;
reg [31:0] main_118_18iii;
reg [31:0] main_linear_sech2exitii_a0i12ii;
reg [31:0] main_linear_sech2exitii_a0i12ii_reg;
reg [31:0] main_linear_sech2exitii_b0i13ii;
reg [31:0] main_linear_sech2exitii_b0i13ii_reg;
reg [31:0] main_linear_sech2exitii_121;
reg [31:0] main_linear_sech2exitii_122;
reg [31:0] main_linear_sech2exitii_123;
reg [31:0] main_linear_sech2exitii_123_reg;
reg [31:0] main_linear_sech2exitii_124;
reg [31:0] main_linear_sech2exitii_124_reg;
reg  main_linear_sech2exitii_exitcond9;
reg  main_linear_sech2exitii_exitcond9_reg;
reg [31:0] main_preheader1_125;
reg [31:0] main_preheader1_125_reg;
reg [31:0] main_preheader1_t1191ii;
reg [31:0] main_preheader1_t1191ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1_scevgep8;
reg [31:0] main_preheader1_126;
reg [31:0] main_preheader1_126_reg;
reg [31:0] main_preheader1_127;
reg [31:0] main_preheader1_127_reg;
reg  main_preheader1_128;
reg  main_129_130;
reg  main_129_131;
reg  main_129_orcondi1ii;
reg  main_132_133;
reg  main_132_134;
reg  main_132_orcond12i1ii;
reg  main_135_136;
reg  main_135_137;
reg  main_135_orcond3i1ii;
reg  main_138_139;
reg  main_138_140;
reg  main_138_orcond13i1ii;
reg  main_141_142;
reg  main_141_143;
reg  main_141_orcond5i1ii;
reg  main_144_145;
reg  main_144_146;
reg  main_144_orcond14i1ii;
reg  main_147_148;
reg  main_147_149;
reg  main_147_orcond7i1ii;
reg  main_150_151;
reg  main_150_152;
reg  main_150_orcond15i1ii;
reg  main_153_154;
reg  main_153_155;
reg  main_153_orcond9i1ii;
reg  main_156_157;
reg  main_156_158;
reg  main_156_orcond11i1ii;
reg [31:0] main_156_i1ii;
reg [31:0] main_156_16i1ii;
reg [31:0] main_linear_tanhexit1ii_a0i1ii;
reg [31:0] main_linear_tanhexit1ii_a0i1ii_reg;
reg [31:0] main_linear_tanhexit1ii_b0i1ii;
reg [31:0] main_linear_tanhexit1ii_b0i1ii_reg;
reg [31:0] main_linear_tanhexit1ii_159;
reg [31:0] main_linear_tanhexit1ii_160;
reg [31:0] main_linear_tanhexit1ii_161;
reg [31:0] main_linear_tanhexit1ii_162;
reg [31:0] main_linear_tanhexit1ii_162_reg;
reg [31:0] main_linear_tanhexit1ii_163;
reg [31:0] main_linear_tanhexit1ii_163_reg;
reg  main_linear_tanhexit1ii_exitcond6;
reg  main_linear_tanhexit1ii_exitcond6_reg;
reg [31:0] main_rotateexiti_164;
reg [31:0] main_rotateexiti_164_reg;
reg [31:0] main_rotateexiti_165;
reg [31:0] main_rotateexiti_165_reg;
reg [31:0] main_rotateexiti_166;
reg [31:0] main_rotateexiti_167;
reg [31:0] main_rotateexiti_168;
reg [31:0] main_rotateexiti_169;
reg [31:0] main_rotateexiti_169_reg;
reg [31:0] main_rotateexiti_170;
reg [31:0] main_rotateexiti_170_reg;
reg [31:0] main_rotateexiti_171;
reg [31:0] main_rotateexiti_171_reg;
reg [31:0] main_rotateexiti_172;
reg [31:0] main_rotateexiti_173;
reg [31:0] main_rotateexiti_174;
reg [31:0] main_rotateexiti_174_reg;
reg [31:0] main_rotateexiti_175;
reg [31:0] main_rotateexiti_175_reg;
reg  main_rotateexiti_176;
reg  main_rotateexiti_177;
reg  main_rotateexiti_orcondiiii;
reg  main_178_179;
reg  main_178_180;
reg  main_178_orcond3iiii;
reg  main_181_182;
reg  main_181_183;
reg  main_181_orcond5iiii;
reg  main_184_185;
reg  main_184_186;
reg  main_184_orcond7iiii;
reg  main_187_188;
reg  main_187_189;
reg  main_187_orcond9iiii;
reg  main_190_191;
reg  main_190_192;
reg  main_190_orcond11iiii;
reg  main_193_194;
reg  main_193_195;
reg  main_193_orcond13iiii;
reg [31:0] main_193_iiii;
reg [31:0] main_193_14iiii;
reg [31:0] main_normalizeexiti_a0iiii;
reg [31:0] main_normalizeexiti_a0iiii_reg;
reg [31:0] main_normalizeexiti_b0iiii;
reg [31:0] main_normalizeexiti_b0iiii_reg;
reg [31:0] main_normalizeexiti_196;
reg [31:0] main_normalizeexiti_197;
reg [31:0] main_normalizeexiti_197_reg;
reg [31:0] main_normalizeexiti_198;
reg [31:0] main_normalizeexiti_198_reg;
reg [31:0] main_normalizeexiti_199;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_1_8_out;
reg  altfp_main_1_8_en;
reg [31:0] main_altfp_multiply_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_1_9_out;
reg  altfp_main_1_9_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_13_14_out;
reg  altfp_main_13_14_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_extend_32_0_op0;
wire [63:0] altfp_extend_main_convergedexiti_33_out;
reg  altfp_main_convergedexiti_33_en;
reg [63:0] main_altfp_extend_32_0;
wire  altfp_compare32_1_main_1_12_out;
reg  altfp_main_1_12_en;
wire  main_1_12_unused;
wire  altfp_compare32_1_main_15_18_out;
reg  altfp_main_15_18_en;
wire  main_15_18_unused;
wire  altfp_compare64_1_main_convergedexiti_34_out;
reg  altfp_main_convergedexiti_34_en;
wire  main_convergedexiti_34_unused;
wire  altfp_compare32_1_main_preheader15ii_45_out;
reg  altfp_main_preheader15ii_45_en;
wire  main_preheader15ii_45_unused;
wire  altfp_compare32_1_main_46_47_out;
reg  altfp_main_46_47_en;
wire  main_46_47_unused;
wire  altfp_compare32_1_main_46_48_out;
reg  altfp_main_46_48_en;
wire  main_46_48_unused;
wire  altfp_compare32_1_main_49_50_out;
reg  altfp_main_49_50_en;
wire  main_49_50_unused;
wire  altfp_compare32_1_main_49_51_out;
reg  altfp_main_49_51_en;
wire  main_49_51_unused;
wire  altfp_compare32_1_main_52_53_out;
reg  altfp_main_52_53_en;
wire  main_52_53_unused;
wire  altfp_compare32_1_main_52_54_out;
reg  altfp_main_52_54_en;
wire  main_52_54_unused;
wire  altfp_compare32_1_main_55_56_out;
reg  altfp_main_55_56_en;
wire  main_55_56_unused;
wire  altfp_compare32_1_main_55_57_out;
reg  altfp_main_55_57_en;
wire  main_55_57_unused;
wire  altfp_compare32_1_main_58_59_out;
reg  altfp_main_58_59_en;
wire  main_58_59_unused;
wire  altfp_compare32_1_main_58_60_out;
reg  altfp_main_58_60_en;
wire  main_58_60_unused;
wire  altfp_compare32_1_main_61_62_out;
reg  altfp_main_61_62_en;
wire  main_61_62_unused;
wire  altfp_compare32_1_main_61_63_out;
reg  altfp_main_61_63_en;
wire  main_61_63_unused;
wire  altfp_compare32_1_main_64_65_out;
reg  altfp_main_64_65_en;
wire  main_64_65_unused;
wire  altfp_compare32_1_main_64_66_out;
reg  altfp_main_64_66_en;
wire  main_64_66_unused;
wire  altfp_compare32_1_main_67_68_out;
reg  altfp_main_67_68_en;
wire  main_67_68_unused;
wire  altfp_compare32_1_main_67_69_out;
reg  altfp_main_67_69_en;
wire  main_67_69_unused;
wire  altfp_compare32_1_main_70_71_out;
reg  altfp_main_70_71_en;
wire  main_70_71_unused;
wire  altfp_compare32_1_main_70_72_out;
reg  altfp_main_70_72_en;
wire  main_70_72_unused;
wire  altfp_compare32_1_main_73_74_out;
reg  altfp_main_73_74_en;
wire  main_73_74_unused;
wire  altfp_compare32_1_main_73_75_out;
reg  altfp_main_73_75_en;
wire  main_73_75_unused;
wire  altfp_compare32_1_main_preheader_83_out;
reg  altfp_main_preheader_83_en;
wire  main_preheader_83_unused;
wire  altfp_compare32_1_main_84_85_out;
reg  altfp_main_84_85_en;
wire  main_84_85_unused;
wire  altfp_compare32_1_main_84_86_out;
reg  altfp_main_84_86_en;
wire  main_84_86_unused;
wire  altfp_compare32_1_main_87_88_out;
reg  altfp_main_87_88_en;
wire  main_87_88_unused;
wire  altfp_compare32_1_main_87_89_out;
reg  altfp_main_87_89_en;
wire  main_87_89_unused;
wire  altfp_compare32_1_main_90_92_out;
reg  altfp_main_90_92_en;
wire  main_90_92_unused;
wire  altfp_compare32_1_main_90_93_out;
reg  altfp_main_90_93_en;
wire  main_90_93_unused;
wire  altfp_compare32_1_main_94_95_out;
reg  altfp_main_94_95_en;
wire  main_94_95_unused;
wire  altfp_compare32_1_main_94_96_out;
reg  altfp_main_94_96_en;
wire  main_94_96_unused;
wire  altfp_compare32_1_main_97_98_out;
reg  altfp_main_97_98_en;
wire  main_97_98_unused;
wire  altfp_compare64_1_main_97_99_out;
reg  altfp_main_97_99_en;
wire  main_97_99_unused;
wire  altfp_compare64_1_main_100_101_out;
reg  altfp_main_100_101_en;
wire  main_100_101_unused;
wire  altfp_compare32_1_main_100_102_out;
reg  altfp_main_100_102_en;
wire  main_100_102_unused;
wire  altfp_compare32_1_main_103_104_out;
reg  altfp_main_103_104_en;
wire  main_103_104_unused;
wire  altfp_compare64_1_main_103_105_out;
reg  altfp_main_103_105_en;
wire  main_103_105_unused;
wire  altfp_compare64_1_main_106_107_out;
reg  altfp_main_106_107_en;
wire  main_106_107_unused;
wire  altfp_compare32_1_main_106_108_out;
reg  altfp_main_106_108_en;
wire  main_106_108_unused;
wire  altfp_compare32_1_main_109_110_out;
reg  altfp_main_109_110_en;
wire  main_109_110_unused;
wire  altfp_compare32_1_main_109_111_out;
reg  altfp_main_109_111_en;
wire  main_109_111_unused;
wire  altfp_compare32_1_main_112_113_out;
reg  altfp_main_112_113_en;
wire  main_112_113_unused;
wire  altfp_compare32_1_main_112_114_out;
reg  altfp_main_112_114_en;
wire  main_112_114_unused;
wire  altfp_compare32_1_main_115_116_out;
reg  altfp_main_115_116_en;
wire  main_115_116_unused;
wire  altfp_compare32_1_main_115_117_out;
reg  altfp_main_115_117_en;
wire  main_115_117_unused;
wire  altfp_compare32_1_main_118_119_out;
reg  altfp_main_118_119_en;
wire  main_118_119_unused;
wire  altfp_compare32_1_main_118_120_out;
reg  altfp_main_118_120_en;
wire  main_118_120_unused;
wire  altfp_compare32_1_main_preheader1_128_out;
reg  altfp_main_preheader1_128_en;
wire  main_preheader1_128_unused;
wire  altfp_compare32_1_main_129_130_out;
reg  altfp_main_129_130_en;
wire  main_129_130_unused;
wire  altfp_compare32_1_main_129_131_out;
reg  altfp_main_129_131_en;
wire  main_129_131_unused;
wire  altfp_compare32_1_main_132_133_out;
reg  altfp_main_132_133_en;
wire  main_132_133_unused;
wire  altfp_compare32_1_main_132_134_out;
reg  altfp_main_132_134_en;
wire  main_132_134_unused;
wire  altfp_compare32_1_main_135_136_out;
reg  altfp_main_135_136_en;
wire  main_135_136_unused;
wire  altfp_compare32_1_main_135_137_out;
reg  altfp_main_135_137_en;
wire  main_135_137_unused;
wire  altfp_compare32_1_main_138_139_out;
reg  altfp_main_138_139_en;
wire  main_138_139_unused;
wire  altfp_compare32_1_main_138_140_out;
reg  altfp_main_138_140_en;
wire  main_138_140_unused;
wire  altfp_compare32_1_main_141_142_out;
reg  altfp_main_141_142_en;
wire  main_141_142_unused;
wire  altfp_compare32_1_main_141_143_out;
reg  altfp_main_141_143_en;
wire  main_141_143_unused;
wire  altfp_compare32_1_main_144_145_out;
reg  altfp_main_144_145_en;
wire  main_144_145_unused;
wire  altfp_compare32_1_main_144_146_out;
reg  altfp_main_144_146_en;
wire  main_144_146_unused;
wire  altfp_compare32_1_main_147_148_out;
reg  altfp_main_147_148_en;
wire  main_147_148_unused;
wire  altfp_compare32_1_main_147_149_out;
reg  altfp_main_147_149_en;
wire  main_147_149_unused;
wire  altfp_compare32_1_main_150_151_out;
reg  altfp_main_150_151_en;
wire  main_150_151_unused;
wire  altfp_compare32_1_main_150_152_out;
reg  altfp_main_150_152_en;
wire  main_150_152_unused;
wire  altfp_compare32_1_main_153_154_out;
reg  altfp_main_153_154_en;
wire  main_153_154_unused;
wire  altfp_compare32_1_main_153_155_out;
reg  altfp_main_153_155_en;
wire  main_153_155_unused;
wire  altfp_compare32_1_main_156_157_out;
reg  altfp_main_156_157_en;
wire  main_156_157_unused;
wire  altfp_compare32_1_main_156_158_out;
reg  altfp_main_156_158_en;
wire  main_156_158_unused;
wire  altfp_compare32_1_main_rotateexiti_176_out;
reg  altfp_main_rotateexiti_176_en;
wire  main_rotateexiti_176_unused;
wire  altfp_compare32_1_main_rotateexiti_177_out;
reg  altfp_main_rotateexiti_177_en;
wire  main_rotateexiti_177_unused;
wire  altfp_compare32_1_main_178_179_out;
reg  altfp_main_178_179_en;
wire  main_178_179_unused;
wire  altfp_compare32_1_main_178_180_out;
reg  altfp_main_178_180_en;
wire  main_178_180_unused;
wire  altfp_compare32_1_main_181_182_out;
reg  altfp_main_181_182_en;
wire  main_181_182_unused;
wire  altfp_compare32_1_main_181_183_out;
reg  altfp_main_181_183_en;
wire  main_181_183_unused;
wire  altfp_compare32_1_main_184_185_out;
reg  altfp_main_184_185_en;
wire  main_184_185_unused;
wire  altfp_compare32_1_main_184_186_out;
reg  altfp_main_184_186_en;
wire  main_184_186_unused;
wire  altfp_compare32_1_main_187_188_out;
reg  altfp_main_187_188_en;
wire  main_187_188_unused;
wire  altfp_compare32_1_main_187_189_out;
reg  altfp_main_187_189_en;
wire  main_187_189_unused;
wire  altfp_compare32_1_main_190_191_out;
reg  altfp_main_190_191_en;
wire  main_190_191_unused;
wire  altfp_compare32_1_main_190_192_out;
reg  altfp_main_190_192_en;
wire  main_190_192_unused;
wire  altfp_compare32_1_main_193_194_out;
reg  altfp_main_193_194_en;
wire  main_193_194_unused;
wire  altfp_compare32_1_main_193_195_out;
reg  altfp_main_193_195_en;
wire  main_193_195_unused;

/*   %8 = fmul float %5, %7*/
altfp_multiplier_11 altfp_multiplier_11_main_1_8 (
	.result (altfp_multiplier_main_1_8_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_1_8_en)
);


/*   %9 = fadd float %8, 0.000000e+00*/
altfp_adder_14 altfp_adder_14_main_1_9 (
	.result (altfp_adder_main_1_9_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_1_9_en)
);


/*   %14 = fsub float -0.000000e+00, %11*/
altfp_subtractor_14 altfp_subtractor_14_main_13_14 (
	.result (altfp_subtractor_main_13_14_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_13_14_en)
);


/*   %33 = fpext float %32 to double*/
altfp_extend_2 altfp_extend_2_main_convergedexiti_33 (
	.result (altfp_extend_main_convergedexiti_33_out),
	.dataa (main_altfp_extend_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_convergedexiti_33_en)
);


/*   %12 = fcmp ogt float %11, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_1_12 (
	.dataa (main_1_11),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_1_12_en),
	.aeb (main_1_12_unused),
	.aneb (main_1_12_unused),
	.alb (main_1_12_unused),
	.aleb (main_1_12_unused),
	.agb (altfp_compare32_1_main_1_12_out),
	.ageb (main_1_12_unused),
	.unordered (main_1_12_unused)
);


/*   %18 = fcmp ogt float %17, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_15_18 (
	.dataa (main_15_17),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_15_18_en),
	.aeb (main_15_18_unused),
	.aneb (main_15_18_unused),
	.alb (main_15_18_unused),
	.aleb (main_15_18_unused),
	.agb (altfp_compare32_1_main_15_18_out),
	.ageb (main_15_18_unused),
	.unordered (main_15_18_unused)
);


/*   %34 = fcmp olt double %33, 2.000000e-02*/
altfp_compare64_1 altfp_compare64_1_main_convergedexiti_34 (
	.dataa (main_convergedexiti_33),
	.datab (64'h3F947AE147AE147B),
	.clock (clk),
	.clk_en (altfp_main_convergedexiti_34_en),
	.aeb (main_convergedexiti_34_unused),
	.aneb (main_convergedexiti_34_unused),
	.alb (altfp_compare64_1_main_convergedexiti_34_out),
	.aleb (main_convergedexiti_34_unused),
	.agb (main_convergedexiti_34_unused),
	.ageb (main_convergedexiti_34_unused),
	.unordered (main_convergedexiti_34_unused)
);


/*   %45 = fcmp olt float %44, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_preheader15ii_45 (
	.dataa (main_preheader15ii_44),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_preheader15ii_45_en),
	.aeb (main_preheader15ii_45_unused),
	.aneb (main_preheader15ii_45_unused),
	.alb (altfp_compare32_1_main_preheader15ii_45_out),
	.aleb (main_preheader15ii_45_unused),
	.agb (main_preheader15ii_45_unused),
	.ageb (main_preheader15ii_45_unused),
	.unordered (main_preheader15ii_45_unused)
);


/*   %47 = fcmp oge float %44, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_46_47 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_46_47_en),
	.aeb (main_46_47_unused),
	.aneb (main_46_47_unused),
	.alb (main_46_47_unused),
	.aleb (main_46_47_unused),
	.agb (main_46_47_unused),
	.ageb (altfp_compare32_1_main_46_47_out),
	.unordered (main_46_47_unused)
);


/*   %48 = fcmp olt float %44, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_46_48 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_46_48_en),
	.aeb (main_46_48_unused),
	.aneb (main_46_48_unused),
	.alb (altfp_compare32_1_main_46_48_out),
	.aleb (main_46_48_unused),
	.agb (main_46_48_unused),
	.ageb (main_46_48_unused),
	.unordered (main_46_48_unused)
);


/*   %50 = fcmp oge float %44, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_49_50 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_49_50_en),
	.aeb (main_49_50_unused),
	.aneb (main_49_50_unused),
	.alb (main_49_50_unused),
	.aleb (main_49_50_unused),
	.agb (main_49_50_unused),
	.ageb (altfp_compare32_1_main_49_50_out),
	.unordered (main_49_50_unused)
);


/*   %51 = fcmp olt float %44, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_49_51 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_49_51_en),
	.aeb (main_49_51_unused),
	.aneb (main_49_51_unused),
	.alb (altfp_compare32_1_main_49_51_out),
	.aleb (main_49_51_unused),
	.agb (main_49_51_unused),
	.ageb (main_49_51_unused),
	.unordered (main_49_51_unused)
);


/*   %53 = fcmp oge float %44, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_52_53 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_52_53_en),
	.aeb (main_52_53_unused),
	.aneb (main_52_53_unused),
	.alb (main_52_53_unused),
	.aleb (main_52_53_unused),
	.agb (main_52_53_unused),
	.ageb (altfp_compare32_1_main_52_53_out),
	.unordered (main_52_53_unused)
);


/*   %54 = fcmp olt float %44, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_52_54 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_52_54_en),
	.aeb (main_52_54_unused),
	.aneb (main_52_54_unused),
	.alb (altfp_compare32_1_main_52_54_out),
	.aleb (main_52_54_unused),
	.agb (main_52_54_unused),
	.ageb (main_52_54_unused),
	.unordered (main_52_54_unused)
);


/*   %56 = fcmp oge float %44, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_55_56 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_55_56_en),
	.aeb (main_55_56_unused),
	.aneb (main_55_56_unused),
	.alb (main_55_56_unused),
	.aleb (main_55_56_unused),
	.agb (main_55_56_unused),
	.ageb (altfp_compare32_1_main_55_56_out),
	.unordered (main_55_56_unused)
);


/*   %57 = fcmp olt float %44, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_55_57 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_55_57_en),
	.aeb (main_55_57_unused),
	.aneb (main_55_57_unused),
	.alb (altfp_compare32_1_main_55_57_out),
	.aleb (main_55_57_unused),
	.agb (main_55_57_unused),
	.ageb (main_55_57_unused),
	.unordered (main_55_57_unused)
);


/*   %59 = fcmp oge float %44, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_58_59 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_58_59_en),
	.aeb (main_58_59_unused),
	.aneb (main_58_59_unused),
	.alb (main_58_59_unused),
	.aleb (main_58_59_unused),
	.agb (main_58_59_unused),
	.ageb (altfp_compare32_1_main_58_59_out),
	.unordered (main_58_59_unused)
);


/*   %60 = fcmp olt float %44, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_58_60 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_58_60_en),
	.aeb (main_58_60_unused),
	.aneb (main_58_60_unused),
	.alb (altfp_compare32_1_main_58_60_out),
	.aleb (main_58_60_unused),
	.agb (main_58_60_unused),
	.ageb (main_58_60_unused),
	.unordered (main_58_60_unused)
);


/*   %62 = fcmp oge float %44, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_61_62 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_61_62_en),
	.aeb (main_61_62_unused),
	.aneb (main_61_62_unused),
	.alb (main_61_62_unused),
	.aleb (main_61_62_unused),
	.agb (main_61_62_unused),
	.ageb (altfp_compare32_1_main_61_62_out),
	.unordered (main_61_62_unused)
);


/*   %63 = fcmp olt float %44, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_61_63 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_61_63_en),
	.aeb (main_61_63_unused),
	.aneb (main_61_63_unused),
	.alb (altfp_compare32_1_main_61_63_out),
	.aleb (main_61_63_unused),
	.agb (main_61_63_unused),
	.ageb (main_61_63_unused),
	.unordered (main_61_63_unused)
);


/*   %65 = fcmp oge float %44, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_64_65 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_64_65_en),
	.aeb (main_64_65_unused),
	.aneb (main_64_65_unused),
	.alb (main_64_65_unused),
	.aleb (main_64_65_unused),
	.agb (main_64_65_unused),
	.ageb (altfp_compare32_1_main_64_65_out),
	.unordered (main_64_65_unused)
);


/*   %66 = fcmp olt float %44, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_64_66 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_64_66_en),
	.aeb (main_64_66_unused),
	.aneb (main_64_66_unused),
	.alb (altfp_compare32_1_main_64_66_out),
	.aleb (main_64_66_unused),
	.agb (main_64_66_unused),
	.ageb (main_64_66_unused),
	.unordered (main_64_66_unused)
);


/*   %68 = fcmp oge float %44, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_67_68 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_67_68_en),
	.aeb (main_67_68_unused),
	.aneb (main_67_68_unused),
	.alb (main_67_68_unused),
	.aleb (main_67_68_unused),
	.agb (main_67_68_unused),
	.ageb (altfp_compare32_1_main_67_68_out),
	.unordered (main_67_68_unused)
);


/*   %69 = fcmp olt float %44, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_67_69 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_67_69_en),
	.aeb (main_67_69_unused),
	.aneb (main_67_69_unused),
	.alb (altfp_compare32_1_main_67_69_out),
	.aleb (main_67_69_unused),
	.agb (main_67_69_unused),
	.ageb (main_67_69_unused),
	.unordered (main_67_69_unused)
);


/*   %71 = fcmp oge float %44, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_70_71 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_70_71_en),
	.aeb (main_70_71_unused),
	.aneb (main_70_71_unused),
	.alb (main_70_71_unused),
	.aleb (main_70_71_unused),
	.agb (main_70_71_unused),
	.ageb (altfp_compare32_1_main_70_71_out),
	.unordered (main_70_71_unused)
);


/*   %72 = fcmp olt float %44, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_70_72 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_70_72_en),
	.aeb (main_70_72_unused),
	.aneb (main_70_72_unused),
	.alb (altfp_compare32_1_main_70_72_out),
	.aleb (main_70_72_unused),
	.agb (main_70_72_unused),
	.ageb (main_70_72_unused),
	.unordered (main_70_72_unused)
);


/*   %74 = fcmp oge float %44, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_73_74 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_73_74_en),
	.aeb (main_73_74_unused),
	.aneb (main_73_74_unused),
	.alb (main_73_74_unused),
	.aleb (main_73_74_unused),
	.agb (main_73_74_unused),
	.ageb (altfp_compare32_1_main_73_74_out),
	.unordered (main_73_74_unused)
);


/*   %75 = fcmp olt float %44, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_73_75 (
	.dataa (main_preheader15ii_44_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_73_75_en),
	.aeb (main_73_75_unused),
	.aneb (main_73_75_unused),
	.alb (altfp_compare32_1_main_73_75_out),
	.aleb (main_73_75_unused),
	.agb (main_73_75_unused),
	.ageb (main_73_75_unused),
	.unordered (main_73_75_unused)
);


/*   %83 = fcmp olt float %82, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_preheader_83 (
	.dataa (main_preheader_82),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_preheader_83_en),
	.aeb (main_preheader_83_unused),
	.aneb (main_preheader_83_unused),
	.alb (altfp_compare32_1_main_preheader_83_out),
	.aleb (main_preheader_83_unused),
	.agb (main_preheader_83_unused),
	.ageb (main_preheader_83_unused),
	.unordered (main_preheader_83_unused)
);


/*   %85 = fcmp oge float %82, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_84_85 (
	.dataa (main_preheader_82_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_84_85_en),
	.aeb (main_84_85_unused),
	.aneb (main_84_85_unused),
	.alb (main_84_85_unused),
	.aleb (main_84_85_unused),
	.agb (main_84_85_unused),
	.ageb (altfp_compare32_1_main_84_85_out),
	.unordered (main_84_85_unused)
);


/*   %86 = fcmp olt float %82, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_84_86 (
	.dataa (main_preheader_82_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_84_86_en),
	.aeb (main_84_86_unused),
	.aneb (main_84_86_unused),
	.alb (altfp_compare32_1_main_84_86_out),
	.aleb (main_84_86_unused),
	.agb (main_84_86_unused),
	.ageb (main_84_86_unused),
	.unordered (main_84_86_unused)
);


/*   %88 = fcmp oge float %82, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_87_88 (
	.dataa (main_preheader_82_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_87_88_en),
	.aeb (main_87_88_unused),
	.aneb (main_87_88_unused),
	.alb (main_87_88_unused),
	.aleb (main_87_88_unused),
	.agb (main_87_88_unused),
	.ageb (altfp_compare32_1_main_87_88_out),
	.unordered (main_87_88_unused)
);


/*   %89 = fcmp olt float %82, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_87_89 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_87_89_en),
	.aeb (main_87_89_unused),
	.aneb (main_87_89_unused),
	.alb (altfp_compare32_1_main_87_89_out),
	.aleb (main_87_89_unused),
	.agb (main_87_89_unused),
	.ageb (main_87_89_unused),
	.unordered (main_87_89_unused)
);


/*   %92 = fcmp oge float %82, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_90_92 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_90_92_en),
	.aeb (main_90_92_unused),
	.aneb (main_90_92_unused),
	.alb (main_90_92_unused),
	.aleb (main_90_92_unused),
	.agb (main_90_92_unused),
	.ageb (altfp_compare32_1_main_90_92_out),
	.unordered (main_90_92_unused)
);


/*   %93 = fcmp olt float %82, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_90_93 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_90_93_en),
	.aeb (main_90_93_unused),
	.aneb (main_90_93_unused),
	.alb (altfp_compare32_1_main_90_93_out),
	.aleb (main_90_93_unused),
	.agb (main_90_93_unused),
	.ageb (main_90_93_unused),
	.unordered (main_90_93_unused)
);


/*   %95 = fcmp oge float %82, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_94_95 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_94_95_en),
	.aeb (main_94_95_unused),
	.aneb (main_94_95_unused),
	.alb (main_94_95_unused),
	.aleb (main_94_95_unused),
	.agb (main_94_95_unused),
	.ageb (altfp_compare32_1_main_94_95_out),
	.unordered (main_94_95_unused)
);


/*   %96 = fcmp olt float %82, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_94_96 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_94_96_en),
	.aeb (main_94_96_unused),
	.aneb (main_94_96_unused),
	.alb (altfp_compare32_1_main_94_96_out),
	.aleb (main_94_96_unused),
	.agb (main_94_96_unused),
	.ageb (main_94_96_unused),
	.unordered (main_94_96_unused)
);


/*   %98 = fcmp oge float %82, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_97_98 (
	.dataa (main_preheader_82_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_97_98_en),
	.aeb (main_97_98_unused),
	.aneb (main_97_98_unused),
	.alb (main_97_98_unused),
	.aleb (main_97_98_unused),
	.agb (main_97_98_unused),
	.ageb (altfp_compare32_1_main_97_98_out),
	.unordered (main_97_98_unused)
);


/*   %99 = fcmp olt double %91, -2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_97_99 (
	.dataa (main_90_91_reg),
	.datab (64'hBFC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_97_99_en),
	.aeb (main_97_99_unused),
	.aneb (main_97_99_unused),
	.alb (altfp_compare64_1_main_97_99_out),
	.aleb (main_97_99_unused),
	.agb (main_97_99_unused),
	.ageb (main_97_99_unused),
	.unordered (main_97_99_unused)
);


/*   %101 = fcmp oge double %91, -2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_100_101 (
	.dataa (main_90_91_reg),
	.datab (64'hBFC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_100_101_en),
	.aeb (main_100_101_unused),
	.aneb (main_100_101_unused),
	.alb (main_100_101_unused),
	.aleb (main_100_101_unused),
	.agb (main_100_101_unused),
	.ageb (altfp_compare64_1_main_100_101_out),
	.unordered (main_100_101_unused)
);


/*   %102 = fcmp olt float %82, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_100_102 (
	.dataa (main_preheader_82_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_100_102_en),
	.aeb (main_100_102_unused),
	.aneb (main_100_102_unused),
	.alb (altfp_compare32_1_main_100_102_out),
	.aleb (main_100_102_unused),
	.agb (main_100_102_unused),
	.ageb (main_100_102_unused),
	.unordered (main_100_102_unused)
);


/*   %104 = fcmp oge float %82, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_103_104 (
	.dataa (main_preheader_82_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_103_104_en),
	.aeb (main_103_104_unused),
	.aneb (main_103_104_unused),
	.alb (main_103_104_unused),
	.aleb (main_103_104_unused),
	.agb (main_103_104_unused),
	.ageb (altfp_compare32_1_main_103_104_out),
	.unordered (main_103_104_unused)
);


/*   %105 = fcmp olt double %91, 2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_103_105 (
	.dataa (main_90_91_reg),
	.datab (64'h3FC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_103_105_en),
	.aeb (main_103_105_unused),
	.aneb (main_103_105_unused),
	.alb (altfp_compare64_1_main_103_105_out),
	.aleb (main_103_105_unused),
	.agb (main_103_105_unused),
	.ageb (main_103_105_unused),
	.unordered (main_103_105_unused)
);


/*   %107 = fcmp oge double %91, 2.000000e-01*/
altfp_compare64_1 altfp_compare64_1_main_106_107 (
	.dataa (main_90_91_reg),
	.datab (64'h3FC999999999999A),
	.clock (clk),
	.clk_en (altfp_main_106_107_en),
	.aeb (main_106_107_unused),
	.aneb (main_106_107_unused),
	.alb (main_106_107_unused),
	.aleb (main_106_107_unused),
	.agb (main_106_107_unused),
	.ageb (altfp_compare64_1_main_106_107_out),
	.unordered (main_106_107_unused)
);


/*   %108 = fcmp olt float %82, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_106_108 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_106_108_en),
	.aeb (main_106_108_unused),
	.aneb (main_106_108_unused),
	.alb (altfp_compare32_1_main_106_108_out),
	.aleb (main_106_108_unused),
	.agb (main_106_108_unused),
	.ageb (main_106_108_unused),
	.unordered (main_106_108_unused)
);


/*   %110 = fcmp oge float %82, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_109_110 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_109_110_en),
	.aeb (main_109_110_unused),
	.aneb (main_109_110_unused),
	.alb (main_109_110_unused),
	.aleb (main_109_110_unused),
	.agb (main_109_110_unused),
	.ageb (altfp_compare32_1_main_109_110_out),
	.unordered (main_109_110_unused)
);


/*   %111 = fcmp olt float %82, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_109_111 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_109_111_en),
	.aeb (main_109_111_unused),
	.aneb (main_109_111_unused),
	.alb (altfp_compare32_1_main_109_111_out),
	.aleb (main_109_111_unused),
	.agb (main_109_111_unused),
	.ageb (main_109_111_unused),
	.unordered (main_109_111_unused)
);


/*   %113 = fcmp oge float %82, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_112_113 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_112_113_en),
	.aeb (main_112_113_unused),
	.aneb (main_112_113_unused),
	.alb (main_112_113_unused),
	.aleb (main_112_113_unused),
	.agb (main_112_113_unused),
	.ageb (altfp_compare32_1_main_112_113_out),
	.unordered (main_112_113_unused)
);


/*   %114 = fcmp olt float %82, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_112_114 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_112_114_en),
	.aeb (main_112_114_unused),
	.aneb (main_112_114_unused),
	.alb (altfp_compare32_1_main_112_114_out),
	.aleb (main_112_114_unused),
	.agb (main_112_114_unused),
	.ageb (main_112_114_unused),
	.unordered (main_112_114_unused)
);


/*   %116 = fcmp oge float %82, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_115_116 (
	.dataa (main_preheader_82_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_115_116_en),
	.aeb (main_115_116_unused),
	.aneb (main_115_116_unused),
	.alb (main_115_116_unused),
	.aleb (main_115_116_unused),
	.agb (main_115_116_unused),
	.ageb (altfp_compare32_1_main_115_116_out),
	.unordered (main_115_116_unused)
);


/*   %117 = fcmp olt float %82, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_115_117 (
	.dataa (main_preheader_82_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_115_117_en),
	.aeb (main_115_117_unused),
	.aneb (main_115_117_unused),
	.alb (altfp_compare32_1_main_115_117_out),
	.aleb (main_115_117_unused),
	.agb (main_115_117_unused),
	.ageb (main_115_117_unused),
	.unordered (main_115_117_unused)
);


/*   %119 = fcmp oge float %82, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_118_119 (
	.dataa (main_preheader_82_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_118_119_en),
	.aeb (main_118_119_unused),
	.aneb (main_118_119_unused),
	.alb (main_118_119_unused),
	.aleb (main_118_119_unused),
	.agb (main_118_119_unused),
	.ageb (altfp_compare32_1_main_118_119_out),
	.unordered (main_118_119_unused)
);


/*   %120 = fcmp olt float %82, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_118_120 (
	.dataa (main_preheader_82_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_118_120_en),
	.aeb (main_118_120_unused),
	.aneb (main_118_120_unused),
	.alb (altfp_compare32_1_main_118_120_out),
	.aleb (main_118_120_unused),
	.agb (main_118_120_unused),
	.ageb (main_118_120_unused),
	.unordered (main_118_120_unused)
);


/*   %128 = fcmp olt float %127, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_preheader1_128 (
	.dataa (main_preheader1_127),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_preheader1_128_en),
	.aeb (main_preheader1_128_unused),
	.aneb (main_preheader1_128_unused),
	.alb (altfp_compare32_1_main_preheader1_128_out),
	.aleb (main_preheader1_128_unused),
	.agb (main_preheader1_128_unused),
	.ageb (main_preheader1_128_unused),
	.unordered (main_preheader1_128_unused)
);


/*   %130 = fcmp oge float %127, -3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_129_130 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hC0400000),
	.clock (clk),
	.clk_en (altfp_main_129_130_en),
	.aeb (main_129_130_unused),
	.aneb (main_129_130_unused),
	.alb (main_129_130_unused),
	.aleb (main_129_130_unused),
	.agb (main_129_130_unused),
	.ageb (altfp_compare32_1_main_129_130_out),
	.unordered (main_129_130_unused)
);


/*   %131 = fcmp olt float %127, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_129_131 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_129_131_en),
	.aeb (main_129_131_unused),
	.aneb (main_129_131_unused),
	.alb (altfp_compare32_1_main_129_131_out),
	.aleb (main_129_131_unused),
	.agb (main_129_131_unused),
	.ageb (main_129_131_unused),
	.unordered (main_129_131_unused)
);


/*   %133 = fcmp oge float %127, -2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_132_133 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hC0000000),
	.clock (clk),
	.clk_en (altfp_main_132_133_en),
	.aeb (main_132_133_unused),
	.aneb (main_132_133_unused),
	.alb (main_132_133_unused),
	.aleb (main_132_133_unused),
	.agb (main_132_133_unused),
	.ageb (altfp_compare32_1_main_132_133_out),
	.unordered (main_132_133_unused)
);


/*   %134 = fcmp olt float %127, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_132_134 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_132_134_en),
	.aeb (main_132_134_unused),
	.aneb (main_132_134_unused),
	.alb (altfp_compare32_1_main_132_134_out),
	.aleb (main_132_134_unused),
	.agb (main_132_134_unused),
	.ageb (main_132_134_unused),
	.unordered (main_132_134_unused)
);


/*   %136 = fcmp oge float %127, -1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_135_136 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBFC00000),
	.clock (clk),
	.clk_en (altfp_main_135_136_en),
	.aeb (main_135_136_unused),
	.aneb (main_135_136_unused),
	.alb (main_135_136_unused),
	.aleb (main_135_136_unused),
	.agb (main_135_136_unused),
	.ageb (altfp_compare32_1_main_135_136_out),
	.unordered (main_135_136_unused)
);


/*   %137 = fcmp olt float %127, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_135_137 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_135_137_en),
	.aeb (main_135_137_unused),
	.aneb (main_135_137_unused),
	.alb (altfp_compare32_1_main_135_137_out),
	.aleb (main_135_137_unused),
	.agb (main_135_137_unused),
	.ageb (main_135_137_unused),
	.unordered (main_135_137_unused)
);


/*   %139 = fcmp oge float %127, -1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_138_139 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBF800000),
	.clock (clk),
	.clk_en (altfp_main_138_139_en),
	.aeb (main_138_139_unused),
	.aneb (main_138_139_unused),
	.alb (main_138_139_unused),
	.aleb (main_138_139_unused),
	.agb (main_138_139_unused),
	.ageb (altfp_compare32_1_main_138_139_out),
	.unordered (main_138_139_unused)
);


/*   %140 = fcmp olt float %127, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_138_140 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_138_140_en),
	.aeb (main_138_140_unused),
	.aneb (main_138_140_unused),
	.alb (altfp_compare32_1_main_138_140_out),
	.aleb (main_138_140_unused),
	.agb (main_138_140_unused),
	.ageb (main_138_140_unused),
	.unordered (main_138_140_unused)
);


/*   %142 = fcmp oge float %127, -5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_141_142 (
	.dataa (main_preheader1_127_reg),
	.datab (32'hBF000000),
	.clock (clk),
	.clk_en (altfp_main_141_142_en),
	.aeb (main_141_142_unused),
	.aneb (main_141_142_unused),
	.alb (main_141_142_unused),
	.aleb (main_141_142_unused),
	.agb (main_141_142_unused),
	.ageb (altfp_compare32_1_main_141_142_out),
	.unordered (main_141_142_unused)
);


/*   %143 = fcmp olt float %127, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_141_143 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_141_143_en),
	.aeb (main_141_143_unused),
	.aneb (main_141_143_unused),
	.alb (altfp_compare32_1_main_141_143_out),
	.aleb (main_141_143_unused),
	.agb (main_141_143_unused),
	.ageb (main_141_143_unused),
	.unordered (main_141_143_unused)
);


/*   %145 = fcmp oge float %127, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_144_145 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_144_145_en),
	.aeb (main_144_145_unused),
	.aneb (main_144_145_unused),
	.alb (main_144_145_unused),
	.aleb (main_144_145_unused),
	.agb (main_144_145_unused),
	.ageb (altfp_compare32_1_main_144_145_out),
	.unordered (main_144_145_unused)
);


/*   %146 = fcmp olt float %127, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_144_146 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_144_146_en),
	.aeb (main_144_146_unused),
	.aneb (main_144_146_unused),
	.alb (altfp_compare32_1_main_144_146_out),
	.aleb (main_144_146_unused),
	.agb (main_144_146_unused),
	.ageb (main_144_146_unused),
	.unordered (main_144_146_unused)
);


/*   %148 = fcmp oge float %127, 5.000000e-01*/
altfp_compare32_1 altfp_compare32_1_main_147_148 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3F000000),
	.clock (clk),
	.clk_en (altfp_main_147_148_en),
	.aeb (main_147_148_unused),
	.aneb (main_147_148_unused),
	.alb (main_147_148_unused),
	.aleb (main_147_148_unused),
	.agb (main_147_148_unused),
	.ageb (altfp_compare32_1_main_147_148_out),
	.unordered (main_147_148_unused)
);


/*   %149 = fcmp olt float %127, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_147_149 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_147_149_en),
	.aeb (main_147_149_unused),
	.aneb (main_147_149_unused),
	.alb (altfp_compare32_1_main_147_149_out),
	.aleb (main_147_149_unused),
	.agb (main_147_149_unused),
	.ageb (main_147_149_unused),
	.unordered (main_147_149_unused)
);


/*   %151 = fcmp oge float %127, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_150_151 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_150_151_en),
	.aeb (main_150_151_unused),
	.aneb (main_150_151_unused),
	.alb (main_150_151_unused),
	.aleb (main_150_151_unused),
	.agb (main_150_151_unused),
	.ageb (altfp_compare32_1_main_150_151_out),
	.unordered (main_150_151_unused)
);


/*   %152 = fcmp olt float %127, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_150_152 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_150_152_en),
	.aeb (main_150_152_unused),
	.aneb (main_150_152_unused),
	.alb (altfp_compare32_1_main_150_152_out),
	.aleb (main_150_152_unused),
	.agb (main_150_152_unused),
	.ageb (main_150_152_unused),
	.unordered (main_150_152_unused)
);


/*   %154 = fcmp oge float %127, 1.500000e+00*/
altfp_compare32_1 altfp_compare32_1_main_153_154 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h3FC00000),
	.clock (clk),
	.clk_en (altfp_main_153_154_en),
	.aeb (main_153_154_unused),
	.aneb (main_153_154_unused),
	.alb (main_153_154_unused),
	.aleb (main_153_154_unused),
	.agb (main_153_154_unused),
	.ageb (altfp_compare32_1_main_153_154_out),
	.unordered (main_153_154_unused)
);


/*   %155 = fcmp olt float %127, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_153_155 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_153_155_en),
	.aeb (main_153_155_unused),
	.aneb (main_153_155_unused),
	.alb (altfp_compare32_1_main_153_155_out),
	.aleb (main_153_155_unused),
	.agb (main_153_155_unused),
	.ageb (main_153_155_unused),
	.unordered (main_153_155_unused)
);


/*   %157 = fcmp oge float %127, 2.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_156_157 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h40000000),
	.clock (clk),
	.clk_en (altfp_main_156_157_en),
	.aeb (main_156_157_unused),
	.aneb (main_156_157_unused),
	.alb (main_156_157_unused),
	.aleb (main_156_157_unused),
	.agb (main_156_157_unused),
	.ageb (altfp_compare32_1_main_156_157_out),
	.unordered (main_156_157_unused)
);


/*   %158 = fcmp olt float %127, 3.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_156_158 (
	.dataa (main_preheader1_127_reg),
	.datab (32'h40400000),
	.clock (clk),
	.clk_en (altfp_main_156_158_en),
	.aeb (main_156_158_unused),
	.aneb (main_156_158_unused),
	.alb (altfp_compare32_1_main_156_158_out),
	.aleb (main_156_158_unused),
	.agb (main_156_158_unused),
	.ageb (main_156_158_unused),
	.unordered (main_156_158_unused)
);


/*   %176 = fcmp ogt float %175, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_rotateexiti_176 (
	.dataa (main_rotateexiti_175),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_rotateexiti_176_en),
	.aeb (main_rotateexiti_176_unused),
	.aneb (main_rotateexiti_176_unused),
	.alb (main_rotateexiti_176_unused),
	.aleb (main_rotateexiti_176_unused),
	.agb (altfp_compare32_1_main_rotateexiti_176_out),
	.ageb (main_rotateexiti_176_unused),
	.unordered (main_rotateexiti_176_unused)
);


/*   %177 = fcmp olt float %175, 2.000000e+01*/
altfp_compare32_1 altfp_compare32_1_main_rotateexiti_177 (
	.dataa (main_rotateexiti_175),
	.datab (32'h41A00000),
	.clock (clk),
	.clk_en (altfp_main_rotateexiti_177_en),
	.aeb (main_rotateexiti_177_unused),
	.aneb (main_rotateexiti_177_unused),
	.alb (altfp_compare32_1_main_rotateexiti_177_out),
	.aleb (main_rotateexiti_177_unused),
	.agb (main_rotateexiti_177_unused),
	.ageb (main_rotateexiti_177_unused),
	.unordered (main_rotateexiti_177_unused)
);


/*   %179 = fcmp oge float %175, 2.000000e+01*/
altfp_compare32_1 altfp_compare32_1_main_178_179 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h41A00000),
	.clock (clk),
	.clk_en (altfp_main_178_179_en),
	.aeb (main_178_179_unused),
	.aneb (main_178_179_unused),
	.alb (main_178_179_unused),
	.aleb (main_178_179_unused),
	.agb (main_178_179_unused),
	.ageb (altfp_compare32_1_main_178_179_out),
	.unordered (main_178_179_unused)
);


/*   %180 = fcmp olt float %175, 4.000000e+01*/
altfp_compare32_1 altfp_compare32_1_main_178_180 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h42200000),
	.clock (clk),
	.clk_en (altfp_main_178_180_en),
	.aeb (main_178_180_unused),
	.aneb (main_178_180_unused),
	.alb (altfp_compare32_1_main_178_180_out),
	.aleb (main_178_180_unused),
	.agb (main_178_180_unused),
	.ageb (main_178_180_unused),
	.unordered (main_178_180_unused)
);


/*   %182 = fcmp oge float %175, 4.000000e+01*/
altfp_compare32_1 altfp_compare32_1_main_181_182 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h42200000),
	.clock (clk),
	.clk_en (altfp_main_181_182_en),
	.aeb (main_181_182_unused),
	.aneb (main_181_182_unused),
	.alb (main_181_182_unused),
	.aleb (main_181_182_unused),
	.agb (main_181_182_unused),
	.ageb (altfp_compare32_1_main_181_182_out),
	.unordered (main_181_182_unused)
);


/*   %183 = fcmp olt float %175, 7.500000e+01*/
altfp_compare32_1 altfp_compare32_1_main_181_183 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h42960000),
	.clock (clk),
	.clk_en (altfp_main_181_183_en),
	.aeb (main_181_183_unused),
	.aneb (main_181_183_unused),
	.alb (altfp_compare32_1_main_181_183_out),
	.aleb (main_181_183_unused),
	.agb (main_181_183_unused),
	.ageb (main_181_183_unused),
	.unordered (main_181_183_unused)
);


/*   %185 = fcmp oge float %175, 7.500000e+01*/
altfp_compare32_1 altfp_compare32_1_main_184_185 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h42960000),
	.clock (clk),
	.clk_en (altfp_main_184_185_en),
	.aeb (main_184_185_unused),
	.aneb (main_184_185_unused),
	.alb (main_184_185_unused),
	.aleb (main_184_185_unused),
	.agb (main_184_185_unused),
	.ageb (altfp_compare32_1_main_184_185_out),
	.unordered (main_184_185_unused)
);


/*   %186 = fcmp olt float %175, 1.500000e+02*/
altfp_compare32_1 altfp_compare32_1_main_184_186 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h43160000),
	.clock (clk),
	.clk_en (altfp_main_184_186_en),
	.aeb (main_184_186_unused),
	.aneb (main_184_186_unused),
	.alb (altfp_compare32_1_main_184_186_out),
	.aleb (main_184_186_unused),
	.agb (main_184_186_unused),
	.ageb (main_184_186_unused),
	.unordered (main_184_186_unused)
);


/*   %188 = fcmp oge float %175, 1.500000e+02*/
altfp_compare32_1 altfp_compare32_1_main_187_188 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h43160000),
	.clock (clk),
	.clk_en (altfp_main_187_188_en),
	.aeb (main_187_188_unused),
	.aneb (main_187_188_unused),
	.alb (main_187_188_unused),
	.aleb (main_187_188_unused),
	.agb (main_187_188_unused),
	.ageb (altfp_compare32_1_main_187_188_out),
	.unordered (main_187_188_unused)
);


/*   %189 = fcmp olt float %175, 2.500000e+02*/
altfp_compare32_1 altfp_compare32_1_main_187_189 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h437A0000),
	.clock (clk),
	.clk_en (altfp_main_187_189_en),
	.aeb (main_187_189_unused),
	.aneb (main_187_189_unused),
	.alb (altfp_compare32_1_main_187_189_out),
	.aleb (main_187_189_unused),
	.agb (main_187_189_unused),
	.ageb (main_187_189_unused),
	.unordered (main_187_189_unused)
);


/*   %191 = fcmp oge float %175, 2.500000e+02*/
altfp_compare32_1 altfp_compare32_1_main_190_191 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h437A0000),
	.clock (clk),
	.clk_en (altfp_main_190_191_en),
	.aeb (main_190_191_unused),
	.aneb (main_190_191_unused),
	.alb (main_190_191_unused),
	.aleb (main_190_191_unused),
	.agb (main_190_191_unused),
	.ageb (altfp_compare32_1_main_190_191_out),
	.unordered (main_190_191_unused)
);


/*   %192 = fcmp olt float %175, 5.000000e+02*/
altfp_compare32_1 altfp_compare32_1_main_190_192 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h43FA0000),
	.clock (clk),
	.clk_en (altfp_main_190_192_en),
	.aeb (main_190_192_unused),
	.aneb (main_190_192_unused),
	.alb (altfp_compare32_1_main_190_192_out),
	.aleb (main_190_192_unused),
	.agb (main_190_192_unused),
	.ageb (main_190_192_unused),
	.unordered (main_190_192_unused)
);


/*   %194 = fcmp oge float %175, 5.000000e+02*/
altfp_compare32_1 altfp_compare32_1_main_193_194 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h43FA0000),
	.clock (clk),
	.clk_en (altfp_main_193_194_en),
	.aeb (main_193_194_unused),
	.aneb (main_193_194_unused),
	.alb (main_193_194_unused),
	.aleb (main_193_194_unused),
	.agb (main_193_194_unused),
	.ageb (altfp_compare32_1_main_193_194_out),
	.unordered (main_193_194_unused)
);


/*   %195 = fcmp olt float %175, 1.000000e+03*/
altfp_compare32_1 altfp_compare32_1_main_193_195 (
	.dataa (main_rotateexiti_175_reg),
	.datab (32'h447A0000),
	.clock (clk),
	.clk_en (altfp_main_193_195_en),
	.aeb (main_193_195_unused),
	.aneb (main_193_195_unused),
	.alb (altfp_compare32_1_main_193_195_out),
	.aleb (main_193_195_unused),
	.agb (main_193_195_unused),
	.ageb (main_193_195_unused),
	.unordered (main_193_195_unused)
);



/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %fastica.exit*/
	/*   %200 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %2) #1*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_546)) begin
		$write("The unmixing vector is : [%d %d]\n", main_1_3_reg, main_1_2_reg);
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_3_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_2_reg) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__100_289:
		next_state = LEGUP_F_main_BB__100_290;
LEGUP_F_main_BB__100_290:
	if ((main_100_orcond5i6ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_100_orcond5i6ii == 1'd0))
		next_state = LEGUP_F_main_BB__103_291;
LEGUP_F_main_BB__103_291:
		next_state = LEGUP_F_main_BB__103_292;
LEGUP_F_main_BB__103_292:
	if ((main_103_orcond15i7ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_103_orcond15i7ii == 1'd0))
		next_state = LEGUP_F_main_BB__106_293;
LEGUP_F_main_BB__106_293:
		next_state = LEGUP_F_main_BB__106_294;
LEGUP_F_main_BB__106_294:
	if ((main_106_orcond16iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_106_orcond16iii == 1'd0))
		next_state = LEGUP_F_main_BB__109_295;
LEGUP_F_main_BB__109_295:
		next_state = LEGUP_F_main_BB__109_296;
LEGUP_F_main_BB__109_296:
	if ((main_109_orcond7i8ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_109_orcond7i8ii == 1'd0))
		next_state = LEGUP_F_main_BB__112_297;
LEGUP_F_main_BB__112_297:
		next_state = LEGUP_F_main_BB__112_298;
LEGUP_F_main_BB__112_298:
	if ((main_112_orcond17iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_112_orcond17iii == 1'd0))
		next_state = LEGUP_F_main_BB__115_299;
LEGUP_F_main_BB__115_299:
		next_state = LEGUP_F_main_BB__115_300;
LEGUP_F_main_BB__115_300:
	if ((main_115_orcond9i9ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_115_orcond9i9ii == 1'd0))
		next_state = LEGUP_F_main_BB__118_301;
LEGUP_F_main_BB__118_301:
		next_state = LEGUP_F_main_BB__118_302;
LEGUP_F_main_BB__118_302:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
LEGUP_F_main_BB__129_347:
		next_state = LEGUP_F_main_BB__129_348;
LEGUP_F_main_BB__129_348:
	if ((main_129_orcondi1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_129_orcondi1ii == 1'd0))
		next_state = LEGUP_F_main_BB__132_349;
LEGUP_F_main_BB__132_349:
		next_state = LEGUP_F_main_BB__132_350;
LEGUP_F_main_BB__132_350:
	if ((main_132_orcond12i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_132_orcond12i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__135_351;
LEGUP_F_main_BB__135_351:
		next_state = LEGUP_F_main_BB__135_352;
LEGUP_F_main_BB__135_352:
	if ((main_135_orcond3i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_135_orcond3i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__138_353;
LEGUP_F_main_BB__138_353:
		next_state = LEGUP_F_main_BB__138_354;
LEGUP_F_main_BB__138_354:
	if ((main_138_orcond13i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_138_orcond13i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__141_355;
LEGUP_F_main_BB__13_42:
		next_state = LEGUP_F_main_BB__13_43;
LEGUP_F_main_BB__13_43:
		next_state = LEGUP_F_main_BB__13_44;
LEGUP_F_main_BB__13_44:
		next_state = LEGUP_F_main_BB__13_45;
LEGUP_F_main_BB__13_45:
		next_state = LEGUP_F_main_BB__13_46;
LEGUP_F_main_BB__13_46:
		next_state = LEGUP_F_main_BB__13_47;
LEGUP_F_main_BB__13_47:
		next_state = LEGUP_F_main_BB__13_48;
LEGUP_F_main_BB__13_48:
		next_state = LEGUP_F_main_BB__13_49;
LEGUP_F_main_BB__13_49:
		next_state = LEGUP_F_main_BB__13_50;
LEGUP_F_main_BB__13_50:
		next_state = LEGUP_F_main_BB__13_51;
LEGUP_F_main_BB__13_51:
		next_state = LEGUP_F_main_BB__13_52;
LEGUP_F_main_BB__13_52:
		next_state = LEGUP_F_main_BB__13_53;
LEGUP_F_main_BB__13_53:
		next_state = LEGUP_F_main_BB__13_54;
LEGUP_F_main_BB__13_54:
		next_state = LEGUP_F_main_BB__13_55;
LEGUP_F_main_BB__13_55:
		next_state = LEGUP_F_main_BB__13_56;
LEGUP_F_main_BB__13_56:
		next_state = LEGUP_F_main_BB__15_57;
LEGUP_F_main_BB__141_355:
		next_state = LEGUP_F_main_BB__141_356;
LEGUP_F_main_BB__141_356:
	if ((main_141_orcond5i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_141_orcond5i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__144_357;
LEGUP_F_main_BB__144_357:
		next_state = LEGUP_F_main_BB__144_358;
LEGUP_F_main_BB__144_358:
	if ((main_144_orcond14i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_144_orcond14i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__147_359;
LEGUP_F_main_BB__147_359:
		next_state = LEGUP_F_main_BB__147_360;
LEGUP_F_main_BB__147_360:
	if ((main_147_orcond7i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_147_orcond7i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__150_361;
LEGUP_F_main_BB__150_361:
		next_state = LEGUP_F_main_BB__150_362;
LEGUP_F_main_BB__150_362:
	if ((main_150_orcond15i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_150_orcond15i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__153_363;
LEGUP_F_main_BB__153_363:
		next_state = LEGUP_F_main_BB__153_364;
LEGUP_F_main_BB__153_364:
	if ((main_153_orcond9i1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_153_orcond9i1ii == 1'd0))
		next_state = LEGUP_F_main_BB__156_365;
LEGUP_F_main_BB__156_365:
		next_state = LEGUP_F_main_BB__156_366;
LEGUP_F_main_BB__156_366:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
LEGUP_F_main_BB__15_57:
		next_state = LEGUP_F_main_BB__15_58;
LEGUP_F_main_BB__15_58:
		next_state = LEGUP_F_main_BB__15_59;
LEGUP_F_main_BB__15_59:
		next_state = LEGUP_F_main_BB__15_60;
LEGUP_F_main_BB__15_60:
		next_state = LEGUP_F_main_BB__15_61;
LEGUP_F_main_BB__15_61:
		next_state = LEGUP_F_main_BB__15_62;
LEGUP_F_main_BB__15_62:
		next_state = LEGUP_F_main_BB__15_63;
LEGUP_F_main_BB__15_63:
		next_state = LEGUP_F_main_BB__15_64;
LEGUP_F_main_BB__15_64:
		next_state = LEGUP_F_main_BB__15_65;
LEGUP_F_main_BB__15_65:
		next_state = LEGUP_F_main_BB__15_66;
LEGUP_F_main_BB__15_66:
		next_state = LEGUP_F_main_BB__15_67;
LEGUP_F_main_BB__15_67:
		next_state = LEGUP_F_main_BB__15_68;
LEGUP_F_main_BB__15_68:
		next_state = LEGUP_F_main_BB__15_69;
LEGUP_F_main_BB__15_69:
		next_state = LEGUP_F_main_BB__15_70;
LEGUP_F_main_BB__15_70:
		next_state = LEGUP_F_main_BB__15_71;
LEGUP_F_main_BB__15_71:
		next_state = LEGUP_F_main_BB__15_72;
LEGUP_F_main_BB__15_72:
	if ((main_15_18 == 1'd1))
		next_state = LEGUP_F_main_BB__19_73;
	else if ((main_15_18 == 1'd0))
		next_state = LEGUP_F_main_BB__25_104;
LEGUP_F_main_BB__178_496:
		next_state = LEGUP_F_main_BB__178_497;
LEGUP_F_main_BB__178_497:
	if ((main_178_orcond3iiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_178_orcond3iiii == 1'd0))
		next_state = LEGUP_F_main_BB__181_498;
LEGUP_F_main_BB__181_498:
		next_state = LEGUP_F_main_BB__181_499;
LEGUP_F_main_BB__181_499:
	if ((main_181_orcond5iiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_181_orcond5iiii == 1'd0))
		next_state = LEGUP_F_main_BB__184_500;
LEGUP_F_main_BB__184_500:
		next_state = LEGUP_F_main_BB__184_501;
LEGUP_F_main_BB__184_501:
	if ((main_184_orcond7iiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_184_orcond7iiii == 1'd0))
		next_state = LEGUP_F_main_BB__187_502;
LEGUP_F_main_BB__187_502:
		next_state = LEGUP_F_main_BB__187_503;
LEGUP_F_main_BB__187_503:
	if ((main_187_orcond9iiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_187_orcond9iiii == 1'd0))
		next_state = LEGUP_F_main_BB__190_504;
LEGUP_F_main_BB__190_504:
		next_state = LEGUP_F_main_BB__190_505;
LEGUP_F_main_BB__190_505:
	if ((main_190_orcond11iiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_190_orcond11iiii == 1'd0))
		next_state = LEGUP_F_main_BB__193_506;
LEGUP_F_main_BB__193_506:
		next_state = LEGUP_F_main_BB__193_507;
LEGUP_F_main_BB__193_507:
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
LEGUP_F_main_BB__19_73:
	if ((main_1_12_reg == 1'd1))
		next_state = LEGUP_F_main_BB__22_89;
	else if ((main_1_12_reg == 1'd0))
		next_state = LEGUP_F_main_BB__20_74;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_10:
		next_state = LEGUP_F_main_BB__1_11;
LEGUP_F_main_BB__1_11:
		next_state = LEGUP_F_main_BB__1_12;
LEGUP_F_main_BB__1_12:
		next_state = LEGUP_F_main_BB__1_13;
LEGUP_F_main_BB__1_13:
		next_state = LEGUP_F_main_BB__1_14;
LEGUP_F_main_BB__1_14:
		next_state = LEGUP_F_main_BB__1_15;
LEGUP_F_main_BB__1_15:
		next_state = LEGUP_F_main_BB__1_16;
LEGUP_F_main_BB__1_16:
		next_state = LEGUP_F_main_BB__1_17;
LEGUP_F_main_BB__1_17:
		next_state = LEGUP_F_main_BB__1_18;
LEGUP_F_main_BB__1_18:
		next_state = LEGUP_F_main_BB__1_19;
LEGUP_F_main_BB__1_19:
		next_state = LEGUP_F_main_BB__1_20;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_20:
		next_state = LEGUP_F_main_BB__1_21;
LEGUP_F_main_BB__1_21:
		next_state = LEGUP_F_main_BB__1_22;
LEGUP_F_main_BB__1_22:
		next_state = LEGUP_F_main_BB__1_23;
LEGUP_F_main_BB__1_23:
		next_state = LEGUP_F_main_BB__1_24;
LEGUP_F_main_BB__1_24:
		next_state = LEGUP_F_main_BB__1_25;
LEGUP_F_main_BB__1_25:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__1_26:
		next_state = LEGUP_F_main_BB__1_27;
LEGUP_F_main_BB__1_27:
		next_state = LEGUP_F_main_BB__1_28;
LEGUP_F_main_BB__1_28:
		next_state = LEGUP_F_main_BB__1_29;
LEGUP_F_main_BB__1_29:
		next_state = LEGUP_F_main_BB__1_30;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_30:
		next_state = LEGUP_F_main_BB__1_31;
LEGUP_F_main_BB__1_31:
		next_state = LEGUP_F_main_BB__1_32;
LEGUP_F_main_BB__1_32:
		next_state = LEGUP_F_main_BB__1_33;
LEGUP_F_main_BB__1_33:
		next_state = LEGUP_F_main_BB__1_34;
LEGUP_F_main_BB__1_34:
		next_state = LEGUP_F_main_BB__1_35;
LEGUP_F_main_BB__1_35:
		next_state = LEGUP_F_main_BB__1_36;
LEGUP_F_main_BB__1_36:
		next_state = LEGUP_F_main_BB__1_37;
LEGUP_F_main_BB__1_37:
		next_state = LEGUP_F_main_BB__1_38;
LEGUP_F_main_BB__1_38:
		next_state = LEGUP_F_main_BB__1_39;
LEGUP_F_main_BB__1_39:
		next_state = LEGUP_F_main_BB__1_40;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_40:
		next_state = LEGUP_F_main_BB__1_41;
LEGUP_F_main_BB__1_41:
	if ((main_1_12 == 1'd1))
		next_state = LEGUP_F_main_BB__15_57;
	else if ((main_1_12 == 1'd0))
		next_state = LEGUP_F_main_BB__13_42;
LEGUP_F_main_BB__1_5:
		next_state = LEGUP_F_main_BB__1_6;
LEGUP_F_main_BB__1_6:
		next_state = LEGUP_F_main_BB__1_7;
LEGUP_F_main_BB__1_7:
		next_state = LEGUP_F_main_BB__1_8;
LEGUP_F_main_BB__1_8:
		next_state = LEGUP_F_main_BB__1_9;
LEGUP_F_main_BB__1_9:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__20_74:
		next_state = LEGUP_F_main_BB__20_75;
LEGUP_F_main_BB__20_75:
		next_state = LEGUP_F_main_BB__20_76;
LEGUP_F_main_BB__20_76:
		next_state = LEGUP_F_main_BB__20_77;
LEGUP_F_main_BB__20_77:
		next_state = LEGUP_F_main_BB__20_78;
LEGUP_F_main_BB__20_78:
		next_state = LEGUP_F_main_BB__20_79;
LEGUP_F_main_BB__20_79:
		next_state = LEGUP_F_main_BB__20_80;
LEGUP_F_main_BB__20_80:
		next_state = LEGUP_F_main_BB__20_81;
LEGUP_F_main_BB__20_81:
		next_state = LEGUP_F_main_BB__20_82;
LEGUP_F_main_BB__20_82:
		next_state = LEGUP_F_main_BB__20_83;
LEGUP_F_main_BB__20_83:
		next_state = LEGUP_F_main_BB__20_84;
LEGUP_F_main_BB__20_84:
		next_state = LEGUP_F_main_BB__20_85;
LEGUP_F_main_BB__20_85:
		next_state = LEGUP_F_main_BB__20_86;
LEGUP_F_main_BB__20_86:
		next_state = LEGUP_F_main_BB__20_87;
LEGUP_F_main_BB__20_87:
		next_state = LEGUP_F_main_BB__20_88;
LEGUP_F_main_BB__20_88:
		next_state = LEGUP_F_main_BB__22_89;
LEGUP_F_main_BB__22_100:
		next_state = LEGUP_F_main_BB__22_101;
LEGUP_F_main_BB__22_101:
		next_state = LEGUP_F_main_BB__22_102;
LEGUP_F_main_BB__22_102:
		next_state = LEGUP_F_main_BB__22_103;
LEGUP_F_main_BB__22_103:
		next_state = LEGUP_F_main_BB_convergedexiti_149;
LEGUP_F_main_BB__22_89:
		next_state = LEGUP_F_main_BB__22_90;
LEGUP_F_main_BB__22_90:
		next_state = LEGUP_F_main_BB__22_91;
LEGUP_F_main_BB__22_91:
		next_state = LEGUP_F_main_BB__22_92;
LEGUP_F_main_BB__22_92:
		next_state = LEGUP_F_main_BB__22_93;
LEGUP_F_main_BB__22_93:
		next_state = LEGUP_F_main_BB__22_94;
LEGUP_F_main_BB__22_94:
		next_state = LEGUP_F_main_BB__22_95;
LEGUP_F_main_BB__22_95:
		next_state = LEGUP_F_main_BB__22_96;
LEGUP_F_main_BB__22_96:
		next_state = LEGUP_F_main_BB__22_97;
LEGUP_F_main_BB__22_97:
		next_state = LEGUP_F_main_BB__22_98;
LEGUP_F_main_BB__22_98:
		next_state = LEGUP_F_main_BB__22_99;
LEGUP_F_main_BB__22_99:
		next_state = LEGUP_F_main_BB__22_100;
LEGUP_F_main_BB__25_104:
	if ((main_1_12_reg == 1'd1))
		next_state = LEGUP_F_main_BB__28_120;
	else if ((main_1_12_reg == 1'd0))
		next_state = LEGUP_F_main_BB__26_105;
LEGUP_F_main_BB__26_105:
		next_state = LEGUP_F_main_BB__26_106;
LEGUP_F_main_BB__26_106:
		next_state = LEGUP_F_main_BB__26_107;
LEGUP_F_main_BB__26_107:
		next_state = LEGUP_F_main_BB__26_108;
LEGUP_F_main_BB__26_108:
		next_state = LEGUP_F_main_BB__26_109;
LEGUP_F_main_BB__26_109:
		next_state = LEGUP_F_main_BB__26_110;
LEGUP_F_main_BB__26_110:
		next_state = LEGUP_F_main_BB__26_111;
LEGUP_F_main_BB__26_111:
		next_state = LEGUP_F_main_BB__26_112;
LEGUP_F_main_BB__26_112:
		next_state = LEGUP_F_main_BB__26_113;
LEGUP_F_main_BB__26_113:
		next_state = LEGUP_F_main_BB__26_114;
LEGUP_F_main_BB__26_114:
		next_state = LEGUP_F_main_BB__26_115;
LEGUP_F_main_BB__26_115:
		next_state = LEGUP_F_main_BB__26_116;
LEGUP_F_main_BB__26_116:
		next_state = LEGUP_F_main_BB__26_117;
LEGUP_F_main_BB__26_117:
		next_state = LEGUP_F_main_BB__26_118;
LEGUP_F_main_BB__26_118:
		next_state = LEGUP_F_main_BB__26_119;
LEGUP_F_main_BB__26_119:
		next_state = LEGUP_F_main_BB__28_120;
LEGUP_F_main_BB__28_120:
		next_state = LEGUP_F_main_BB__28_121;
LEGUP_F_main_BB__28_121:
		next_state = LEGUP_F_main_BB__28_122;
LEGUP_F_main_BB__28_122:
		next_state = LEGUP_F_main_BB__28_123;
LEGUP_F_main_BB__28_123:
		next_state = LEGUP_F_main_BB__28_124;
LEGUP_F_main_BB__28_124:
		next_state = LEGUP_F_main_BB__28_125;
LEGUP_F_main_BB__28_125:
		next_state = LEGUP_F_main_BB__28_126;
LEGUP_F_main_BB__28_126:
		next_state = LEGUP_F_main_BB__28_127;
LEGUP_F_main_BB__28_127:
		next_state = LEGUP_F_main_BB__28_128;
LEGUP_F_main_BB__28_128:
		next_state = LEGUP_F_main_BB__28_129;
LEGUP_F_main_BB__28_129:
		next_state = LEGUP_F_main_BB__28_130;
LEGUP_F_main_BB__28_130:
		next_state = LEGUP_F_main_BB__28_131;
LEGUP_F_main_BB__28_131:
		next_state = LEGUP_F_main_BB__28_132;
LEGUP_F_main_BB__28_132:
		next_state = LEGUP_F_main_BB__28_133;
LEGUP_F_main_BB__28_133:
		next_state = LEGUP_F_main_BB__28_134;
LEGUP_F_main_BB__28_134:
		next_state = LEGUP_F_main_BB__28_135;
LEGUP_F_main_BB__28_135:
		next_state = LEGUP_F_main_BB__28_136;
LEGUP_F_main_BB__28_136:
		next_state = LEGUP_F_main_BB__28_137;
LEGUP_F_main_BB__28_137:
		next_state = LEGUP_F_main_BB__28_138;
LEGUP_F_main_BB__28_138:
		next_state = LEGUP_F_main_BB__28_139;
LEGUP_F_main_BB__28_139:
		next_state = LEGUP_F_main_BB__28_140;
LEGUP_F_main_BB__28_140:
		next_state = LEGUP_F_main_BB__28_141;
LEGUP_F_main_BB__28_141:
		next_state = LEGUP_F_main_BB__28_142;
LEGUP_F_main_BB__28_142:
		next_state = LEGUP_F_main_BB__28_143;
LEGUP_F_main_BB__28_143:
		next_state = LEGUP_F_main_BB__28_144;
LEGUP_F_main_BB__28_144:
		next_state = LEGUP_F_main_BB__28_145;
LEGUP_F_main_BB__28_145:
		next_state = LEGUP_F_main_BB__28_146;
LEGUP_F_main_BB__28_146:
		next_state = LEGUP_F_main_BB__28_147;
LEGUP_F_main_BB__28_147:
		next_state = LEGUP_F_main_BB__28_148;
LEGUP_F_main_BB__28_148:
		next_state = LEGUP_F_main_BB_convergedexiti_149;
LEGUP_F_main_BB__46_202:
		next_state = LEGUP_F_main_BB__46_203;
LEGUP_F_main_BB__46_203:
	if ((main_46_orcondiii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_46_orcondiii == 1'd0))
		next_state = LEGUP_F_main_BB__49_204;
LEGUP_F_main_BB__49_204:
		next_state = LEGUP_F_main_BB__49_205;
LEGUP_F_main_BB__49_205:
	if ((main_49_orcond12iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_49_orcond12iii == 1'd0))
		next_state = LEGUP_F_main_BB__52_206;
LEGUP_F_main_BB__52_206:
		next_state = LEGUP_F_main_BB__52_207;
LEGUP_F_main_BB__52_207:
	if ((main_52_orcond3iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_52_orcond3iii == 1'd0))
		next_state = LEGUP_F_main_BB__55_208;
LEGUP_F_main_BB__55_208:
		next_state = LEGUP_F_main_BB__55_209;
LEGUP_F_main_BB__55_209:
	if ((main_55_orcond13iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_55_orcond13iii == 1'd0))
		next_state = LEGUP_F_main_BB__58_210;
LEGUP_F_main_BB__58_210:
		next_state = LEGUP_F_main_BB__58_211;
LEGUP_F_main_BB__58_211:
	if ((main_58_orcond5iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_58_orcond5iii == 1'd0))
		next_state = LEGUP_F_main_BB__61_212;
LEGUP_F_main_BB__61_212:
		next_state = LEGUP_F_main_BB__61_213;
LEGUP_F_main_BB__61_213:
	if ((main_61_orcond14iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_61_orcond14iii == 1'd0))
		next_state = LEGUP_F_main_BB__64_214;
LEGUP_F_main_BB__64_214:
		next_state = LEGUP_F_main_BB__64_215;
LEGUP_F_main_BB__64_215:
	if ((main_64_orcond7iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_64_orcond7iii == 1'd0))
		next_state = LEGUP_F_main_BB__67_216;
LEGUP_F_main_BB__67_216:
		next_state = LEGUP_F_main_BB__67_217;
LEGUP_F_main_BB__67_217:
	if ((main_67_orcond15iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_67_orcond15iii == 1'd0))
		next_state = LEGUP_F_main_BB__70_218;
LEGUP_F_main_BB__70_218:
		next_state = LEGUP_F_main_BB__70_219;
LEGUP_F_main_BB__70_219:
	if ((main_70_orcond9iii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_70_orcond9iii == 1'd0))
		next_state = LEGUP_F_main_BB__73_220;
LEGUP_F_main_BB__73_220:
		next_state = LEGUP_F_main_BB__73_221;
LEGUP_F_main_BB__73_221:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
LEGUP_F_main_BB__84_278:
		next_state = LEGUP_F_main_BB__84_279;
LEGUP_F_main_BB__84_279:
	if ((main_84_orcondi1ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_84_orcondi1ii == 1'd0))
		next_state = LEGUP_F_main_BB__87_280;
LEGUP_F_main_BB__87_280:
		next_state = LEGUP_F_main_BB__87_281;
LEGUP_F_main_BB__87_281:
	if ((main_87_orcond12i2ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_87_orcond12i2ii == 1'd0))
		next_state = LEGUP_F_main_BB__90_282;
LEGUP_F_main_BB__90_282:
		next_state = LEGUP_F_main_BB__90_283;
LEGUP_F_main_BB__90_283:
		next_state = LEGUP_F_main_BB__90_284;
LEGUP_F_main_BB__90_284:
	if ((main_90_orcond3i3ii_reg == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_90_orcond3i3ii_reg == 1'd0))
		next_state = LEGUP_F_main_BB__94_285;
LEGUP_F_main_BB__94_285:
		next_state = LEGUP_F_main_BB__94_286;
LEGUP_F_main_BB__94_286:
	if ((main_94_orcond13i4ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_94_orcond13i4ii == 1'd0))
		next_state = LEGUP_F_main_BB__97_287;
LEGUP_F_main_BB__97_287:
		next_state = LEGUP_F_main_BB__97_288;
LEGUP_F_main_BB__97_288:
	if ((main_97_orcond14i5ii == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_97_orcond14i5ii == 1'd0))
		next_state = LEGUP_F_main_BB__100_289;
LEGUP_F_main_BB_convergedexiti_149:
		next_state = LEGUP_F_main_BB_convergedexiti_150;
LEGUP_F_main_BB_convergedexiti_150:
		next_state = LEGUP_F_main_BB_convergedexiti_151;
LEGUP_F_main_BB_convergedexiti_151:
		next_state = LEGUP_F_main_BB_convergedexiti_152;
LEGUP_F_main_BB_convergedexiti_152:
	if ((main_convergedexiti_34 == 1'd1))
		next_state = LEGUP_F_main_BB_fasticaexit_546;
	else if ((main_convergedexiti_34 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2preheader_153;
LEGUP_F_main_BB_fasticaexit_546:
		next_state = LEGUP_0;
LEGUP_F_main_BB_linear_sech2exitii_303:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_304;
LEGUP_F_main_BB_linear_sech2exitii_304:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_305;
LEGUP_F_main_BB_linear_sech2exitii_305:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_306;
LEGUP_F_main_BB_linear_sech2exitii_306:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_307;
LEGUP_F_main_BB_linear_sech2exitii_307:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_308;
LEGUP_F_main_BB_linear_sech2exitii_308:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_309;
LEGUP_F_main_BB_linear_sech2exitii_309:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_310;
LEGUP_F_main_BB_linear_sech2exitii_310:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_311;
LEGUP_F_main_BB_linear_sech2exitii_311:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_312;
LEGUP_F_main_BB_linear_sech2exitii_312:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_313;
LEGUP_F_main_BB_linear_sech2exitii_313:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_314;
LEGUP_F_main_BB_linear_sech2exitii_314:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_315;
LEGUP_F_main_BB_linear_sech2exitii_315:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_316;
LEGUP_F_main_BB_linear_sech2exitii_316:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_317;
LEGUP_F_main_BB_linear_sech2exitii_317:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_318;
LEGUP_F_main_BB_linear_sech2exitii_318:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_319;
LEGUP_F_main_BB_linear_sech2exitii_319:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_320;
LEGUP_F_main_BB_linear_sech2exitii_320:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_321;
LEGUP_F_main_BB_linear_sech2exitii_321:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_322;
LEGUP_F_main_BB_linear_sech2exitii_322:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_323;
LEGUP_F_main_BB_linear_sech2exitii_323:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_324;
LEGUP_F_main_BB_linear_sech2exitii_324:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_325;
LEGUP_F_main_BB_linear_sech2exitii_325:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_326;
LEGUP_F_main_BB_linear_sech2exitii_326:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_327;
LEGUP_F_main_BB_linear_sech2exitii_327:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_328;
LEGUP_F_main_BB_linear_sech2exitii_328:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_329;
LEGUP_F_main_BB_linear_sech2exitii_329:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_330;
LEGUP_F_main_BB_linear_sech2exitii_330:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_331;
LEGUP_F_main_BB_linear_sech2exitii_331:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_332;
LEGUP_F_main_BB_linear_sech2exitii_332:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_333;
LEGUP_F_main_BB_linear_sech2exitii_333:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_334;
LEGUP_F_main_BB_linear_sech2exitii_334:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_335;
LEGUP_F_main_BB_linear_sech2exitii_335:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_336;
LEGUP_F_main_BB_linear_sech2exitii_336:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_337;
LEGUP_F_main_BB_linear_sech2exitii_337:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_338;
LEGUP_F_main_BB_linear_sech2exitii_338:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_339;
LEGUP_F_main_BB_linear_sech2exitii_339:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_340;
LEGUP_F_main_BB_linear_sech2exitii_340:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_341;
LEGUP_F_main_BB_linear_sech2exitii_341:
		next_state = LEGUP_F_main_BB_linear_sech2exitii_342;
LEGUP_F_main_BB_linear_sech2exitii_342:
	if ((main_linear_sech2exitii_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_rotateexiti_419;
	else if ((main_linear_sech2exitii_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_274;
LEGUP_F_main_BB_linear_tanhexit1ii_367:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_368;
LEGUP_F_main_BB_linear_tanhexit1ii_368:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_369;
LEGUP_F_main_BB_linear_tanhexit1ii_369:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_370;
LEGUP_F_main_BB_linear_tanhexit1ii_370:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_371;
LEGUP_F_main_BB_linear_tanhexit1ii_371:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_372;
LEGUP_F_main_BB_linear_tanhexit1ii_372:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_373;
LEGUP_F_main_BB_linear_tanhexit1ii_373:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_374;
LEGUP_F_main_BB_linear_tanhexit1ii_374:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_375;
LEGUP_F_main_BB_linear_tanhexit1ii_375:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_376;
LEGUP_F_main_BB_linear_tanhexit1ii_376:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_377;
LEGUP_F_main_BB_linear_tanhexit1ii_377:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_378;
LEGUP_F_main_BB_linear_tanhexit1ii_378:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_379;
LEGUP_F_main_BB_linear_tanhexit1ii_379:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_380;
LEGUP_F_main_BB_linear_tanhexit1ii_380:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_381;
LEGUP_F_main_BB_linear_tanhexit1ii_381:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_382;
LEGUP_F_main_BB_linear_tanhexit1ii_382:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_383;
LEGUP_F_main_BB_linear_tanhexit1ii_383:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_384;
LEGUP_F_main_BB_linear_tanhexit1ii_384:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_385;
LEGUP_F_main_BB_linear_tanhexit1ii_385:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_386;
LEGUP_F_main_BB_linear_tanhexit1ii_386:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_387;
LEGUP_F_main_BB_linear_tanhexit1ii_387:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_388;
LEGUP_F_main_BB_linear_tanhexit1ii_388:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_389;
LEGUP_F_main_BB_linear_tanhexit1ii_389:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_390;
LEGUP_F_main_BB_linear_tanhexit1ii_390:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_391;
LEGUP_F_main_BB_linear_tanhexit1ii_391:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_392;
LEGUP_F_main_BB_linear_tanhexit1ii_392:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_393;
LEGUP_F_main_BB_linear_tanhexit1ii_393:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_394;
LEGUP_F_main_BB_linear_tanhexit1ii_394:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_395;
LEGUP_F_main_BB_linear_tanhexit1ii_395:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_396;
LEGUP_F_main_BB_linear_tanhexit1ii_396:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_397;
LEGUP_F_main_BB_linear_tanhexit1ii_397:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_398;
LEGUP_F_main_BB_linear_tanhexit1ii_398:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_399;
LEGUP_F_main_BB_linear_tanhexit1ii_399:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_400;
LEGUP_F_main_BB_linear_tanhexit1ii_400:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_401;
LEGUP_F_main_BB_linear_tanhexit1ii_401:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_402;
LEGUP_F_main_BB_linear_tanhexit1ii_402:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_403;
LEGUP_F_main_BB_linear_tanhexit1ii_403:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_404;
LEGUP_F_main_BB_linear_tanhexit1ii_404:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_405;
LEGUP_F_main_BB_linear_tanhexit1ii_405:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_406;
LEGUP_F_main_BB_linear_tanhexit1ii_406:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_407;
LEGUP_F_main_BB_linear_tanhexit1ii_407:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_408;
LEGUP_F_main_BB_linear_tanhexit1ii_408:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_409;
LEGUP_F_main_BB_linear_tanhexit1ii_409:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_410;
LEGUP_F_main_BB_linear_tanhexit1ii_410:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_411;
LEGUP_F_main_BB_linear_tanhexit1ii_411:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_412;
LEGUP_F_main_BB_linear_tanhexit1ii_412:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_413;
LEGUP_F_main_BB_linear_tanhexit1ii_413:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_414;
LEGUP_F_main_BB_linear_tanhexit1ii_414:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_415;
LEGUP_F_main_BB_linear_tanhexit1ii_415:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_416;
LEGUP_F_main_BB_linear_tanhexit1ii_416:
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_417;
LEGUP_F_main_BB_linear_tanhexit1ii_417:
	if ((main_linear_tanhexit1ii_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_418;
	else if ((main_linear_tanhexit1ii_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1_343;
LEGUP_F_main_BB_linear_tanhexitii_222:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_223;
LEGUP_F_main_BB_linear_tanhexitii_223:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_224;
LEGUP_F_main_BB_linear_tanhexitii_224:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_225;
LEGUP_F_main_BB_linear_tanhexitii_225:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_226;
LEGUP_F_main_BB_linear_tanhexitii_226:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_227;
LEGUP_F_main_BB_linear_tanhexitii_227:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_228;
LEGUP_F_main_BB_linear_tanhexitii_228:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_229;
LEGUP_F_main_BB_linear_tanhexitii_229:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_230;
LEGUP_F_main_BB_linear_tanhexitii_230:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_231;
LEGUP_F_main_BB_linear_tanhexitii_231:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_232;
LEGUP_F_main_BB_linear_tanhexitii_232:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_233;
LEGUP_F_main_BB_linear_tanhexitii_233:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_234;
LEGUP_F_main_BB_linear_tanhexitii_234:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_235;
LEGUP_F_main_BB_linear_tanhexitii_235:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_236;
LEGUP_F_main_BB_linear_tanhexitii_236:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_237;
LEGUP_F_main_BB_linear_tanhexitii_237:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_238;
LEGUP_F_main_BB_linear_tanhexitii_238:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_239;
LEGUP_F_main_BB_linear_tanhexitii_239:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_240;
LEGUP_F_main_BB_linear_tanhexitii_240:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_241;
LEGUP_F_main_BB_linear_tanhexitii_241:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_242;
LEGUP_F_main_BB_linear_tanhexitii_242:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_243;
LEGUP_F_main_BB_linear_tanhexitii_243:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_244;
LEGUP_F_main_BB_linear_tanhexitii_244:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_245;
LEGUP_F_main_BB_linear_tanhexitii_245:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_246;
LEGUP_F_main_BB_linear_tanhexitii_246:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_247;
LEGUP_F_main_BB_linear_tanhexitii_247:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_248;
LEGUP_F_main_BB_linear_tanhexitii_248:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_249;
LEGUP_F_main_BB_linear_tanhexitii_249:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_250;
LEGUP_F_main_BB_linear_tanhexitii_250:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_251;
LEGUP_F_main_BB_linear_tanhexitii_251:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_252;
LEGUP_F_main_BB_linear_tanhexitii_252:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_253;
LEGUP_F_main_BB_linear_tanhexitii_253:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_254;
LEGUP_F_main_BB_linear_tanhexitii_254:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_255;
LEGUP_F_main_BB_linear_tanhexitii_255:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_256;
LEGUP_F_main_BB_linear_tanhexitii_256:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_257;
LEGUP_F_main_BB_linear_tanhexitii_257:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_258;
LEGUP_F_main_BB_linear_tanhexitii_258:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_259;
LEGUP_F_main_BB_linear_tanhexitii_259:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_260;
LEGUP_F_main_BB_linear_tanhexitii_260:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_261;
LEGUP_F_main_BB_linear_tanhexitii_261:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_262;
LEGUP_F_main_BB_linear_tanhexitii_262:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_263;
LEGUP_F_main_BB_linear_tanhexitii_263:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_264;
LEGUP_F_main_BB_linear_tanhexitii_264:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_265;
LEGUP_F_main_BB_linear_tanhexitii_265:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_266;
LEGUP_F_main_BB_linear_tanhexitii_266:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_267;
LEGUP_F_main_BB_linear_tanhexitii_267:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_268;
LEGUP_F_main_BB_linear_tanhexitii_268:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_269;
LEGUP_F_main_BB_linear_tanhexitii_269:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_270;
LEGUP_F_main_BB_linear_tanhexitii_270:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_271;
LEGUP_F_main_BB_linear_tanhexitii_271:
		next_state = LEGUP_F_main_BB_linear_tanhexitii_272;
LEGUP_F_main_BB_linear_tanhexitii_272:
	if ((main_linear_tanhexitii_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1preheader_273;
	else if ((main_linear_tanhexitii_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader15ii_198;
LEGUP_F_main_BB_normalizeexiti_508:
		next_state = LEGUP_F_main_BB_normalizeexiti_509;
LEGUP_F_main_BB_normalizeexiti_509:
		next_state = LEGUP_F_main_BB_normalizeexiti_510;
LEGUP_F_main_BB_normalizeexiti_510:
		next_state = LEGUP_F_main_BB_normalizeexiti_511;
LEGUP_F_main_BB_normalizeexiti_511:
		next_state = LEGUP_F_main_BB_normalizeexiti_512;
LEGUP_F_main_BB_normalizeexiti_512:
		next_state = LEGUP_F_main_BB_normalizeexiti_513;
LEGUP_F_main_BB_normalizeexiti_513:
		next_state = LEGUP_F_main_BB_normalizeexiti_514;
LEGUP_F_main_BB_normalizeexiti_514:
		next_state = LEGUP_F_main_BB_normalizeexiti_515;
LEGUP_F_main_BB_normalizeexiti_515:
		next_state = LEGUP_F_main_BB_normalizeexiti_516;
LEGUP_F_main_BB_normalizeexiti_516:
		next_state = LEGUP_F_main_BB_normalizeexiti_517;
LEGUP_F_main_BB_normalizeexiti_517:
		next_state = LEGUP_F_main_BB_normalizeexiti_518;
LEGUP_F_main_BB_normalizeexiti_518:
		next_state = LEGUP_F_main_BB_normalizeexiti_519;
LEGUP_F_main_BB_normalizeexiti_519:
		next_state = LEGUP_F_main_BB_normalizeexiti_520;
LEGUP_F_main_BB_normalizeexiti_520:
		next_state = LEGUP_F_main_BB_normalizeexiti_521;
LEGUP_F_main_BB_normalizeexiti_521:
		next_state = LEGUP_F_main_BB_normalizeexiti_522;
LEGUP_F_main_BB_normalizeexiti_522:
		next_state = LEGUP_F_main_BB_normalizeexiti_523;
LEGUP_F_main_BB_normalizeexiti_523:
		next_state = LEGUP_F_main_BB_normalizeexiti_524;
LEGUP_F_main_BB_normalizeexiti_524:
		next_state = LEGUP_F_main_BB_normalizeexiti_525;
LEGUP_F_main_BB_normalizeexiti_525:
		next_state = LEGUP_F_main_BB_normalizeexiti_526;
LEGUP_F_main_BB_normalizeexiti_526:
		next_state = LEGUP_F_main_BB_normalizeexiti_527;
LEGUP_F_main_BB_normalizeexiti_527:
		next_state = LEGUP_F_main_BB_normalizeexiti_528;
LEGUP_F_main_BB_normalizeexiti_528:
		next_state = LEGUP_F_main_BB_normalizeexiti_529;
LEGUP_F_main_BB_normalizeexiti_529:
		next_state = LEGUP_F_main_BB_normalizeexiti_530;
LEGUP_F_main_BB_normalizeexiti_530:
		next_state = LEGUP_F_main_BB_normalizeexiti_531;
LEGUP_F_main_BB_normalizeexiti_531:
		next_state = LEGUP_F_main_BB_normalizeexiti_532;
LEGUP_F_main_BB_normalizeexiti_532:
		next_state = LEGUP_F_main_BB_normalizeexiti_533;
LEGUP_F_main_BB_normalizeexiti_533:
		next_state = LEGUP_F_main_BB_normalizeexiti_534;
LEGUP_F_main_BB_normalizeexiti_534:
		next_state = LEGUP_F_main_BB_normalizeexiti_535;
LEGUP_F_main_BB_normalizeexiti_535:
		next_state = LEGUP_F_main_BB_normalizeexiti_536;
LEGUP_F_main_BB_normalizeexiti_536:
		next_state = LEGUP_F_main_BB_normalizeexiti_537;
LEGUP_F_main_BB_normalizeexiti_537:
		next_state = LEGUP_F_main_BB_normalizeexiti_538;
LEGUP_F_main_BB_normalizeexiti_538:
		next_state = LEGUP_F_main_BB_normalizeexiti_539;
LEGUP_F_main_BB_normalizeexiti_539:
		next_state = LEGUP_F_main_BB_normalizeexiti_540;
LEGUP_F_main_BB_normalizeexiti_540:
		next_state = LEGUP_F_main_BB_normalizeexiti_541;
LEGUP_F_main_BB_normalizeexiti_541:
		next_state = LEGUP_F_main_BB_normalizeexiti_542;
LEGUP_F_main_BB_normalizeexiti_542:
		next_state = LEGUP_F_main_BB_normalizeexiti_543;
LEGUP_F_main_BB_normalizeexiti_543:
		next_state = LEGUP_F_main_BB_normalizeexiti_544;
LEGUP_F_main_BB_normalizeexiti_544:
		next_state = LEGUP_F_main_BB_normalizeexiti_545;
LEGUP_F_main_BB_normalizeexiti_545:
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_preheader15ii_198:
		next_state = LEGUP_F_main_BB_preheader15ii_199;
LEGUP_F_main_BB_preheader15ii_199:
		next_state = LEGUP_F_main_BB_preheader15ii_200;
LEGUP_F_main_BB_preheader15ii_200:
		next_state = LEGUP_F_main_BB_preheader15ii_201;
LEGUP_F_main_BB_preheader15ii_201:
	if ((main_preheader15ii_45 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexitii_222;
	else if ((main_preheader15ii_45 == 1'd0))
		next_state = LEGUP_F_main_BB__46_202;
LEGUP_F_main_BB_preheader15iipreheader_197:
		next_state = LEGUP_F_main_BB_preheader15ii_198;
LEGUP_F_main_BB_preheader1_343:
		next_state = LEGUP_F_main_BB_preheader1_344;
LEGUP_F_main_BB_preheader1_344:
		next_state = LEGUP_F_main_BB_preheader1_345;
LEGUP_F_main_BB_preheader1_345:
		next_state = LEGUP_F_main_BB_preheader1_346;
LEGUP_F_main_BB_preheader1_346:
	if ((main_preheader1_128 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_tanhexit1ii_367;
	else if ((main_preheader1_128 == 1'd0))
		next_state = LEGUP_F_main_BB__129_347;
LEGUP_F_main_BB_preheader1preheader_273:
		next_state = LEGUP_F_main_BB_preheader1_343;
LEGUP_F_main_BB_preheader2_154:
		next_state = LEGUP_F_main_BB_preheader2_155;
LEGUP_F_main_BB_preheader2_155:
		next_state = LEGUP_F_main_BB_preheader2_156;
LEGUP_F_main_BB_preheader2_156:
		next_state = LEGUP_F_main_BB_preheader2_157;
LEGUP_F_main_BB_preheader2_157:
		next_state = LEGUP_F_main_BB_preheader2_158;
LEGUP_F_main_BB_preheader2_158:
		next_state = LEGUP_F_main_BB_preheader2_159;
LEGUP_F_main_BB_preheader2_159:
		next_state = LEGUP_F_main_BB_preheader2_160;
LEGUP_F_main_BB_preheader2_160:
		next_state = LEGUP_F_main_BB_preheader2_161;
LEGUP_F_main_BB_preheader2_161:
		next_state = LEGUP_F_main_BB_preheader2_162;
LEGUP_F_main_BB_preheader2_162:
		next_state = LEGUP_F_main_BB_preheader2_163;
LEGUP_F_main_BB_preheader2_163:
		next_state = LEGUP_F_main_BB_preheader2_164;
LEGUP_F_main_BB_preheader2_164:
		next_state = LEGUP_F_main_BB_preheader2_165;
LEGUP_F_main_BB_preheader2_165:
		next_state = LEGUP_F_main_BB_preheader2_166;
LEGUP_F_main_BB_preheader2_166:
		next_state = LEGUP_F_main_BB_preheader2_167;
LEGUP_F_main_BB_preheader2_167:
		next_state = LEGUP_F_main_BB_preheader2_168;
LEGUP_F_main_BB_preheader2_168:
		next_state = LEGUP_F_main_BB_preheader2_169;
LEGUP_F_main_BB_preheader2_169:
		next_state = LEGUP_F_main_BB_preheader2_170;
LEGUP_F_main_BB_preheader2_170:
		next_state = LEGUP_F_main_BB_preheader2_171;
LEGUP_F_main_BB_preheader2_171:
		next_state = LEGUP_F_main_BB_preheader2_172;
LEGUP_F_main_BB_preheader2_172:
		next_state = LEGUP_F_main_BB_preheader2_173;
LEGUP_F_main_BB_preheader2_173:
		next_state = LEGUP_F_main_BB_preheader2_174;
LEGUP_F_main_BB_preheader2_174:
		next_state = LEGUP_F_main_BB_preheader2_175;
LEGUP_F_main_BB_preheader2_175:
		next_state = LEGUP_F_main_BB_preheader2_176;
LEGUP_F_main_BB_preheader2_176:
		next_state = LEGUP_F_main_BB_preheader2_177;
LEGUP_F_main_BB_preheader2_177:
		next_state = LEGUP_F_main_BB_preheader2_178;
LEGUP_F_main_BB_preheader2_178:
		next_state = LEGUP_F_main_BB_preheader2_179;
LEGUP_F_main_BB_preheader2_179:
		next_state = LEGUP_F_main_BB_preheader2_180;
LEGUP_F_main_BB_preheader2_180:
		next_state = LEGUP_F_main_BB_preheader2_181;
LEGUP_F_main_BB_preheader2_181:
		next_state = LEGUP_F_main_BB_preheader2_182;
LEGUP_F_main_BB_preheader2_182:
		next_state = LEGUP_F_main_BB_preheader2_183;
LEGUP_F_main_BB_preheader2_183:
		next_state = LEGUP_F_main_BB_preheader2_184;
LEGUP_F_main_BB_preheader2_184:
		next_state = LEGUP_F_main_BB_preheader2_185;
LEGUP_F_main_BB_preheader2_185:
		next_state = LEGUP_F_main_BB_preheader2_186;
LEGUP_F_main_BB_preheader2_186:
		next_state = LEGUP_F_main_BB_preheader2_187;
LEGUP_F_main_BB_preheader2_187:
		next_state = LEGUP_F_main_BB_preheader2_188;
LEGUP_F_main_BB_preheader2_188:
		next_state = LEGUP_F_main_BB_preheader2_189;
LEGUP_F_main_BB_preheader2_189:
		next_state = LEGUP_F_main_BB_preheader2_190;
LEGUP_F_main_BB_preheader2_190:
		next_state = LEGUP_F_main_BB_preheader2_191;
LEGUP_F_main_BB_preheader2_191:
		next_state = LEGUP_F_main_BB_preheader2_192;
LEGUP_F_main_BB_preheader2_192:
		next_state = LEGUP_F_main_BB_preheader2_193;
LEGUP_F_main_BB_preheader2_193:
		next_state = LEGUP_F_main_BB_preheader2_194;
LEGUP_F_main_BB_preheader2_194:
		next_state = LEGUP_F_main_BB_preheader2_195;
LEGUP_F_main_BB_preheader2_195:
		next_state = LEGUP_F_main_BB_preheader2_196;
LEGUP_F_main_BB_preheader2_196:
	if ((main_preheader2_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader15iipreheader_197;
	else if ((main_preheader2_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2_154;
LEGUP_F_main_BB_preheader2preheader_153:
		next_state = LEGUP_F_main_BB_preheader2_154;
LEGUP_F_main_BB_preheader_274:
		next_state = LEGUP_F_main_BB_preheader_275;
LEGUP_F_main_BB_preheader_275:
		next_state = LEGUP_F_main_BB_preheader_276;
LEGUP_F_main_BB_preheader_276:
		next_state = LEGUP_F_main_BB_preheader_277;
LEGUP_F_main_BB_preheader_277:
	if ((main_preheader_83 == 1'd1))
		next_state = LEGUP_F_main_BB_linear_sech2exitii_303;
	else if ((main_preheader_83 == 1'd0))
		next_state = LEGUP_F_main_BB__84_278;
LEGUP_F_main_BB_preheaderpreheader_418:
		next_state = LEGUP_F_main_BB_preheader_274;
LEGUP_F_main_BB_rotateexiti_419:
		next_state = LEGUP_F_main_BB_rotateexiti_420;
LEGUP_F_main_BB_rotateexiti_420:
		next_state = LEGUP_F_main_BB_rotateexiti_421;
LEGUP_F_main_BB_rotateexiti_421:
		next_state = LEGUP_F_main_BB_rotateexiti_422;
LEGUP_F_main_BB_rotateexiti_422:
		next_state = LEGUP_F_main_BB_rotateexiti_423;
LEGUP_F_main_BB_rotateexiti_423:
		next_state = LEGUP_F_main_BB_rotateexiti_424;
LEGUP_F_main_BB_rotateexiti_424:
		next_state = LEGUP_F_main_BB_rotateexiti_425;
LEGUP_F_main_BB_rotateexiti_425:
		next_state = LEGUP_F_main_BB_rotateexiti_426;
LEGUP_F_main_BB_rotateexiti_426:
		next_state = LEGUP_F_main_BB_rotateexiti_427;
LEGUP_F_main_BB_rotateexiti_427:
		next_state = LEGUP_F_main_BB_rotateexiti_428;
LEGUP_F_main_BB_rotateexiti_428:
		next_state = LEGUP_F_main_BB_rotateexiti_429;
LEGUP_F_main_BB_rotateexiti_429:
		next_state = LEGUP_F_main_BB_rotateexiti_430;
LEGUP_F_main_BB_rotateexiti_430:
		next_state = LEGUP_F_main_BB_rotateexiti_431;
LEGUP_F_main_BB_rotateexiti_431:
		next_state = LEGUP_F_main_BB_rotateexiti_432;
LEGUP_F_main_BB_rotateexiti_432:
		next_state = LEGUP_F_main_BB_rotateexiti_433;
LEGUP_F_main_BB_rotateexiti_433:
		next_state = LEGUP_F_main_BB_rotateexiti_434;
LEGUP_F_main_BB_rotateexiti_434:
		next_state = LEGUP_F_main_BB_rotateexiti_435;
LEGUP_F_main_BB_rotateexiti_435:
		next_state = LEGUP_F_main_BB_rotateexiti_436;
LEGUP_F_main_BB_rotateexiti_436:
		next_state = LEGUP_F_main_BB_rotateexiti_437;
LEGUP_F_main_BB_rotateexiti_437:
		next_state = LEGUP_F_main_BB_rotateexiti_438;
LEGUP_F_main_BB_rotateexiti_438:
		next_state = LEGUP_F_main_BB_rotateexiti_439;
LEGUP_F_main_BB_rotateexiti_439:
		next_state = LEGUP_F_main_BB_rotateexiti_440;
LEGUP_F_main_BB_rotateexiti_440:
		next_state = LEGUP_F_main_BB_rotateexiti_441;
LEGUP_F_main_BB_rotateexiti_441:
		next_state = LEGUP_F_main_BB_rotateexiti_442;
LEGUP_F_main_BB_rotateexiti_442:
		next_state = LEGUP_F_main_BB_rotateexiti_443;
LEGUP_F_main_BB_rotateexiti_443:
		next_state = LEGUP_F_main_BB_rotateexiti_444;
LEGUP_F_main_BB_rotateexiti_444:
		next_state = LEGUP_F_main_BB_rotateexiti_445;
LEGUP_F_main_BB_rotateexiti_445:
		next_state = LEGUP_F_main_BB_rotateexiti_446;
LEGUP_F_main_BB_rotateexiti_446:
		next_state = LEGUP_F_main_BB_rotateexiti_447;
LEGUP_F_main_BB_rotateexiti_447:
		next_state = LEGUP_F_main_BB_rotateexiti_448;
LEGUP_F_main_BB_rotateexiti_448:
		next_state = LEGUP_F_main_BB_rotateexiti_449;
LEGUP_F_main_BB_rotateexiti_449:
		next_state = LEGUP_F_main_BB_rotateexiti_450;
LEGUP_F_main_BB_rotateexiti_450:
		next_state = LEGUP_F_main_BB_rotateexiti_451;
LEGUP_F_main_BB_rotateexiti_451:
		next_state = LEGUP_F_main_BB_rotateexiti_452;
LEGUP_F_main_BB_rotateexiti_452:
		next_state = LEGUP_F_main_BB_rotateexiti_453;
LEGUP_F_main_BB_rotateexiti_453:
		next_state = LEGUP_F_main_BB_rotateexiti_454;
LEGUP_F_main_BB_rotateexiti_454:
		next_state = LEGUP_F_main_BB_rotateexiti_455;
LEGUP_F_main_BB_rotateexiti_455:
		next_state = LEGUP_F_main_BB_rotateexiti_456;
LEGUP_F_main_BB_rotateexiti_456:
		next_state = LEGUP_F_main_BB_rotateexiti_457;
LEGUP_F_main_BB_rotateexiti_457:
		next_state = LEGUP_F_main_BB_rotateexiti_458;
LEGUP_F_main_BB_rotateexiti_458:
		next_state = LEGUP_F_main_BB_rotateexiti_459;
LEGUP_F_main_BB_rotateexiti_459:
		next_state = LEGUP_F_main_BB_rotateexiti_460;
LEGUP_F_main_BB_rotateexiti_460:
		next_state = LEGUP_F_main_BB_rotateexiti_461;
LEGUP_F_main_BB_rotateexiti_461:
		next_state = LEGUP_F_main_BB_rotateexiti_462;
LEGUP_F_main_BB_rotateexiti_462:
		next_state = LEGUP_F_main_BB_rotateexiti_463;
LEGUP_F_main_BB_rotateexiti_463:
		next_state = LEGUP_F_main_BB_rotateexiti_464;
LEGUP_F_main_BB_rotateexiti_464:
		next_state = LEGUP_F_main_BB_rotateexiti_465;
LEGUP_F_main_BB_rotateexiti_465:
		next_state = LEGUP_F_main_BB_rotateexiti_466;
LEGUP_F_main_BB_rotateexiti_466:
		next_state = LEGUP_F_main_BB_rotateexiti_467;
LEGUP_F_main_BB_rotateexiti_467:
		next_state = LEGUP_F_main_BB_rotateexiti_468;
LEGUP_F_main_BB_rotateexiti_468:
		next_state = LEGUP_F_main_BB_rotateexiti_469;
LEGUP_F_main_BB_rotateexiti_469:
		next_state = LEGUP_F_main_BB_rotateexiti_470;
LEGUP_F_main_BB_rotateexiti_470:
		next_state = LEGUP_F_main_BB_rotateexiti_471;
LEGUP_F_main_BB_rotateexiti_471:
		next_state = LEGUP_F_main_BB_rotateexiti_472;
LEGUP_F_main_BB_rotateexiti_472:
		next_state = LEGUP_F_main_BB_rotateexiti_473;
LEGUP_F_main_BB_rotateexiti_473:
		next_state = LEGUP_F_main_BB_rotateexiti_474;
LEGUP_F_main_BB_rotateexiti_474:
		next_state = LEGUP_F_main_BB_rotateexiti_475;
LEGUP_F_main_BB_rotateexiti_475:
		next_state = LEGUP_F_main_BB_rotateexiti_476;
LEGUP_F_main_BB_rotateexiti_476:
		next_state = LEGUP_F_main_BB_rotateexiti_477;
LEGUP_F_main_BB_rotateexiti_477:
		next_state = LEGUP_F_main_BB_rotateexiti_478;
LEGUP_F_main_BB_rotateexiti_478:
		next_state = LEGUP_F_main_BB_rotateexiti_479;
LEGUP_F_main_BB_rotateexiti_479:
		next_state = LEGUP_F_main_BB_rotateexiti_480;
LEGUP_F_main_BB_rotateexiti_480:
		next_state = LEGUP_F_main_BB_rotateexiti_481;
LEGUP_F_main_BB_rotateexiti_481:
		next_state = LEGUP_F_main_BB_rotateexiti_482;
LEGUP_F_main_BB_rotateexiti_482:
		next_state = LEGUP_F_main_BB_rotateexiti_483;
LEGUP_F_main_BB_rotateexiti_483:
		next_state = LEGUP_F_main_BB_rotateexiti_484;
LEGUP_F_main_BB_rotateexiti_484:
		next_state = LEGUP_F_main_BB_rotateexiti_485;
LEGUP_F_main_BB_rotateexiti_485:
		next_state = LEGUP_F_main_BB_rotateexiti_486;
LEGUP_F_main_BB_rotateexiti_486:
		next_state = LEGUP_F_main_BB_rotateexiti_487;
LEGUP_F_main_BB_rotateexiti_487:
		next_state = LEGUP_F_main_BB_rotateexiti_488;
LEGUP_F_main_BB_rotateexiti_488:
		next_state = LEGUP_F_main_BB_rotateexiti_489;
LEGUP_F_main_BB_rotateexiti_489:
		next_state = LEGUP_F_main_BB_rotateexiti_490;
LEGUP_F_main_BB_rotateexiti_490:
		next_state = LEGUP_F_main_BB_rotateexiti_491;
LEGUP_F_main_BB_rotateexiti_491:
		next_state = LEGUP_F_main_BB_rotateexiti_492;
LEGUP_F_main_BB_rotateexiti_492:
		next_state = LEGUP_F_main_BB_rotateexiti_493;
LEGUP_F_main_BB_rotateexiti_493:
		next_state = LEGUP_F_main_BB_rotateexiti_494;
LEGUP_F_main_BB_rotateexiti_494:
		next_state = LEGUP_F_main_BB_rotateexiti_495;
LEGUP_F_main_BB_rotateexiti_495:
	if ((main_rotateexiti_orcondiiii == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeexiti_508;
	else if ((main_rotateexiti_orcondiiii == 1'd0))
		next_state = LEGUP_F_main_BB__178_496;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ %165, %normalize.exit.i ], [ 1053736672, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd1053736672;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ %165, %normalize.exit.i ], [ 1053736672, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_rotateexiti_165_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ %165, %normalize.exit.i ], [ 1053736672, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ %165, %normalize.exit.i ], [ 1053736672, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = phi i32 [ %164, %normalize.exit.i ], [ -1122315220, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_3 = -32'd1122315220;
	end
	/* main: %1*/
	/*   %3 = phi i32 [ %164, %normalize.exit.i ], [ -1122315220, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_3 = main_rotateexiti_164_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = phi i32 [ %164, %normalize.exit.i ], [ -1122315220, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
	/* main: %1*/
	/*   %3 = phi i32 [ %164, %normalize.exit.i ], [ -1122315220, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = phi float [ %6, %normalize.exit.i ], [ 0x3FD9D7DC00000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_4 = 32'h3ECEBEE0;
	end
	/* main: %1*/
	/*   %4 = phi float [ %6, %normalize.exit.i ], [ 0x3FD9D7DC00000000, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_4 = main_1_6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = phi float [ %6, %normalize.exit.i ], [ 0x3FD9D7DC00000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %4 = phi float [ %6, %normalize.exit.i ], [ 0x3FD9D7DC00000000, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = phi float [ %7, %normalize.exit.i ], [ 0xBFA35A8580000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_5 = 32'hBD1AD42C;
	end
	/* main: %1*/
	/*   %5 = phi float [ %7, %normalize.exit.i ], [ 0xBFA35A8580000000, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_5 = main_1_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = phi float [ %7, %normalize.exit.i ], [ 0xBFA35A8580000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %1*/
	/*   %5 = phi float [ %7, %normalize.exit.i ], [ 0xBFA35A8580000000, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = phi float [ %199, %normalize.exit.i ], [ 0x3F8E1B08A0000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_6 = 32'h3C70D845;
	end
	/* main: %1*/
	/*   %6 = phi float [ %199, %normalize.exit.i ], [ 0x3F8E1B08A0000000, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_6 = main_normalizeexiti_199;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = phi float [ %199, %normalize.exit.i ], [ 0x3F8E1B08A0000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
	/* main: %1*/
	/*   %6 = phi float [ %199, %normalize.exit.i ], [ 0x3F8E1B08A0000000, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = phi float [ %198, %normalize.exit.i ], [ 0xBFF9DB8BA0000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_7 = 32'hBFCEDC5D;
	end
	/* main: %1*/
	/*   %7 = phi float [ %198, %normalize.exit.i ], [ 0xBFF9DB8BA0000000, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_7 = main_normalizeexiti_198_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = phi float [ %198, %normalize.exit.i ], [ 0xBFF9DB8BA0000000, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
	/* main: %1*/
	/*   %7 = phi float [ %198, %normalize.exit.i ], [ 0xBFF9DB8BA0000000, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeexiti_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	main_1_8 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = fmul float %5, %7*/
	if ((cur_state == LEGUP_F_main_BB__1_12)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %1*/
	/*   %8 = fmul float %5, %7*/
	if ((cur_state == LEGUP_F_main_BB__1_12)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %36 = fmul float %7, %35*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_167)) begin
		main_1_8_reg <= main_preheader2_36;
		if (start == 1'b0 && ^(main_preheader2_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %76 = fmul float %44, %a.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_233)) begin
		main_1_8_reg <= main_linear_tanhexitii_76;
		if (start == 1'b0 && ^(main_linear_tanhexitii_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %78 = fmul float %43, %77*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_258)) begin
		main_1_8_reg <= main_linear_tanhexitii_78;
		if (start == 1'b0 && ^(main_linear_tanhexitii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %121 = fmul float %82, %a.0.i12.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_1_8_reg <= main_linear_sech2exitii_121;
		if (start == 1'b0 && ^(main_linear_sech2exitii_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %159 = fmul float %127, %a.0.i.1.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_378)) begin
		main_1_8_reg <= main_linear_tanhexit1ii_159;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %161 = fmul float %126, %160*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_403)) begin
		main_1_8_reg <= main_linear_tanhexit1ii_161;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %166 = fmul float %7, %123*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_430)) begin
		main_1_8_reg <= main_rotateexiti_166;
		if (start == 1'b0 && ^(main_rotateexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %169 = fmul float %168, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_455)) begin
		main_1_8_reg <= main_rotateexiti_169;
		if (start == 1'b0 && ^(main_rotateexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	main_1_9 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = fadd float %8, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %1*/
	/*   %9 = fadd float %8, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %15*/
	/*   %17 = fadd float %16, -1.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__15_71)) begin
		main_1_9_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %22*/
	/*   %24 = fadd float %23, -1.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__22_103)) begin
		main_1_9_reg <= main_22_24;
		if (start == 1'b0 && ^(main_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %28*/
	/*   %30 = fadd float %29, -1.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__28_134)) begin
		main_1_9_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %37 = fadd float %36, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_181)) begin
		main_1_9_reg <= main_preheader2_37;
		if (start == 1'b0 && ^(main_preheader2_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %77 = fadd float %76, %b.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_247)) begin
		main_1_9_reg <= main_linear_tanhexitii_77;
		if (start == 1'b0 && ^(main_linear_tanhexitii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %122 = fadd float %121, %b.0.i13.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_328)) begin
		main_1_9_reg <= main_linear_sech2exitii_122;
		if (start == 1'b0 && ^(main_linear_sech2exitii_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %160 = fadd float %159, %b.0.i.1.i.i*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_392)) begin
		main_1_9_reg <= main_linear_tanhexit1ii_160;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %173 = fadd float %172, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_480)) begin
		main_1_9_reg <= main_rotateexiti_173;
		if (start == 1'b0 && ^(main_rotateexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %197 = fadd float %196, %b.0.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeexiti_533)) begin
		main_1_9_reg <= main_normalizeexiti_197;
		if (start == 1'b0 && ^(main_normalizeexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	main_1_10 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = fmul float %4, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_13)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %10 = fmul float %4, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_13)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %39 = fmul float %6, %38*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_168)) begin
		main_1_10_reg <= main_preheader2_39;
		if (start == 1'b0 && ^(main_preheader2_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %167 = fmul float %6, %123*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) begin
		main_1_10_reg <= main_rotateexiti_167;
		if (start == 1'b0 && ^(main_rotateexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %171 = fmul float %170, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_467)) begin
		main_1_10_reg <= main_rotateexiti_171;
		if (start == 1'b0 && ^(main_rotateexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	main_1_11 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = fadd float %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
	/* main: %1*/
	/*   %11 = fadd float %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %40 = fadd float %37, %39*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		main_1_11_reg <= main_preheader2_40;
		if (start == 1'b0 && ^(main_preheader2_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %175 = fadd float %173, %174*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_494)) begin
		main_1_11_reg <= main_rotateexiti_175;
		if (start == 1'b0 && ^(main_rotateexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	main_1_12 = altfp_compare32_1_main_1_12_out;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = fcmp ogt float %11, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
	/* main: %1*/
	/*   %12 = fcmp ogt float %11, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	main_13_14 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %15*/
	/*   %16 = phi float [ %14, %13 ], [ %11, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_41) & (memory_controller_waitrequest == 1'd0)) & (main_1_12 == 1'd1))) begin
		main_15_16 = main_1_11_reg;
	end
	/* main: %15*/
	/*   %16 = phi float [ %14, %13 ], [ %11, %1 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__13_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_15_16 = main_13_14;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = phi float [ %14, %13 ], [ %11, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_41) & (memory_controller_waitrequest == 1'd0)) & (main_1_12 == 1'd1))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
	/* main: %15*/
	/*   %16 = phi float [ %14, %13 ], [ %11, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	main_15_17 = main_altfp_add_32_0;
end
always @(*) begin
	main_15_18 = altfp_compare32_1_main_15_18_out;
end
always @(*) begin
	main_20_21 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %22*/
	/*   %23 = phi float [ %21, %20 ], [ %11, %19 ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_73) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg == 1'd1))) begin
		main_22_23 = main_1_11_reg;
	end
	/* main: %22*/
	/*   %23 = phi float [ %21, %20 ], [ %11, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__20_88) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_22_23 = main_20_21;
	end
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = phi float [ %21, %20 ], [ %11, %19 ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_73) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg == 1'd1))) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
	/* main: %22*/
	/*   %23 = phi float [ %21, %20 ], [ %11, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_88) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	main_22_24 = main_altfp_add_32_0;
end
always @(*) begin
	main_26_27 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %28*/
	/*   %29 = phi float [ %27, %26 ], [ %11, %25 ]*/
	if ((((cur_state == LEGUP_F_main_BB__25_104) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg == 1'd1))) begin
		main_28_29 = main_1_11_reg;
	end
	/* main: %28*/
	/*   %29 = phi float [ %27, %26 ], [ %11, %25 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__26_119) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_28_29 = main_26_27;
	end
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %29 = phi float [ %27, %26 ], [ %11, %25 ]*/
	if ((((cur_state == LEGUP_F_main_BB__25_104) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg == 1'd1))) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
	/* main: %28*/
	/*   %29 = phi float [ %27, %26 ], [ %11, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__26_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	main_28_30 = main_altfp_add_32_0;
end
always @(*) begin
	main_28_31 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %31 = fsub float -0.000000e+00, %30*/
	if ((cur_state == LEGUP_F_main_BB__28_148)) begin
		main_28_31_reg <= main_28_31;
		if (start == 1'b0 && ^(main_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
	/* main: %28*/
	/*   %31 = fsub float -0.000000e+00, %30*/
	if ((cur_state == LEGUP_F_main_BB__28_148)) begin
		main_28_31_reg <= main_28_31;
		if (start == 1'b0 && ^(main_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %170 = fsub float %162, %167*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_445)) begin
		main_28_31_reg <= main_rotateexiti_170;
		if (start == 1'b0 && ^(main_rotateexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %32 = phi float [ %24, %22 ], [ %31, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__22_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_32 = main_22_24;
	end
	/* main: %converged.exit.i*/
	/*   %32 = phi float [ %24, %22 ], [ %31, %28 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__28_148) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_convergedexiti_32 = main_28_31;
	end
end
always @(posedge clk) begin
	/* main: %converged.exit.i*/
	/*   %32 = phi float [ %24, %22 ], [ %31, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__22_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_32_reg <= main_convergedexiti_32;
		if (start == 1'b0 && ^(main_convergedexiti_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_32_reg"); $finish; end
	end
	/* main: %converged.exit.i*/
	/*   %32 = phi float [ %24, %22 ], [ %31, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__28_148) & (memory_controller_waitrequest == 1'd0))) begin
		main_convergedexiti_32_reg <= main_convergedexiti_32;
		if (start == 1'b0 && ^(main_convergedexiti_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_32_reg"); $finish; end
	end
end
always @(*) begin
	main_convergedexiti_33 = main_altfp_extend_32_0;
end
always @(posedge clk) begin
	/* main: %converged.exit.i*/
	/*   %33 = fpext float %32 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_151)) begin
		main_convergedexiti_33_reg <= main_convergedexiti_33;
		if (start == 1'b0 && ^(main_convergedexiti_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_33_reg"); $finish; end
	end
	/* main: %converged.exit.i*/
	/*   %33 = fpext float %32 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_151)) begin
		main_convergedexiti_33_reg <= main_convergedexiti_33;
		if (start == 1'b0 && ^(main_convergedexiti_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_33_reg"); $finish; end
	end
	/* main: %90*/
	/*   %91 = fpext float %82 to double*/
	if ((cur_state == LEGUP_F_main_BB__90_284)) begin
		main_convergedexiti_33_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_convergedexiti_33_reg"); $finish; end
	end
end
always @(*) begin
	main_convergedexiti_34 = altfp_compare64_1_main_convergedexiti_34_out;
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %t.025.i.i = phi i32 [ %41, %.preheader2 ], [ 0, %.preheader2.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2preheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2_t025ii = 32'd0;
	end
	/* main: %.preheader2*/
	/*   %t.025.i.i = phi i32 [ %41, %.preheader2 ], [ 0, %.preheader2.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader2_196) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2_exitcond_reg == 1'd0))) */ begin
		main_preheader2_t025ii = main_preheader2_41_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %t.025.i.i = phi i32 [ %41, %.preheader2 ], [ 0, %.preheader2.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2preheader_153) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2_t025ii_reg <= main_preheader2_t025ii;
		if (start == 1'b0 && ^(main_preheader2_t025ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_t025ii_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %t.025.i.i = phi i32 [ %41, %.preheader2 ], [ 0, %.preheader2.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2_196) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2_exitcond_reg == 1'd0))) begin
		main_preheader2_t025ii_reg <= main_preheader2_t025ii;
		if (start == 1'b0 && ^(main_preheader2_t025ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_t025ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %scevgep = getelementptr [2 x [64 x float]]* @whitened_signals, i32 0, i32 1, i32 %t.025.i.i*/
		main_preheader2_scevgep = (`TAG_g_whitened_signals_a + ((256 * 32'd1) + (4 * main_preheader2_t025ii_reg)));
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %scevgep1 = getelementptr [2 x [64 x float]]* @whitened_signals, i32 0, i32 0, i32 %t.025.i.i*/
		main_preheader2_scevgep1 = (`TAG_g_whitened_signals_a + (4 * main_preheader2_t025ii_reg));
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %scevgep2 = getelementptr [64 x float]* @product_1, i32 0, i32 %t.025.i.i*/
		main_preheader2_scevgep2 = (`TAG_g_product_1_a + (4 * main_preheader2_t025ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %scevgep2 = getelementptr [64 x float]* @product_1, i32 0, i32 %t.025.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		main_preheader2_scevgep2_reg <= main_preheader2_scevgep2;
		if (start == 1'b0 && ^(main_preheader2_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %35 = load float* %scevgep1, align 4, !tbaa !1*/
		main_preheader2_35 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_preheader2_36 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_preheader2_37 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
		main_preheader2_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_156)) begin
		main_preheader2_38_reg <= main_preheader2_38;
		if (start == 1'b0 && ^(main_preheader2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_38_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader2_39 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %.preheader2*/
/*   %39 = fmul float %6, %38*/
	main_preheader2_39_reg = main_1_10_reg;
end
always @(*) begin
	main_preheader2_40 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %41 = add nsw i32 %t.025.i.i, 1*/
		main_preheader2_41 = (main_preheader2_t025ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %41 = add nsw i32 %t.025.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		main_preheader2_41_reg <= main_preheader2_41;
		if (start == 1'b0 && ^(main_preheader2_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %exitcond = icmp eq i32 %41, 64*/
		main_preheader2_exitcond = (main_preheader2_41 == 32'd64);
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %exitcond = icmp eq i32 %41, 64*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		main_preheader2_exitcond_reg <= main_preheader2_exitcond;
		if (start == 1'b0 && ^(main_preheader2_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %42 = phi float [ %79, %linear_tanh.exit.i.i ], [ 0.000000e+00, %.preheader15.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader15iipreheader_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader15ii_42 = 32'h0;
	end
	/* main: %.preheader15.i.i*/
	/*   %42 = phi float [ %79, %linear_tanh.exit.i.i ], [ 0.000000e+00, %.preheader15.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond3_reg == 1'd0))) */ begin
		main_preheader15ii_42 = main_linear_tanhexitii_79;
	end
end
always @(posedge clk) begin
	/* main: %.preheader15.i.i*/
	/*   %42 = phi float [ %79, %linear_tanh.exit.i.i ], [ 0.000000e+00, %.preheader15.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader15iipreheader_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader15ii_42_reg <= main_preheader15ii_42;
		if (start == 1'b0 && ^(main_preheader15ii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_42_reg"); $finish; end
	end
	/* main: %.preheader15.i.i*/
	/*   %42 = phi float [ %79, %linear_tanh.exit.i.i ], [ 0.000000e+00, %.preheader15.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond3_reg == 1'd0))) begin
		main_preheader15ii_42_reg <= main_preheader15ii_42;
		if (start == 1'b0 && ^(main_preheader15ii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %t.119.i.i = phi i32 [ %80, %linear_tanh.exit.i.i ], [ 0, %.preheader15.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader15iipreheader_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader15ii_t119ii = 32'd0;
	end
	/* main: %.preheader15.i.i*/
	/*   %t.119.i.i = phi i32 [ %80, %linear_tanh.exit.i.i ], [ 0, %.preheader15.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond3_reg == 1'd0))) */ begin
		main_preheader15ii_t119ii = main_linear_tanhexitii_80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader15.i.i*/
	/*   %t.119.i.i = phi i32 [ %80, %linear_tanh.exit.i.i ], [ 0, %.preheader15.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader15iipreheader_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader15ii_t119ii_reg <= main_preheader15ii_t119ii;
		if (start == 1'b0 && ^(main_preheader15ii_t119ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_t119ii_reg"); $finish; end
	end
	/* main: %.preheader15.i.i*/
	/*   %t.119.i.i = phi i32 [ %80, %linear_tanh.exit.i.i ], [ 0, %.preheader15.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexitii_exitcond3_reg == 1'd0))) begin
		main_preheader15ii_t119ii_reg <= main_preheader15ii_t119ii;
		if (start == 1'b0 && ^(main_preheader15ii_t119ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_t119ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %scevgep4 = getelementptr [64 x float]* @product_1, i32 0, i32 %t.119.i.i*/
		main_preheader15ii_scevgep4 = (`TAG_g_product_1_a + (4 * main_preheader15ii_t119ii_reg));
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %scevgep5 = getelementptr [2 x [64 x float]]* @whitened_signals, i32 0, i32 0, i32 %t.119.i.i*/
		main_preheader15ii_scevgep5 = (`TAG_g_whitened_signals_a + (4 * main_preheader15ii_t119ii_reg));
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
		main_preheader15ii_43 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_200)) begin
		main_preheader15ii_43_reg <= main_preheader15ii_43;
		if (start == 1'b0 && ^(main_preheader15ii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
		main_preheader15ii_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_200)) begin
		main_preheader15ii_44_reg <= main_preheader15ii_44;
		if (start == 1'b0 && ^(main_preheader15ii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader15ii_44_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader15ii_45 = altfp_compare32_1_main_preheader15ii_45_out;
end
always @(*) begin
	main_46_47 = altfp_compare32_1_main_46_47_out;
end
always @(*) begin
	main_46_48 = altfp_compare32_1_main_46_48_out;
end
always @(*) begin
	/* main: %46*/
	/*   %or.cond.i.i.i = and i1 %47, %48*/
		main_46_orcondiii = (main_46_47 & main_46_48);
end
always @(*) begin
	main_49_50 = altfp_compare32_1_main_49_50_out;
end
always @(*) begin
	main_49_51 = altfp_compare32_1_main_49_51_out;
end
always @(*) begin
	/* main: %49*/
	/*   %or.cond12.i.i.i = and i1 %50, %51*/
		main_49_orcond12iii = (main_49_50 & main_49_51);
end
always @(*) begin
	main_52_53 = altfp_compare32_1_main_52_53_out;
end
always @(*) begin
	main_52_54 = altfp_compare32_1_main_52_54_out;
end
always @(*) begin
	/* main: %52*/
	/*   %or.cond3.i.i.i = and i1 %53, %54*/
		main_52_orcond3iii = (main_52_53 & main_52_54);
end
always @(*) begin
	main_55_56 = altfp_compare32_1_main_55_56_out;
end
always @(*) begin
	main_55_57 = altfp_compare32_1_main_55_57_out;
end
always @(*) begin
	/* main: %55*/
	/*   %or.cond13.i.i.i = and i1 %56, %57*/
		main_55_orcond13iii = (main_55_56 & main_55_57);
end
always @(*) begin
	main_58_59 = altfp_compare32_1_main_58_59_out;
end
always @(*) begin
	main_58_60 = altfp_compare32_1_main_58_60_out;
end
always @(*) begin
	/* main: %58*/
	/*   %or.cond5.i.i.i = and i1 %59, %60*/
		main_58_orcond5iii = (main_58_59 & main_58_60);
end
always @(*) begin
	main_61_62 = altfp_compare32_1_main_61_62_out;
end
always @(*) begin
	main_61_63 = altfp_compare32_1_main_61_63_out;
end
always @(*) begin
	/* main: %61*/
	/*   %or.cond14.i.i.i = and i1 %62, %63*/
		main_61_orcond14iii = (main_61_62 & main_61_63);
end
always @(*) begin
	main_64_65 = altfp_compare32_1_main_64_65_out;
end
always @(*) begin
	main_64_66 = altfp_compare32_1_main_64_66_out;
end
always @(*) begin
	/* main: %64*/
	/*   %or.cond7.i.i.i = and i1 %65, %66*/
		main_64_orcond7iii = (main_64_65 & main_64_66);
end
always @(*) begin
	main_67_68 = altfp_compare32_1_main_67_68_out;
end
always @(*) begin
	main_67_69 = altfp_compare32_1_main_67_69_out;
end
always @(*) begin
	/* main: %67*/
	/*   %or.cond15.i.i.i = and i1 %68, %69*/
		main_67_orcond15iii = (main_67_68 & main_67_69);
end
always @(*) begin
	main_70_71 = altfp_compare32_1_main_70_71_out;
end
always @(*) begin
	main_70_72 = altfp_compare32_1_main_70_72_out;
end
always @(*) begin
	/* main: %70*/
	/*   %or.cond9.i.i.i = and i1 %71, %72*/
		main_70_orcond9iii = (main_70_71 & main_70_72);
end
always @(*) begin
	main_73_74 = altfp_compare32_1_main_73_74_out;
end
always @(*) begin
	main_73_75 = altfp_compare32_1_main_73_75_out;
end
always @(*) begin
	/* main: %73*/
	/*   %or.cond11.i.i.i = and i1 %74, %75*/
		main_73_orcond11iii = (main_73_74 & main_73_75);
end
always @(*) begin
	/* main: %73*/
	/*   %..i.i.i = select i1 %or.cond11.i.i.i, float 0x3F9E000000000000, float 0x3F48000040000000*/
		main_73_iii = (main_73_orcond11iii ? 32'h3CF00000 : 32'h3A400002);
end
always @(*) begin
	/* main: %73*/
	/*   %.16.i.i.i = select i1 %or.cond11.i.i.i, float 0x3FED0068E0000000, float 1.000000e+00*/
		main_73_16iii = (main_73_orcond11iii ? 32'h3F680347 : 32'h3F800000);
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader15ii_201) & (memory_controller_waitrequest == 1'd0)) & (main_preheader15ii_45 == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3A400002;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__46_203) & (memory_controller_waitrequest == 1'd0)) & (main_46_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3CF00000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__49_205) & (memory_controller_waitrequest == 1'd0)) & (main_49_orcond12iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__52_207) & (memory_controller_waitrequest == 1'd0)) & (main_52_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__55_209) & (memory_controller_waitrequest == 1'd0)) & (main_55_orcond13iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_211) & (memory_controller_waitrequest == 1'd0)) & (main_58_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__61_213) & (memory_controller_waitrequest == 1'd0)) & (main_61_orcond14iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__64_215) & (memory_controller_waitrequest == 1'd0)) & (main_64_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__67_217) & (memory_controller_waitrequest == 1'd0)) & (main_67_orcond15iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__70_219) & (memory_controller_waitrequest == 1'd0)) & (main_70_orcond9iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__73_221) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexitii_a0iii = main_73_iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader15ii_201) & (memory_controller_waitrequest == 1'd0)) & (main_preheader15ii_45 == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__46_203) & (memory_controller_waitrequest == 1'd0)) & (main_46_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__49_205) & (memory_controller_waitrequest == 1'd0)) & (main_49_orcond12iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__52_207) & (memory_controller_waitrequest == 1'd0)) & (main_52_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__55_209) & (memory_controller_waitrequest == 1'd0)) & (main_55_orcond13iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_211) & (memory_controller_waitrequest == 1'd0)) & (main_58_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__61_213) & (memory_controller_waitrequest == 1'd0)) & (main_61_orcond14iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__64_215) & (memory_controller_waitrequest == 1'd0)) & (main_64_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__67_217) & (memory_controller_waitrequest == 1'd0)) & (main_67_orcond15iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__70_219) & (memory_controller_waitrequest == 1'd0)) & (main_70_orcond9iii == 1'd1))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %a.0.i.i.i = phi float [ 0x3F48000040000000, %.preheader15.i.i ], [ 0x3F9E000000000000, %46 ], [ 0x3FBDB00000000000, %49 ], [ 0x3FD2340000000000, %52 ], [ 0x3FE2FA0000000000, %55 ], [ 0x3FEE7E0000000000, %58 ], [ 0x3FEE7E0000000000, %61 ], [ 0x3FE2FA0000000000, %64 ], [ 0x3FD2340000000000, %67 ], [ 0x3FBDB00000000000, %70 ], [ %..i.i.i, %73 ]*/
	if (((cur_state == LEGUP_F_main_BB__73_221) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexitii_a0iii_reg <= main_linear_tanhexitii_a0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_a0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_a0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader15ii_201) & (memory_controller_waitrequest == 1'd0)) & (main_preheader15ii_45 == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'hBF800000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__46_203) & (memory_controller_waitrequest == 1'd0)) & (main_46_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'hBF680347;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__49_205) & (memory_controller_waitrequest == 1'd0)) & (main_49_orcond12iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'hBF400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__52_207) & (memory_controller_waitrequest == 1'd0)) & (main_52_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'hBF000000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__55_209) & (memory_controller_waitrequest == 1'd0)) & (main_55_orcond13iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'hBE400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_211) & (memory_controller_waitrequest == 1'd0)) & (main_58_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'h0;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__61_213) & (memory_controller_waitrequest == 1'd0)) & (main_61_orcond14iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'h0;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__64_215) & (memory_controller_waitrequest == 1'd0)) & (main_64_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'h3E400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__67_217) & (memory_controller_waitrequest == 1'd0)) & (main_67_orcond15iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'h3F000000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__70_219) & (memory_controller_waitrequest == 1'd0)) & (main_70_orcond9iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii = 32'h3F400000;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__73_221) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexitii_b0iii = main_73_16iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader15ii_201) & (memory_controller_waitrequest == 1'd0)) & (main_preheader15ii_45 == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__46_203) & (memory_controller_waitrequest == 1'd0)) & (main_46_orcondiii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__49_205) & (memory_controller_waitrequest == 1'd0)) & (main_49_orcond12iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__52_207) & (memory_controller_waitrequest == 1'd0)) & (main_52_orcond3iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__55_209) & (memory_controller_waitrequest == 1'd0)) & (main_55_orcond13iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_211) & (memory_controller_waitrequest == 1'd0)) & (main_58_orcond5iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__61_213) & (memory_controller_waitrequest == 1'd0)) & (main_61_orcond14iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__64_215) & (memory_controller_waitrequest == 1'd0)) & (main_64_orcond7iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__67_217) & (memory_controller_waitrequest == 1'd0)) & (main_67_orcond15iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if ((((cur_state == LEGUP_F_main_BB__70_219) & (memory_controller_waitrequest == 1'd0)) & (main_70_orcond9iii == 1'd1))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %b.0.i.i.i = phi float [ -1.000000e+00, %.preheader15.i.i ], [ 0xBFED0068E0000000, %46 ], [ -7.500000e-01, %49 ], [ -5.000000e-01, %52 ], [ -1.875000e-01, %55 ], [ 0.000000e+00, %58 ], [ 0.000000e+00, %61 ], [ 1.875000e-01, %64 ], [ 5.000000e-01, %67 ], [ 7.500000e-01, %70 ], [ %.16.i.i.i, %73 ]*/
	if (((cur_state == LEGUP_F_main_BB__73_221) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexitii_b0iii_reg <= main_linear_tanhexitii_b0iii;
		if (start == 1'b0 && ^(main_linear_tanhexitii_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_b0iii_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_tanhexitii_76 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexitii_77 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_tanhexitii_78 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexitii_79 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %79 = fadd float %42, %78*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272)) begin
		main_linear_tanhexitii_79_reg <= main_linear_tanhexitii_79;
		if (start == 1'b0 && ^(main_linear_tanhexitii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_79_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %79 = fadd float %42, %78*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_272)) begin
		main_linear_tanhexitii_79_reg <= main_linear_tanhexitii_79;
		if (start == 1'b0 && ^(main_linear_tanhexitii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %80 = add nsw i32 %t.119.i.i, 1*/
		main_linear_tanhexitii_80 = (main_preheader15ii_t119ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %80 = add nsw i32 %t.119.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_222)) begin
		main_linear_tanhexitii_80_reg <= main_linear_tanhexitii_80;
		if (start == 1'b0 && ^(main_linear_tanhexitii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %exitcond3 = icmp eq i32 %80, 64*/
		main_linear_tanhexitii_exitcond3 = (main_linear_tanhexitii_80 == 32'd64);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.i.i*/
	/*   %exitcond3 = icmp eq i32 %80, 64*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_222)) begin
		main_linear_tanhexitii_exitcond3_reg <= main_linear_tanhexitii_exitcond3;
		if (start == 1'b0 && ^(main_linear_tanhexitii_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexitii_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %81 = phi float [ %123, %linear_sech2.exit.i.i ], [ 0.000000e+00, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond9_reg == 1'd0))) begin
		main_preheader_81 = main_linear_sech2exitii_123;
	end
	/* main: %.preheader*/
	/*   %81 = phi float [ %123, %linear_sech2.exit.i.i ], [ 0.000000e+00, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_418) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_81 = 32'h0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %81 = phi float [ %123, %linear_sech2.exit.i.i ], [ 0.000000e+00, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond9_reg == 1'd0))) begin
		main_preheader_81_reg <= main_preheader_81;
		if (start == 1'b0 && ^(main_preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_81_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %81 = phi float [ %123, %linear_sech2.exit.i.i ], [ 0.000000e+00, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_418) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_81_reg <= main_preheader_81;
		if (start == 1'b0 && ^(main_preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %t.218.i.i = phi i32 [ %124, %linear_sech2.exit.i.i ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond9_reg == 1'd0))) begin
		main_preheader_t218ii = main_linear_sech2exitii_124_reg;
	end
	/* main: %.preheader*/
	/*   %t.218.i.i = phi i32 [ %124, %linear_sech2.exit.i.i ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_418) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_t218ii = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %t.218.i.i = phi i32 [ %124, %linear_sech2.exit.i.i ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342) & (memory_controller_waitrequest == 1'd0)) & (main_linear_sech2exitii_exitcond9_reg == 1'd0))) begin
		main_preheader_t218ii_reg <= main_preheader_t218ii;
		if (start == 1'b0 && ^(main_preheader_t218ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_t218ii_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %t.218.i.i = phi i32 [ %124, %linear_sech2.exit.i.i ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_418) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_t218ii_reg <= main_preheader_t218ii;
		if (start == 1'b0 && ^(main_preheader_t218ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_t218ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep10 = getelementptr [64 x float]* @product_1, i32 0, i32 %t.218.i.i*/
		main_preheader_scevgep10 = (`TAG_g_product_1_a + (4 * main_preheader_t218ii_reg));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
		main_preheader_82 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_276)) begin
		main_preheader_82_reg <= main_preheader_82;
		if (start == 1'b0 && ^(main_preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_82_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader_83 = altfp_compare32_1_main_preheader_83_out;
end
always @(*) begin
	main_84_85 = altfp_compare32_1_main_84_85_out;
end
always @(*) begin
	main_84_86 = altfp_compare32_1_main_84_86_out;
end
always @(*) begin
	/* main: %84*/
	/*   %or.cond.i1.i.i = and i1 %85, %86*/
		main_84_orcondi1ii = (main_84_85 & main_84_86);
end
always @(*) begin
	main_87_88 = altfp_compare32_1_main_87_88_out;
end
always @(*) begin
	main_87_89 = altfp_compare32_1_main_87_89_out;
end
always @(*) begin
	/* main: %87*/
	/*   %or.cond12.i2.i.i = and i1 %88, %89*/
		main_87_orcond12i2ii = (main_87_88 & main_87_89);
end
always @(*) begin
	main_90_91 = main_altfp_extend_32_0;
end
always @(*) begin
/* main: %90*/
/*   %91 = fpext float %82 to double*/
	main_90_91_reg = main_convergedexiti_33_reg;
end
always @(*) begin
	main_90_92 = altfp_compare32_1_main_90_92_out;
end
always @(*) begin
	main_90_93 = altfp_compare32_1_main_90_93_out;
end
always @(*) begin
	/* main: %90*/
	/*   %or.cond3.i3.i.i = and i1 %92, %93*/
		main_90_orcond3i3ii = (main_90_92 & main_90_93);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %or.cond3.i3.i.i = and i1 %92, %93*/
	if ((cur_state == LEGUP_F_main_BB__90_283)) begin
		main_90_orcond3i3ii_reg <= main_90_orcond3i3ii;
		if (start == 1'b0 && ^(main_90_orcond3i3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_orcond3i3ii_reg"); $finish; end
	end
end
always @(*) begin
	main_94_95 = altfp_compare32_1_main_94_95_out;
end
always @(*) begin
	main_94_96 = altfp_compare32_1_main_94_96_out;
end
always @(*) begin
	/* main: %94*/
	/*   %or.cond13.i4.i.i = and i1 %95, %96*/
		main_94_orcond13i4ii = (main_94_95 & main_94_96);
end
always @(*) begin
	main_97_98 = altfp_compare32_1_main_97_98_out;
end
always @(*) begin
	main_97_99 = altfp_compare64_1_main_97_99_out;
end
always @(*) begin
	/* main: %97*/
	/*   %or.cond14.i5.i.i = and i1 %98, %99*/
		main_97_orcond14i5ii = (main_97_98 & main_97_99);
end
always @(*) begin
	main_100_101 = altfp_compare64_1_main_100_101_out;
end
always @(*) begin
	main_100_102 = altfp_compare32_1_main_100_102_out;
end
always @(*) begin
	/* main: %100*/
	/*   %or.cond5.i6.i.i = and i1 %101, %102*/
		main_100_orcond5i6ii = (main_100_101 & main_100_102);
end
always @(*) begin
	main_103_104 = altfp_compare32_1_main_103_104_out;
end
always @(*) begin
	main_103_105 = altfp_compare64_1_main_103_105_out;
end
always @(*) begin
	/* main: %103*/
	/*   %or.cond15.i7.i.i = and i1 %104, %105*/
		main_103_orcond15i7ii = (main_103_104 & main_103_105);
end
always @(*) begin
	main_106_107 = altfp_compare64_1_main_106_107_out;
end
always @(*) begin
	main_106_108 = altfp_compare32_1_main_106_108_out;
end
always @(*) begin
	/* main: %106*/
	/*   %or.cond16.i.i.i = and i1 %107, %108*/
		main_106_orcond16iii = (main_106_107 & main_106_108);
end
always @(*) begin
	main_109_110 = altfp_compare32_1_main_109_110_out;
end
always @(*) begin
	main_109_111 = altfp_compare32_1_main_109_111_out;
end
always @(*) begin
	/* main: %109*/
	/*   %or.cond7.i8.i.i = and i1 %110, %111*/
		main_109_orcond7i8ii = (main_109_110 & main_109_111);
end
always @(*) begin
	main_112_113 = altfp_compare32_1_main_112_113_out;
end
always @(*) begin
	main_112_114 = altfp_compare32_1_main_112_114_out;
end
always @(*) begin
	/* main: %112*/
	/*   %or.cond17.i.i.i = and i1 %113, %114*/
		main_112_orcond17iii = (main_112_113 & main_112_114);
end
always @(*) begin
	main_115_116 = altfp_compare32_1_main_115_116_out;
end
always @(*) begin
	main_115_117 = altfp_compare32_1_main_115_117_out;
end
always @(*) begin
	/* main: %115*/
	/*   %or.cond9.i9.i.i = and i1 %116, %117*/
		main_115_orcond9i9ii = (main_115_116 & main_115_117);
end
always @(*) begin
	main_118_119 = altfp_compare32_1_main_118_119_out;
end
always @(*) begin
	main_118_120 = altfp_compare32_1_main_118_120_out;
end
always @(*) begin
	/* main: %118*/
	/*   %or.cond11.i10.i.i = and i1 %119, %120*/
		main_118_orcond11i10ii = (main_118_119 & main_118_120);
end
always @(*) begin
	/* main: %118*/
	/*   %..i11.i.i = select i1 %or.cond11.i10.i.i, float 0xBFACE29860000000, float 0xBF6FB389A0000000*/
		main_118_i11ii = (main_118_orcond11i10ii ? 32'hBD6714C3 : 32'hBB7D9C4D);
end
always @(*) begin
	/* main: %118*/
	/*   %.18.i.i.i = select i1 %or.cond11.i10.i.i, float 0x3FC6075F60000000, float 0x3F925460A0000000*/
		main_118_18iii = (main_118_orcond11i10ii ? 32'h3E303AFB : 32'h3C92A305);
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_277) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_83 == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3B7D9C4D;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__84_279) & (memory_controller_waitrequest == 1'd0)) & (main_84_orcondi1ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3D6714C3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__87_281) & (memory_controller_waitrequest == 1'd0)) & (main_87_orcond12i2ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3E5B4A20;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__90_284) & (memory_controller_waitrequest == 1'd0)) & (main_90_orcond3i3ii_reg == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3EF14222;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__94_286) & (memory_controller_waitrequest == 1'd0)) & (main_94_orcond13i4ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3F3D7B52;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__97_288) & (memory_controller_waitrequest == 1'd0)) & (main_97_orcond14i5ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3F1942CF;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__100_290) & (memory_controller_waitrequest == 1'd0)) & (main_100_orcond5i6ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'h3E5BC8F4;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__103_292) & (memory_controller_waitrequest == 1'd0)) & (main_103_orcond15i7ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'hBE5BC8F4;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__106_294) & (memory_controller_waitrequest == 1'd0)) & (main_106_orcond16iii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'hBF1942CF;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__109_296) & (memory_controller_waitrequest == 1'd0)) & (main_109_orcond7i8ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'hBF3D7B52;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__112_298) & (memory_controller_waitrequest == 1'd0)) & (main_112_orcond17iii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'hBEF14222;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__115_300) & (memory_controller_waitrequest == 1'd0)) & (main_115_orcond9i9ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii = 32'hBE5B4A20;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__118_302) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_sech2exitii_a0i12ii = main_118_i11ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_277) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_83 == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_279) & (memory_controller_waitrequest == 1'd0)) & (main_84_orcondi1ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__87_281) & (memory_controller_waitrequest == 1'd0)) & (main_87_orcond12i2ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__90_284) & (memory_controller_waitrequest == 1'd0)) & (main_90_orcond3i3ii_reg == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_286) & (memory_controller_waitrequest == 1'd0)) & (main_94_orcond13i4ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__97_288) & (memory_controller_waitrequest == 1'd0)) & (main_97_orcond14i5ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__100_290) & (memory_controller_waitrequest == 1'd0)) & (main_100_orcond5i6ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__103_292) & (memory_controller_waitrequest == 1'd0)) & (main_103_orcond15i7ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_294) & (memory_controller_waitrequest == 1'd0)) & (main_106_orcond16iii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__109_296) & (memory_controller_waitrequest == 1'd0)) & (main_109_orcond7i8ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_298) & (memory_controller_waitrequest == 1'd0)) & (main_112_orcond17iii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__115_300) & (memory_controller_waitrequest == 1'd0)) & (main_115_orcond9i9ii == 1'd1))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %a.0.i12.i.i = phi float [ 0x3F6FB389A0000000, %.preheader ], [ 0x3FACE29860000000, %84 ], [ 0x3FCB694400000000, %87 ], [ 0x3FDE284440000000, %90 ], [ 0x3FE7AF6A40000000, %94 ], [ 0x3FE32859E0000000, %97 ], [ 0x3FCB791E80000000, %100 ], [ 0xBFCB791E80000000, %103 ], [ 0xBFE32859E0000000, %106 ], [ 0xBFE7AF6A40000000, %109 ], [ 0xBFDE284440000000, %112 ], [ 0xBFCB694400000000, %115 ], [ %..i11.i.i, %118 ]*/
	if (((cur_state == LEGUP_F_main_BB__118_302) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_sech2exitii_a0i12ii_reg <= main_linear_sech2exitii_a0i12ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_a0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_a0i12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_277) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_83 == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3C92A305;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__84_279) & (memory_controller_waitrequest == 1'd0)) & (main_84_orcondi1ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3E303AFB;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__87_281) & (memory_controller_waitrequest == 1'd0)) & (main_87_orcond12i2ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3EFC3611;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__90_284) & (memory_controller_waitrequest == 1'd0)) & (main_90_orcond3i3ii_reg == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F605532;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__94_286) & (memory_controller_waitrequest == 1'd0)) & (main_94_orcond13i4ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F93BCD3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__97_288) & (memory_controller_waitrequest == 1'd0)) & (main_97_orcond14i5ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F8BC01A;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__100_290) & (memory_controller_waitrequest == 1'd0)) & (main_100_orcond5i6ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F81096C;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__103_292) & (memory_controller_waitrequest == 1'd0)) & (main_103_orcond15i7ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F81096C;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__106_294) & (memory_controller_waitrequest == 1'd0)) & (main_106_orcond16iii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F8BC01A;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__109_296) & (memory_controller_waitrequest == 1'd0)) & (main_109_orcond7i8ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F93BCD3;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__112_298) & (memory_controller_waitrequest == 1'd0)) & (main_112_orcond17iii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3F605532;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__115_300) & (memory_controller_waitrequest == 1'd0)) & (main_115_orcond9i9ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii = 32'h3EFC3611;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__118_302) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_sech2exitii_b0i13ii = main_118_18iii;
	end
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_277) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_83 == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__84_279) & (memory_controller_waitrequest == 1'd0)) & (main_84_orcondi1ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__87_281) & (memory_controller_waitrequest == 1'd0)) & (main_87_orcond12i2ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__90_284) & (memory_controller_waitrequest == 1'd0)) & (main_90_orcond3i3ii_reg == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_286) & (memory_controller_waitrequest == 1'd0)) & (main_94_orcond13i4ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__97_288) & (memory_controller_waitrequest == 1'd0)) & (main_97_orcond14i5ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__100_290) & (memory_controller_waitrequest == 1'd0)) & (main_100_orcond5i6ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__103_292) & (memory_controller_waitrequest == 1'd0)) & (main_103_orcond15i7ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_294) & (memory_controller_waitrequest == 1'd0)) & (main_106_orcond16iii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__109_296) & (memory_controller_waitrequest == 1'd0)) & (main_109_orcond7i8ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_298) & (memory_controller_waitrequest == 1'd0)) & (main_112_orcond17iii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if ((((cur_state == LEGUP_F_main_BB__115_300) & (memory_controller_waitrequest == 1'd0)) & (main_115_orcond9i9ii == 1'd1))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %b.0.i13.i.i = phi float [ 0x3F925460A0000000, %.preheader ], [ 0x3FC6075F60000000, %84 ], [ 0x3FDF86C220000000, %87 ], [ 0x3FEC0AA640000000, %90 ], [ 0x3FF2779A60000000, %94 ], [ 0x3FF1780340000000, %97 ], [ 0x3FF0212D80000000, %100 ], [ 0x3FF0212D80000000, %103 ], [ 0x3FF1780340000000, %106 ], [ 0x3FF2779A60000000, %109 ], [ 0x3FEC0AA640000000, %112 ], [ 0x3FDF86C220000000, %115 ], [ %.18.i.i.i, %118 ]*/
	if (((cur_state == LEGUP_F_main_BB__118_302) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_sech2exitii_b0i13ii_reg <= main_linear_sech2exitii_b0i13ii;
		if (start == 1'b0 && ^(main_linear_sech2exitii_b0i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_b0i13ii_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_sech2exitii_121 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_sech2exitii_122 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_sech2exitii_123 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %123 = fadd float %81, %122*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342)) begin
		main_linear_sech2exitii_123_reg <= main_linear_sech2exitii_123;
		if (start == 1'b0 && ^(main_linear_sech2exitii_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_123_reg"); $finish; end
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %123 = fadd float %81, %122*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_342)) begin
		main_linear_sech2exitii_123_reg <= main_linear_sech2exitii_123;
		if (start == 1'b0 && ^(main_linear_sech2exitii_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %124 = add nsw i32 %t.218.i.i, 1*/
		main_linear_sech2exitii_124 = (main_preheader_t218ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %124 = add nsw i32 %t.218.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_303)) begin
		main_linear_sech2exitii_124_reg <= main_linear_sech2exitii_124;
		if (start == 1'b0 && ^(main_linear_sech2exitii_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %exitcond9 = icmp eq i32 %124, 64*/
		main_linear_sech2exitii_exitcond9 = (main_linear_sech2exitii_124 == 32'd64);
end
always @(posedge clk) begin
	/* main: %linear_sech2.exit.i.i*/
	/*   %exitcond9 = icmp eq i32 %124, 64*/
	if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_303)) begin
		main_linear_sech2exitii_exitcond9_reg <= main_linear_sech2exitii_exitcond9;
		if (start == 1'b0 && ^(main_linear_sech2exitii_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_sech2exitii_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %125 = phi float [ %162, %linear_tanh.exit.1.i.i ], [ 0.000000e+00, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_273) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_125 = 32'h0;
	end
	/* main: %.preheader1*/
	/*   %125 = phi float [ %162, %linear_tanh.exit.1.i.i ], [ 0.000000e+00, %.preheader1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit1ii_exitcond6_reg == 1'd0))) */ begin
		main_preheader1_125 = main_linear_tanhexit1ii_162;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %125 = phi float [ %162, %linear_tanh.exit.1.i.i ], [ 0.000000e+00, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_273) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_125_reg <= main_preheader1_125;
		if (start == 1'b0 && ^(main_preheader1_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_125_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %125 = phi float [ %162, %linear_tanh.exit.1.i.i ], [ 0.000000e+00, %.preheader1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit1ii_exitcond6_reg == 1'd0))) begin
		main_preheader1_125_reg <= main_preheader1_125;
		if (start == 1'b0 && ^(main_preheader1_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %t.119.1.i.i = phi i32 [ %163, %linear_tanh.exit.1.i.i ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_273) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_t1191ii = 32'd0;
	end
	/* main: %.preheader1*/
	/*   %t.119.1.i.i = phi i32 [ %163, %linear_tanh.exit.1.i.i ], [ 0, %.preheader1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit1ii_exitcond6_reg == 1'd0))) */ begin
		main_preheader1_t1191ii = main_linear_tanhexit1ii_163_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %t.119.1.i.i = phi i32 [ %163, %linear_tanh.exit.1.i.i ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_273) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_t1191ii_reg <= main_preheader1_t1191ii;
		if (start == 1'b0 && ^(main_preheader1_t1191ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_t1191ii_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %t.119.1.i.i = phi i32 [ %163, %linear_tanh.exit.1.i.i ], [ 0, %.preheader1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417) & (memory_controller_waitrequest == 1'd0)) & (main_linear_tanhexit1ii_exitcond6_reg == 1'd0))) begin
		main_preheader1_t1191ii_reg <= main_preheader1_t1191ii;
		if (start == 1'b0 && ^(main_preheader1_t1191ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_t1191ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %scevgep7 = getelementptr [64 x float]* @product_1, i32 0, i32 %t.119.1.i.i*/
		main_preheader1_scevgep7 = (`TAG_g_product_1_a + (4 * main_preheader1_t1191ii_reg));
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %scevgep8 = getelementptr [2 x [64 x float]]* @whitened_signals, i32 0, i32 1, i32 %t.119.1.i.i*/
		main_preheader1_scevgep8 = (`TAG_g_whitened_signals_a + ((256 * 32'd1) + (4 * main_preheader1_t1191ii_reg)));
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
		main_preheader1_126 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_345)) begin
		main_preheader1_126_reg <= main_preheader1_126;
		if (start == 1'b0 && ^(main_preheader1_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
		main_preheader1_127 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_345)) begin
		main_preheader1_127_reg <= main_preheader1_127;
		if (start == 1'b0 && ^(main_preheader1_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_127_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1_128 = altfp_compare32_1_main_preheader1_128_out;
end
always @(*) begin
	main_129_130 = altfp_compare32_1_main_129_130_out;
end
always @(*) begin
	main_129_131 = altfp_compare32_1_main_129_131_out;
end
always @(*) begin
	/* main: %129*/
	/*   %or.cond.i.1.i.i = and i1 %130, %131*/
		main_129_orcondi1ii = (main_129_130 & main_129_131);
end
always @(*) begin
	main_132_133 = altfp_compare32_1_main_132_133_out;
end
always @(*) begin
	main_132_134 = altfp_compare32_1_main_132_134_out;
end
always @(*) begin
	/* main: %132*/
	/*   %or.cond12.i.1.i.i = and i1 %133, %134*/
		main_132_orcond12i1ii = (main_132_133 & main_132_134);
end
always @(*) begin
	main_135_136 = altfp_compare32_1_main_135_136_out;
end
always @(*) begin
	main_135_137 = altfp_compare32_1_main_135_137_out;
end
always @(*) begin
	/* main: %135*/
	/*   %or.cond3.i.1.i.i = and i1 %136, %137*/
		main_135_orcond3i1ii = (main_135_136 & main_135_137);
end
always @(*) begin
	main_138_139 = altfp_compare32_1_main_138_139_out;
end
always @(*) begin
	main_138_140 = altfp_compare32_1_main_138_140_out;
end
always @(*) begin
	/* main: %138*/
	/*   %or.cond13.i.1.i.i = and i1 %139, %140*/
		main_138_orcond13i1ii = (main_138_139 & main_138_140);
end
always @(*) begin
	main_141_142 = altfp_compare32_1_main_141_142_out;
end
always @(*) begin
	main_141_143 = altfp_compare32_1_main_141_143_out;
end
always @(*) begin
	/* main: %141*/
	/*   %or.cond5.i.1.i.i = and i1 %142, %143*/
		main_141_orcond5i1ii = (main_141_142 & main_141_143);
end
always @(*) begin
	main_144_145 = altfp_compare32_1_main_144_145_out;
end
always @(*) begin
	main_144_146 = altfp_compare32_1_main_144_146_out;
end
always @(*) begin
	/* main: %144*/
	/*   %or.cond14.i.1.i.i = and i1 %145, %146*/
		main_144_orcond14i1ii = (main_144_145 & main_144_146);
end
always @(*) begin
	main_147_148 = altfp_compare32_1_main_147_148_out;
end
always @(*) begin
	main_147_149 = altfp_compare32_1_main_147_149_out;
end
always @(*) begin
	/* main: %147*/
	/*   %or.cond7.i.1.i.i = and i1 %148, %149*/
		main_147_orcond7i1ii = (main_147_148 & main_147_149);
end
always @(*) begin
	main_150_151 = altfp_compare32_1_main_150_151_out;
end
always @(*) begin
	main_150_152 = altfp_compare32_1_main_150_152_out;
end
always @(*) begin
	/* main: %150*/
	/*   %or.cond15.i.1.i.i = and i1 %151, %152*/
		main_150_orcond15i1ii = (main_150_151 & main_150_152);
end
always @(*) begin
	main_153_154 = altfp_compare32_1_main_153_154_out;
end
always @(*) begin
	main_153_155 = altfp_compare32_1_main_153_155_out;
end
always @(*) begin
	/* main: %153*/
	/*   %or.cond9.i.1.i.i = and i1 %154, %155*/
		main_153_orcond9i1ii = (main_153_154 & main_153_155);
end
always @(*) begin
	main_156_157 = altfp_compare32_1_main_156_157_out;
end
always @(*) begin
	main_156_158 = altfp_compare32_1_main_156_158_out;
end
always @(*) begin
	/* main: %156*/
	/*   %or.cond11.i.1.i.i = and i1 %157, %158*/
		main_156_orcond11i1ii = (main_156_157 & main_156_158);
end
always @(*) begin
	/* main: %156*/
	/*   %..i.1.i.i = select i1 %or.cond11.i.1.i.i, float 0x3F9E000000000000, float 0x3F48000040000000*/
		main_156_i1ii = (main_156_orcond11i1ii ? 32'h3CF00000 : 32'h3A400002);
end
always @(*) begin
	/* main: %156*/
	/*   %.16.i.1.i.i = select i1 %or.cond11.i.1.i.i, float 0x3FED0068E0000000, float 1.000000e+00*/
		main_156_16i1ii = (main_156_orcond11i1ii ? 32'h3F680347 : 32'h3F800000);
end
always @(*) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1_346) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1_128 == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3A400002;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__129_348) & (memory_controller_waitrequest == 1'd0)) & (main_129_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3CF00000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__132_350) & (memory_controller_waitrequest == 1'd0)) & (main_132_orcond12i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__135_352) & (memory_controller_waitrequest == 1'd0)) & (main_135_orcond3i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__138_354) & (memory_controller_waitrequest == 1'd0)) & (main_138_orcond13i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__141_356) & (memory_controller_waitrequest == 1'd0)) & (main_141_orcond5i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__144_358) & (memory_controller_waitrequest == 1'd0)) & (main_144_orcond14i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3F73F000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__147_360) & (memory_controller_waitrequest == 1'd0)) & (main_147_orcond7i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3F17D000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__150_362) & (memory_controller_waitrequest == 1'd0)) & (main_150_orcond15i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3E91A000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__153_364) & (memory_controller_waitrequest == 1'd0)) & (main_153_orcond9i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii = 32'h3DED8000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__156_366) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexit1ii_a0i1ii = main_156_i1ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1_346) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1_128 == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__129_348) & (memory_controller_waitrequest == 1'd0)) & (main_129_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__132_350) & (memory_controller_waitrequest == 1'd0)) & (main_132_orcond12i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__135_352) & (memory_controller_waitrequest == 1'd0)) & (main_135_orcond3i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_354) & (memory_controller_waitrequest == 1'd0)) & (main_138_orcond13i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__141_356) & (memory_controller_waitrequest == 1'd0)) & (main_141_orcond5i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__144_358) & (memory_controller_waitrequest == 1'd0)) & (main_144_orcond14i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__147_360) & (memory_controller_waitrequest == 1'd0)) & (main_147_orcond7i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__150_362) & (memory_controller_waitrequest == 1'd0)) & (main_150_orcond15i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__153_364) & (memory_controller_waitrequest == 1'd0)) & (main_153_orcond9i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %a.0.i.1.i.i = phi float [ 0x3F48000040000000, %.preheader1 ], [ 0x3F9E000000000000, %129 ], [ 0x3FBDB00000000000, %132 ], [ 0x3FD2340000000000, %135 ], [ 0x3FE2FA0000000000, %138 ], [ 0x3FEE7E0000000000, %141 ], [ 0x3FEE7E0000000000, %144 ], [ 0x3FE2FA0000000000, %147 ], [ 0x3FD2340000000000, %150 ], [ 0x3FBDB00000000000, %153 ], [ %..i.1.i.i, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexit1ii_a0i1ii_reg <= main_linear_tanhexit1ii_a0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_a0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_a0i1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1_346) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1_128 == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'hBF800000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__129_348) & (memory_controller_waitrequest == 1'd0)) & (main_129_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'hBF680347;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__132_350) & (memory_controller_waitrequest == 1'd0)) & (main_132_orcond12i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'hBF400000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__135_352) & (memory_controller_waitrequest == 1'd0)) & (main_135_orcond3i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'hBF000000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__138_354) & (memory_controller_waitrequest == 1'd0)) & (main_138_orcond13i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'hBE400000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__141_356) & (memory_controller_waitrequest == 1'd0)) & (main_141_orcond5i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'h0;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__144_358) & (memory_controller_waitrequest == 1'd0)) & (main_144_orcond14i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'h0;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__147_360) & (memory_controller_waitrequest == 1'd0)) & (main_147_orcond7i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'h3E400000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__150_362) & (memory_controller_waitrequest == 1'd0)) & (main_150_orcond15i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'h3F000000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__153_364) & (memory_controller_waitrequest == 1'd0)) & (main_153_orcond9i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii = 32'h3F400000;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__156_366) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_linear_tanhexit1ii_b0i1ii = main_156_16i1ii;
	end
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1_346) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1_128 == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__129_348) & (memory_controller_waitrequest == 1'd0)) & (main_129_orcondi1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__132_350) & (memory_controller_waitrequest == 1'd0)) & (main_132_orcond12i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__135_352) & (memory_controller_waitrequest == 1'd0)) & (main_135_orcond3i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_354) & (memory_controller_waitrequest == 1'd0)) & (main_138_orcond13i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__141_356) & (memory_controller_waitrequest == 1'd0)) & (main_141_orcond5i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__144_358) & (memory_controller_waitrequest == 1'd0)) & (main_144_orcond14i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__147_360) & (memory_controller_waitrequest == 1'd0)) & (main_147_orcond7i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__150_362) & (memory_controller_waitrequest == 1'd0)) & (main_150_orcond15i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if ((((cur_state == LEGUP_F_main_BB__153_364) & (memory_controller_waitrequest == 1'd0)) & (main_153_orcond9i1ii == 1'd1))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %b.0.i.1.i.i = phi float [ -1.000000e+00, %.preheader1 ], [ 0xBFED0068E0000000, %129 ], [ -7.500000e-01, %132 ], [ -5.000000e-01, %135 ], [ -1.875000e-01, %138 ], [ 0.000000e+00, %141 ], [ 0.000000e+00, %144 ], [ 1.875000e-01, %147 ], [ 5.000000e-01, %150 ], [ 7.500000e-01, %153 ], [ %.16.i.1.i.i, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_linear_tanhexit1ii_b0i1ii_reg <= main_linear_tanhexit1ii_b0i1ii;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_b0i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_b0i1ii_reg"); $finish; end
	end
end
always @(*) begin
	main_linear_tanhexit1ii_159 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexit1ii_160 = main_altfp_add_32_0;
end
always @(*) begin
	main_linear_tanhexit1ii_161 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_linear_tanhexit1ii_162 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %162 = fadd float %125, %161*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417)) begin
		main_linear_tanhexit1ii_162_reg <= main_linear_tanhexit1ii_162;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_162_reg"); $finish; end
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %162 = fadd float %125, %161*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_417)) begin
		main_linear_tanhexit1ii_162_reg <= main_linear_tanhexit1ii_162;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %163 = add nsw i32 %t.119.1.i.i, 1*/
		main_linear_tanhexit1ii_163 = (main_preheader1_t1191ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %163 = add nsw i32 %t.119.1.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_367)) begin
		main_linear_tanhexit1ii_163_reg <= main_linear_tanhexit1ii_163;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %exitcond6 = icmp eq i32 %163, 64*/
		main_linear_tanhexit1ii_exitcond6 = (main_linear_tanhexit1ii_163 == 32'd64);
end
always @(posedge clk) begin
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %exitcond6 = icmp eq i32 %163, 64*/
	if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_367)) begin
		main_linear_tanhexit1ii_exitcond6_reg <= main_linear_tanhexit1ii_exitcond6;
		if (start == 1'b0 && ^(main_linear_tanhexit1ii_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_linear_tanhexit1ii_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %164 = bitcast float %7 to i32*/
		main_rotateexiti_164 = main_1_7_reg;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %164 = bitcast float %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_419)) begin
		main_rotateexiti_164_reg <= main_rotateexiti_164;
		if (start == 1'b0 && ^(main_rotateexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %165 = bitcast float %6 to i32*/
		main_rotateexiti_165 = main_1_6_reg;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %165 = bitcast float %6 to i32*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_419)) begin
		main_rotateexiti_165_reg <= main_rotateexiti_165;
		if (start == 1'b0 && ^(main_rotateexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	main_rotateexiti_166 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_rotateexiti_167 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_rotateexiti_168 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_rotateexiti_169 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %rotate.exit.i*/
/*   %169 = fmul float %168, 5.000000e-01*/
	main_rotateexiti_169_reg = main_1_8_reg;
end
always @(*) begin
	main_rotateexiti_170 = main_altfp_subtract_32_0;
end
always @(*) begin
/* main: %rotate.exit.i*/
/*   %170 = fsub float %162, %167*/
	main_rotateexiti_170_reg = main_28_31_reg;
end
always @(*) begin
	main_rotateexiti_171 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %rotate.exit.i*/
/*   %171 = fmul float %170, 5.000000e-01*/
	main_rotateexiti_171_reg = main_1_10_reg;
end
always @(*) begin
	main_rotateexiti_172 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_rotateexiti_173 = main_altfp_add_32_0;
end
always @(*) begin
	main_rotateexiti_174 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %rotate.exit.i*/
	/*   %174 = fmul float %171, %171*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_478)) begin
		main_rotateexiti_174_reg <= main_rotateexiti_174;
		if (start == 1'b0 && ^(main_rotateexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_174_reg"); $finish; end
	end
	/* main: %rotate.exit.i*/
	/*   %174 = fmul float %171, %171*/
	if ((cur_state == LEGUP_F_main_BB_rotateexiti_478)) begin
		main_rotateexiti_174_reg <= main_rotateexiti_174;
		if (start == 1'b0 && ^(main_rotateexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_174_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %198 = fmul float %169, %197*/
	if ((cur_state == LEGUP_F_main_BB_normalizeexiti_544)) begin
		main_rotateexiti_174_reg <= main_normalizeexiti_198;
		if (start == 1'b0 && ^(main_normalizeexiti_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_rotateexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	main_rotateexiti_175 = main_altfp_add_32_0;
end
always @(*) begin
/* main: %rotate.exit.i*/
/*   %175 = fadd float %173, %174*/
	main_rotateexiti_175_reg = main_1_11_reg;
end
always @(*) begin
	main_rotateexiti_176 = altfp_compare32_1_main_rotateexiti_176_out;
end
always @(*) begin
	main_rotateexiti_177 = altfp_compare32_1_main_rotateexiti_177_out;
end
always @(*) begin
	/* main: %rotate.exit.i*/
	/*   %or.cond.i.i.i.i = and i1 %176, %177*/
		main_rotateexiti_orcondiiii = (main_rotateexiti_176 & main_rotateexiti_177);
end
always @(*) begin
	main_178_179 = altfp_compare32_1_main_178_179_out;
end
always @(*) begin
	main_178_180 = altfp_compare32_1_main_178_180_out;
end
always @(*) begin
	/* main: %178*/
	/*   %or.cond3.i.i.i.i = and i1 %179, %180*/
		main_178_orcond3iiii = (main_178_179 & main_178_180);
end
always @(*) begin
	main_181_182 = altfp_compare32_1_main_181_182_out;
end
always @(*) begin
	main_181_183 = altfp_compare32_1_main_181_183_out;
end
always @(*) begin
	/* main: %181*/
	/*   %or.cond5.i.i.i.i = and i1 %182, %183*/
		main_181_orcond5iiii = (main_181_182 & main_181_183);
end
always @(*) begin
	main_184_185 = altfp_compare32_1_main_184_185_out;
end
always @(*) begin
	main_184_186 = altfp_compare32_1_main_184_186_out;
end
always @(*) begin
	/* main: %184*/
	/*   %or.cond7.i.i.i.i = and i1 %185, %186*/
		main_184_orcond7iiii = (main_184_185 & main_184_186);
end
always @(*) begin
	main_187_188 = altfp_compare32_1_main_187_188_out;
end
always @(*) begin
	main_187_189 = altfp_compare32_1_main_187_189_out;
end
always @(*) begin
	/* main: %187*/
	/*   %or.cond9.i.i.i.i = and i1 %188, %189*/
		main_187_orcond9iiii = (main_187_188 & main_187_189);
end
always @(*) begin
	main_190_191 = altfp_compare32_1_main_190_191_out;
end
always @(*) begin
	main_190_192 = altfp_compare32_1_main_190_192_out;
end
always @(*) begin
	/* main: %190*/
	/*   %or.cond11.i.i.i.i = and i1 %191, %192*/
		main_190_orcond11iiii = (main_190_191 & main_190_192);
end
always @(*) begin
	main_193_194 = altfp_compare32_1_main_193_194_out;
end
always @(*) begin
	main_193_195 = altfp_compare32_1_main_193_195_out;
end
always @(*) begin
	/* main: %193*/
	/*   %or.cond13.i.i.i.i = and i1 %194, %195*/
		main_193_orcond13iiii = (main_193_194 & main_193_195);
end
always @(*) begin
	/* main: %193*/
	/*   %..i.i.i.i = select i1 %or.cond13.i.i.i.i, float 0xBEFAAA5040000000, float 0xBEE2DA7840000000*/
		main_193_iiii = (main_193_orcond13iiii ? 32'hB7D55282 : 32'hB716D3C2);
end
always @(*) begin
	/* main: %193*/
	/*   %.14.i.i.i.i = select i1 %or.cond13.i.i.i.i, float 0x3FACB923A0000000, float 0x3FA4538F00000000*/
		main_193_14iiii = (main_193_orcond13iiii ? 32'h3D65C91D : 32'h3D229C78);
end
always @(*) begin
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB_rotateexiti_495) & (memory_controller_waitrequest == 1'd0)) & (main_rotateexiti_orcondiiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hBCDEC68F;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__178_497) & (memory_controller_waitrequest == 1'd0)) & (main_178_orcond3iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hBB513592;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__181_499) & (memory_controller_waitrequest == 1'd0)) & (main_181_orcond5iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hBA9C250F;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__184_501) & (memory_controller_waitrequest == 1'd0)) & (main_184_orcond7iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hB9E5BCDE;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__187_503) & (memory_controller_waitrequest == 1'd0)) & (main_187_orcond9iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hB93DF5C4;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__190_505) & (memory_controller_waitrequest == 1'd0)) & (main_190_orcond11iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii = 32'hB896DE7E;
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__193_507) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeexiti_a0iiii = main_193_iiii;
	end
end
always @(posedge clk) begin
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB_rotateexiti_495) & (memory_controller_waitrequest == 1'd0)) & (main_rotateexiti_orcondiiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__178_497) & (memory_controller_waitrequest == 1'd0)) & (main_178_orcond3iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__181_499) & (memory_controller_waitrequest == 1'd0)) & (main_181_orcond5iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_501) & (memory_controller_waitrequest == 1'd0)) & (main_184_orcond7iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_503) & (memory_controller_waitrequest == 1'd0)) & (main_187_orcond9iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_505) & (memory_controller_waitrequest == 1'd0)) & (main_190_orcond11iiii == 1'd1))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %a.0.i.i.i.i = phi float [ 0xBF9BD8D1E0000000, %rotate.exit.i ], [ 0xBF6A26B240000000, %178 ], [ 0xBF5384A1E0000000, %181 ], [ 0xBF3CB79BC0000000, %184 ], [ 0xBF27BEB880000000, %187 ], [ 0xBF12DBCFC0000000, %190 ], [ %..i.i.i.i, %193 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_507) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeexiti_a0iiii_reg <= main_normalizeexiti_a0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_a0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_a0iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB_rotateexiti_495) & (memory_controller_waitrequest == 1'd0)) & (main_rotateexiti_orcondiiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3F2A511A;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__178_497) & (memory_controller_waitrequest == 1'd0)) & (main_178_orcond3iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3E90068E;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__181_499) & (memory_controller_waitrequest == 1'd0)) & (main_181_orcond5iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3E4EF34D;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__184_501) & (memory_controller_waitrequest == 1'd0)) & (main_184_orcond7iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3E147AE1;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__187_503) & (memory_controller_waitrequest == 1'd0)) & (main_187_orcond9iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3DDC28F6;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__190_505) & (memory_controller_waitrequest == 1'd0)) & (main_190_orcond11iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii = 32'h3DA29C78;
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__193_507) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeexiti_b0iiii = main_193_14iiii;
	end
end
always @(posedge clk) begin
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB_rotateexiti_495) & (memory_controller_waitrequest == 1'd0)) & (main_rotateexiti_orcondiiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__178_497) & (memory_controller_waitrequest == 1'd0)) & (main_178_orcond3iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__181_499) & (memory_controller_waitrequest == 1'd0)) & (main_181_orcond5iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_501) & (memory_controller_waitrequest == 1'd0)) & (main_184_orcond7iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_503) & (memory_controller_waitrequest == 1'd0)) & (main_187_orcond9iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if ((((cur_state == LEGUP_F_main_BB__190_505) & (memory_controller_waitrequest == 1'd0)) & (main_190_orcond11iiii == 1'd1))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
	/* main: %normalize.exit.i*/
	/*   %b.0.i.i.i.i = phi float [ 0x3FE54A2340000000, %rotate.exit.i ], [ 0x3FD200D1C0000000, %178 ], [ 0x3FC9DE69A0000000, %181 ], [ 0x3FC28F5C20000000, %184 ], [ 0x3FBB851EC0000000, %187 ], [ 0x3FB4538F00000000, %190 ], [ %.14.i.i.i.i, %193 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_507) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeexiti_b0iiii_reg <= main_normalizeexiti_b0iiii;
		if (start == 1'b0 && ^(main_normalizeexiti_b0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeexiti_b0iiii_reg"); $finish; end
	end
end
always @(*) begin
	main_normalizeexiti_196 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_normalizeexiti_197 = main_altfp_add_32_0;
end
always @(*) begin
/* main: %normalize.exit.i*/
/*   %197 = fadd float %196, %b.0.i.i.i.i*/
	main_normalizeexiti_197_reg = main_1_9_reg;
end
always @(*) begin
	main_normalizeexiti_198 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %normalize.exit.i*/
/*   %198 = fmul float %169, %197*/
	main_normalizeexiti_198_reg = main_rotateexiti_174_reg;
end
always @(*) begin
	main_normalizeexiti_199 = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %8 = fmul float %5, %7*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_altfp_multiply_32_0_op0 = main_1_5_reg;
	end
	/* main: %1*/
	/*   %10 = fmul float %4, %6*/
	else if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_altfp_multiply_32_0_op0 = main_1_4_reg;
	end
	/* main: %.preheader2*/
	/*   %36 = fmul float %7, %35*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_156)) begin
		main_altfp_multiply_32_0_op0 = main_1_7_reg;
	end
	/* main: %.preheader2*/
	/*   %39 = fmul float %6, %38*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_157)) begin
		main_altfp_multiply_32_0_op0 = main_1_6_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %76 = fmul float %44, %a.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_222)) begin
		main_altfp_multiply_32_0_op0 = main_preheader15ii_44_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %78 = fmul float %43, %77*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_247)) begin
		main_altfp_multiply_32_0_op0 = main_preheader15ii_43_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %121 = fmul float %82, %a.0.i12.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_303)) begin
		main_altfp_multiply_32_0_op0 = main_preheader_82_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %159 = fmul float %127, %a.0.i.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_367)) begin
		main_altfp_multiply_32_0_op0 = main_preheader1_127_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %161 = fmul float %126, %160*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_392)) begin
		main_altfp_multiply_32_0_op0 = main_preheader1_126_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %166 = fmul float %7, %123*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_419)) begin
		main_altfp_multiply_32_0_op0 = main_1_7_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %167 = fmul float %6, %123*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_420)) begin
		main_altfp_multiply_32_0_op0 = main_1_6_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %169 = fmul float %168, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_444)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_168;
	end
	/* main: %rotate.exit.i*/
	/*   %172 = fmul float %169, %169*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_455)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_169;
	end
	/* main: %rotate.exit.i*/
	/*   %171 = fmul float %170, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_456)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_170_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %174 = fmul float %171, %171*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_467)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_171;
	end
	/* main: %normalize.exit.i*/
	/*   %196 = fmul float %175, %a.0.i.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeexiti_508)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_175_reg;
	end
	/* main: %normalize.exit.i*/
	/*   %198 = fmul float %169, %197*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeexiti_533)) begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_169_reg;
	end
	/* main: %normalize.exit.i*/
	/*   %199 = fmul float %171, %197*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeexiti_534)) */ begin
		main_altfp_multiply_32_0_op0 = main_rotateexiti_171_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = fmul float %5, %7*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_altfp_multiply_32_0_op1 = main_1_7_reg;
	end
	/* main: %1*/
	/*   %10 = fmul float %4, %6*/
	else if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_altfp_multiply_32_0_op1 = main_1_6_reg;
	end
	/* main: %.preheader2*/
	/*   %36 = fmul float %7, %35*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_156)) begin
		main_altfp_multiply_32_0_op1 = main_preheader2_35;
	end
	/* main: %.preheader2*/
	/*   %39 = fmul float %6, %38*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_157)) begin
		main_altfp_multiply_32_0_op1 = main_preheader2_38_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %76 = fmul float %44, %a.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_222)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexitii_a0iii_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %78 = fmul float %43, %77*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_247)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexitii_77;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %121 = fmul float %82, %a.0.i12.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_303)) begin
		main_altfp_multiply_32_0_op1 = main_linear_sech2exitii_a0i12ii_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %159 = fmul float %127, %a.0.i.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_367)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexit1ii_a0i1ii_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %161 = fmul float %126, %160*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_392)) begin
		main_altfp_multiply_32_0_op1 = main_linear_tanhexit1ii_160;
	end
	/* main: %rotate.exit.i*/
	/*   %166 = fmul float %7, %123*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_419)) begin
		main_altfp_multiply_32_0_op1 = main_linear_sech2exitii_123_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %167 = fmul float %6, %123*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_420)) begin
		main_altfp_multiply_32_0_op1 = main_linear_sech2exitii_123_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %169 = fmul float %168, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_444)) begin
		main_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* main: %rotate.exit.i*/
	/*   %172 = fmul float %169, %169*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_455)) begin
		main_altfp_multiply_32_0_op1 = main_rotateexiti_169;
	end
	/* main: %rotate.exit.i*/
	/*   %171 = fmul float %170, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_456)) begin
		main_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* main: %rotate.exit.i*/
	/*   %174 = fmul float %171, %171*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_467)) begin
		main_altfp_multiply_32_0_op1 = main_rotateexiti_171;
	end
	/* main: %normalize.exit.i*/
	/*   %196 = fmul float %175, %a.0.i.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeexiti_508)) begin
		main_altfp_multiply_32_0_op1 = main_normalizeexiti_a0iiii_reg;
	end
	/* main: %normalize.exit.i*/
	/*   %198 = fmul float %169, %197*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeexiti_533)) begin
		main_altfp_multiply_32_0_op1 = main_normalizeexiti_197;
	end
	/* main: %normalize.exit.i*/
	/*   %199 = fmul float %171, %197*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeexiti_534)) */ begin
		main_altfp_multiply_32_0_op1 = main_normalizeexiti_197_reg;
	end
end
always @(*) begin
	altfp_main_1_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_1_8_out;
end
always @(*) begin
	/* main: %1*/
	/*   %9 = fadd float %8, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_12)) begin
		main_altfp_add_32_0_op0 = main_1_8;
	end
	/* main: %1*/
	/*   %11 = fadd float %9, %10*/
	else if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_altfp_add_32_0_op0 = main_1_9;
	end
	/* main: %15*/
	/*   %17 = fadd float %16, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__15_57)) begin
		main_altfp_add_32_0_op0 = main_15_16_reg;
	end
	/* main: %22*/
	/*   %24 = fadd float %23, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__22_89)) begin
		main_altfp_add_32_0_op0 = main_22_23_reg;
	end
	/* main: %28*/
	/*   %30 = fadd float %29, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__28_120)) begin
		main_altfp_add_32_0_op0 = main_28_29_reg;
	end
	/* main: %.preheader2*/
	/*   %37 = fadd float %36, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_167)) begin
		main_altfp_add_32_0_op0 = main_preheader2_36;
	end
	/* main: %.preheader2*/
	/*   %40 = fadd float %37, %39*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_181)) begin
		main_altfp_add_32_0_op0 = main_preheader2_37;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %77 = fadd float %76, %b.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_233)) begin
		main_altfp_add_32_0_op0 = main_linear_tanhexitii_76;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %79 = fadd float %42, %78*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_258)) begin
		main_altfp_add_32_0_op0 = main_preheader15ii_42_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %122 = fadd float %121, %b.0.i13.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_altfp_add_32_0_op0 = main_linear_sech2exitii_121;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %123 = fadd float %81, %122*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_328)) begin
		main_altfp_add_32_0_op0 = main_preheader_81_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %160 = fadd float %159, %b.0.i.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_378)) begin
		main_altfp_add_32_0_op0 = main_linear_tanhexit1ii_159;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %162 = fadd float %125, %161*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_403)) begin
		main_altfp_add_32_0_op0 = main_preheader1_125_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %173 = fadd float %172, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_466)) begin
		main_altfp_add_32_0_op0 = main_rotateexiti_172;
	end
	/* main: %rotate.exit.i*/
	/*   %175 = fadd float %173, %174*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_480)) begin
		main_altfp_add_32_0_op0 = main_rotateexiti_173;
	end
	/* main: %normalize.exit.i*/
	/*   %197 = fadd float %196, %b.0.i.i.i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeexiti_519)) */ begin
		main_altfp_add_32_0_op0 = main_normalizeexiti_196;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = fadd float %8, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__1_12)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %1*/
	/*   %11 = fadd float %9, %10*/
	else if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_altfp_add_32_0_op1 = main_1_10_reg;
	end
	/* main: %15*/
	/*   %17 = fadd float %16, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__15_57)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %22*/
	/*   %24 = fadd float %23, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__22_89)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %28*/
	/*   %30 = fadd float %29, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__28_120)) begin
		main_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* main: %.preheader2*/
	/*   %37 = fadd float %36, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_167)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %.preheader2*/
	/*   %40 = fadd float %37, %39*/
	else if ((cur_state == LEGUP_F_main_BB_preheader2_181)) begin
		main_altfp_add_32_0_op1 = main_preheader2_39_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %77 = fadd float %76, %b.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_233)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexitii_b0iii_reg;
	end
	/* main: %linear_tanh.exit.i.i*/
	/*   %79 = fadd float %42, %78*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexitii_258)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexitii_78;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %122 = fadd float %121, %b.0.i13.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_314)) begin
		main_altfp_add_32_0_op1 = main_linear_sech2exitii_b0i13ii_reg;
	end
	/* main: %linear_sech2.exit.i.i*/
	/*   %123 = fadd float %81, %122*/
	else if ((cur_state == LEGUP_F_main_BB_linear_sech2exitii_328)) begin
		main_altfp_add_32_0_op1 = main_linear_sech2exitii_122;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %160 = fadd float %159, %b.0.i.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_378)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexit1ii_b0i1ii_reg;
	end
	/* main: %linear_tanh.exit.1.i.i*/
	/*   %162 = fadd float %125, %161*/
	else if ((cur_state == LEGUP_F_main_BB_linear_tanhexit1ii_403)) begin
		main_altfp_add_32_0_op1 = main_linear_tanhexit1ii_161;
	end
	/* main: %rotate.exit.i*/
	/*   %173 = fadd float %172, 0.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_466)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %rotate.exit.i*/
	/*   %175 = fadd float %173, %174*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_480)) begin
		main_altfp_add_32_0_op1 = main_rotateexiti_174_reg;
	end
	/* main: %normalize.exit.i*/
	/*   %197 = fadd float %196, %b.0.i.i.i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeexiti_519)) */ begin
		main_altfp_add_32_0_op1 = main_normalizeexiti_b0iiii_reg;
	end
end
always @(*) begin
	altfp_main_1_9_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_1_9_out;
end
always @(*) begin
	/* main: %13*/
	/*   %14 = fsub float -0.000000e+00, %11*/
	if ((cur_state == LEGUP_F_main_BB__13_42)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %20*/
	/*   %21 = fsub float -0.000000e+00, %11*/
	else if ((cur_state == LEGUP_F_main_BB__20_74)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %26*/
	/*   %27 = fsub float -0.000000e+00, %11*/
	else if ((cur_state == LEGUP_F_main_BB__26_105)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %28*/
	/*   %31 = fsub float -0.000000e+00, %30*/
	else if ((cur_state == LEGUP_F_main_BB__28_134)) begin
		main_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* main: %rotate.exit.i*/
	/*   %168 = fsub float %79, %166*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_430)) begin
		main_altfp_subtract_32_0_op0 = main_linear_tanhexitii_79_reg;
	end
	/* main: %rotate.exit.i*/
	/*   %170 = fsub float %162, %167*/
	else /* if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) */ begin
		main_altfp_subtract_32_0_op0 = main_linear_tanhexit1ii_162_reg;
	end
end
always @(*) begin
	/* main: %13*/
	/*   %14 = fsub float -0.000000e+00, %11*/
	if ((cur_state == LEGUP_F_main_BB__13_42)) begin
		main_altfp_subtract_32_0_op1 = main_1_11_reg;
	end
	/* main: %20*/
	/*   %21 = fsub float -0.000000e+00, %11*/
	else if ((cur_state == LEGUP_F_main_BB__20_74)) begin
		main_altfp_subtract_32_0_op1 = main_1_11_reg;
	end
	/* main: %26*/
	/*   %27 = fsub float -0.000000e+00, %11*/
	else if ((cur_state == LEGUP_F_main_BB__26_105)) begin
		main_altfp_subtract_32_0_op1 = main_1_11_reg;
	end
	/* main: %28*/
	/*   %31 = fsub float -0.000000e+00, %30*/
	else if ((cur_state == LEGUP_F_main_BB__28_134)) begin
		main_altfp_subtract_32_0_op1 = main_28_30;
	end
	/* main: %rotate.exit.i*/
	/*   %168 = fsub float %79, %166*/
	else if ((cur_state == LEGUP_F_main_BB_rotateexiti_430)) begin
		main_altfp_subtract_32_0_op1 = main_rotateexiti_166;
	end
	/* main: %rotate.exit.i*/
	/*   %170 = fsub float %162, %167*/
	else /* if ((cur_state == LEGUP_F_main_BB_rotateexiti_431)) */ begin
		main_altfp_subtract_32_0_op1 = main_rotateexiti_167;
	end
end
always @(*) begin
	altfp_main_13_14_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_13_14_out;
end
always @(*) begin
	/* main: %converged.exit.i*/
	/*   %33 = fpext float %32 to double*/
	if ((cur_state == LEGUP_F_main_BB_convergedexiti_149)) begin
		main_altfp_extend_32_0_op0 = main_convergedexiti_32_reg;
	end
	/* main: %90*/
	/*   %91 = fpext float %82 to double*/
	else /* if ((cur_state == LEGUP_F_main_BB__90_282)) */ begin
		main_altfp_extend_32_0_op0 = main_preheader_82_reg;
	end
end
always @(*) begin
	altfp_main_convergedexiti_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_extend_32_0 = altfp_extend_main_convergedexiti_33_out;
end
always @(*) begin
	altfp_main_1_12_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_15_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_convergedexiti_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_preheader15ii_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_46_47_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_46_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_49_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_49_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_52_53_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_52_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_55_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_55_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_58_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_58_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_61_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_61_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_64_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_64_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_67_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_67_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_70_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_70_72_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_73_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_73_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_preheader_83_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_84_85_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_84_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_87_88_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_87_89_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_90_92_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_90_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_94_95_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_94_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_97_98_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_97_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_100_101_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_100_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_103_104_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_103_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_106_107_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_106_108_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_109_110_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_109_111_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_112_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_112_114_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_115_116_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_115_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_118_119_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_118_120_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_preheader1_128_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_129_130_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_129_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_132_133_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_132_134_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_135_136_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_135_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_138_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_138_140_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_141_142_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_141_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_144_145_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_144_146_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_147_148_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_147_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_150_151_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_150_152_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_153_154_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_153_155_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_156_157_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_156_158_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_rotateexiti_176_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_rotateexiti_177_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_178_179_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_178_180_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_181_182_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_181_183_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_184_185_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_184_186_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_187_188_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_187_189_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_190_191_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_190_192_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_193_194_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_193_195_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_546)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %35 = load float* %scevgep1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   store float %40, float* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %35 = load float* %scevgep1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_address_a = main_preheader2_scevgep1;
	end
	/* main: %.preheader2*/
	/*   store float %40, float* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		memory_controller_address_a = main_preheader2_scevgep2_reg;
	end
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_address_a = main_preheader15ii_scevgep5;
	end
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_address_a = main_preheader1_scevgep8;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %35 = load float* %scevgep1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   store float %40, float* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   store float %40, float* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		memory_controller_in_a = main_preheader2_40;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %35 = load float* %scevgep1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   store float %40, float* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_195)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader15.i.i*/
	/*   %43 = load float* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader1*/
	/*   %126 = load float* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_address_b = main_preheader2_scevgep;
	end
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_address_b = main_preheader15ii_scevgep4;
	end
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_274)) begin
		memory_controller_address_b = main_preheader_scevgep10;
	end
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_address_b = main_preheader1_scevgep7;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_274)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %38 = load float* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader15.i.i*/
	/*   %44 = load float* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader15ii_198)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %82 = load float* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_274)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader1*/
	/*   %127 = load float* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_343)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %fastica.exit*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB_fasticaexit_546)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
